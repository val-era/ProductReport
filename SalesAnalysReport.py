import base64
import io

import numpy
import pandas as pd
import openpyxl
from openpyxl.cell.cell import Cell
from openpyxl.styles import Font, PatternFill, Alignment
from openpyxl.utils import get_column_letter
from UploadPhoto import GetImage


class Processing:
    def __init__(self):
        self.store_by_wmn_cat = None
        self.store_by_men_cat = None
        self.store_by_category = None
        self.store_by_gender = None
        self.file_name = "TestFile.xlsx"

    def process(self, file_name):
        self.file_name = file_name
        start_cr_df = CreateStoreDF()  # Класс чтения файла и разбивки на DF магазина
        (self.store_by_gender, self.store_by_category,
         self.store_by_men_cat, self.store_by_wmn_cat,
         self.store_by_app_coll, self.store_by_ftw_coll,
         self.store_by_product_type, self.store_by_models) = start_cr_df.read_file(self.file_name)
        self.excel_file()

    def excel_file(self):
        wb = openpyxl.Workbook()
        worksheet = wb.active
        wb.remove(worksheet)

        ws = wb.create_sheet(title="Информация и метрики")

        image_bytes = base64.b64decode("/9j/4AAQSkZJRgABAQEAeAB4AAD/4QLaRXhpZgAATU0AKgAAAAgABAE7AAIAAAAFAAABSodpAAQAAAABAAABUJydAAEAAAAKAAACyOocAAcAAAEMAAAAPgAAAAAc6gAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVXNlcgAAAAWQAwACAAAAFAAAAp6QBAACAAAAFAAAArKSkQACAAAAAzc2AACSkgACAAAAAzc2AADqHAAHAAABDAAAAZIAAAAAHOoAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADIwMjQ6MTA6MTkgMTc6MDE6MTMAMjAyNDoxMDoxOSAxNzowMToxMwAAAFUAcwBlAHIAAAD/4QQXaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLwA8P3hwYWNrZXQgYmVnaW49J++7vycgaWQ9J1c1TTBNcENlaGlIenJlU3pOVGN6a2M5ZCc/Pg0KPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyI+PHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj48cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0idXVpZDpmYWY1YmRkNS1iYTNkLTExZGEtYWQzMS1kMzNkNzUxODJmMWIiIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIvPjxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PSJ1dWlkOmZhZjViZGQ1LWJhM2QtMTFkYS1hZDMxLWQzM2Q3NTE4MmYxYiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIj48eG1wOkNyZWF0ZURhdGU+MjAyNC0xMC0xOVQxNzowMToxMy43NjI8L3htcDpDcmVhdGVEYXRlPjwvcmRmOkRlc2NyaXB0aW9uPjxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PSJ1dWlkOmZhZjViZGQ1LWJhM2QtMTFkYS1hZDMxLWQzM2Q3NTE4MmYxYiIgeG1sbnM6ZGM9Imh0dHA6Ly9wdXJsLm9yZy9kYy9lbGVtZW50cy8xLjEvIj48ZGM6Y3JlYXRvcj48cmRmOlNlcSB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPjxyZGY6bGk+VXNlcjwvcmRmOmxpPjwvcmRmOlNlcT4NCgkJCTwvZGM6Y3JlYXRvcj48L3JkZjpEZXNjcmlwdGlvbj48L3JkZjpSREY+PC94OnhtcG1ldGE+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPD94cGFja2V0IGVuZD0ndyc/Pv/bAEMABwUFBgUEBwYFBggHBwgKEQsKCQkKFQ8QDBEYFRoZGBUYFxseJyEbHSUdFxgiLiIlKCkrLCsaIC8zLyoyJyorKv/bAEMBBwgICgkKFAsLFCocGBwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKv/AABEIAo4EAAMBIgACEQEDEQH/xAAfAAABBQEBAQEBAQAAAAAAAAAAAQIDBAUGBwgJCgv/xAC1EAACAQMDAgQDBQUEBAAAAX0BAgMABBEFEiExQQYTUWEHInEUMoGRoQgjQrHBFVLR8CQzYnKCCQoWFxgZGiUmJygpKjQ1Njc4OTpDREVGR0hJSlNUVVZXWFlaY2RlZmdoaWpzdHV2d3h5eoOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4eLj5OXm5+jp6vHy8/T19vf4+fr/xAAfAQADAQEBAQEBAQEBAAAAAAAAAQIDBAUGBwgJCgv/xAC1EQACAQIEBAMEBwUEBAABAncAAQIDEQQFITEGEkFRB2FxEyIygQgUQpGhscEJIzNS8BVictEKFiQ04SXxFxgZGiYnKCkqNTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqCg4SFhoeIiYqSk5SVlpeYmZqio6Slpqeoqaqys7S1tre4ubrCw8TFxsfIycrS09TV1tfY2dri4+Tl5ufo6ery8/T19vf4+fr/2gAMAwEAAhEDEQA/APpGiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooo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alZa1Z22rtZW2pWdjbRRpbbhAbX7jEFsOpHVSB9aWvLrv/T/AA2/q5Wl9P6/4D3/AKsULT47ifwX4l1mXw/Et54fMHm2lvqsdzFMszBVKzxqV45yAD0x9NHV/if4m0Pwvaapq3ge3sri5mdfs914jtYY0jCqVfzWwCW3EBAM/Kazbb4DeR4X8S6S3iKIyeII7VZJodJit0haFy2VijZVw3TAxjrk5rd8f/Cv/hN7nRbmPWEsptKjeIifToryKVHCg/u5PlDfLw2Dj8KcttPL8tfxBW/P9Lfr92pk6l8bLiDwJo/irTPDVvc2WoRymYXetwWhheNiCi7xmUnaxG0Z46c1qS/F/T7LUIE1bTptPtJPDy628sz/ALxN0gQQeXjliSMHPJIGKxrv4GTyeCdJ8OWXihIotP8APVmutIhuo5FkkZwRG5/duobG9TnHpWna/BXSYfFHh7VLq+mvbfQNMSyt7WdM+ZIjlllZs84LcLjAIBzxim93bv8AhZ/ra34i2/rzX6XuQaX8bbG70/wjfapYQaTaeI3vFee6v1VLPyCQMsygNuIA/hwT3p5+NVnJoN/f2OlNqEya62iabBaXSuNQkwCrh8YVSDn+LHqaTTfgpZW1l4Ss9VvrfVbTw7JePJb3NgrR3n2gkgFWYhdpIP8AFnHakb4K2seg31jp2rnTp215tb02e1s1VbCTACx+XnDqAP8AZzxwMUO1/wCu6/S//Djdun9fFb9P6uMn+M9xpugeIpde8KzaZrmgpDJNpcl6jpLHK6qjLOq4x83PHH542Phv8SJvHsupw3Oipp0mnmPMltqMd9BJvBOBLH8u4Y5XnGRWTP8ABqfUvDviKDXvFEupa5rywpNqsliiLEkTBkRYVbGPl555rS+HPwuHgTUtQ1K41WPULy+jSJvsumxWMKIpJGIouN3P3qI7u/8AX9dbkvbTv/l/wTv6KKKQwooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigDm/iD4u/4QTwJqHiP7F9v+xeV/o/m+Vv3yrH97a2Mb89D0rjf+Fn/ED/AKJV/wCXFb//ABFXf2g/+SE+If8At2/9KYq0qAMD/hZ/xA/6JV/5cVv/APEUf8LP+IH/AESr/wAuK3/+IrfooGYH/Cz/AIgf9Eq/8uK3/wDiKP8AhZ/xA/6JV/5cVv8A/EVv0UAYH/Cz/iB/0Sr/AMuK3/8AiKP+Fn/ED/olX/lxW/8A8RW/RQBgf8LP+IH/AESr/wAuK3/+Io/4Wf8AED/olX/lxW//AMRW/RQBgf8ACz/iB/0Sr/y4rf8A+Io/4Wf8QP8AolX/AJcVv/8AEVv0UAYH/Cz/AIgf9Eq/8uK3/wDiKP8AhZ/xA/6JV/5cVv8A/EVv0UAYH/Cz/iB/0Sr/AMuK3/8AiKP+Fn/ED/olX/lxW/8A8RW/RQBgf8LP+IH/AESr/wAuK3/+Io/4Wf8AED/olX/lxW//AMRW/RQBgf8ACz/iB/0Sr/y4rf8A+Io/4Wf8QP8AolX/AJcVv/8AEVv0UAYH/Cz/AIgf9Eq/8uK3/wDiKP8AhZ/xA/6JV/5cVv8A/EVv0UAYH/Cz/iB/0Sr/AMuK3/8AiKP+Fn/ED/olX/lxW/8A8RW/RQBgf8LP+IH/AESr/wAuK3/+Io/4Wf8AED/olX/lxW//AMRW/RQBgf8ACz/iB/0Sr/y4rf8A+Io/4Wf8QP8AolX/AJcVv/8AEVv0UAYH/Cz/AIgf9Eq/8uK3/wDiKP8AhZ/xA/6JV/5cVv8A/EVv0UAYH/Cz/iB/0Sr/AMuK3/8AiKP+Fn/ED/olX/lxW/8A8RW/RQBgf8LP+IH/AESr/wAuK3/+Io/4Wf8AED/olX/lxW//AMRW/RQBgf8ACz/iB/0Sr/y4rf8A+Io/4Wf8QP8AolX/AJcVv/8AEVv0UAYH/Cz/AIgf9Eq/8uK3/wDiKP8AhZ/xA/6JV/5cVv8A/EVv0UAYH/Cz/iB/0Sr/AMuK3/8AiKP+Fn/ED/olX/lxW/8A8RW/RQBgf8LP+IH/AESr/wAuK3/+Io/4Wf8AED/olX/lxW//AMRW/RQBgf8ACz/iB/0Sr/y4rf8A+Io/4Wf8QP8AolX/AJcVv/8AEVv0UAYH/Cz/AIgf9Eq/8uK3/wDiKP8AhZ/xA/6JV/5cVv8A/EVv0UAYH/Cz/iB/0Sr/AMuK3/8AiKP+Fn/ED/olX/lxW/8A8RW/RQBgf8LP+IH/AESr/wAuK3/+Io/4Wf8AED/olX/lxW//AMRW/RQBgf8ACz/iB/0Sr/y4rf8A+Io/4Wf8QP8AolX/AJcVv/8AEVv1jeK/E9l4R0J9Sv1klG9YoYIhl5pG+6ij1/oDSvYLEP8Aws/4gf8ARKv/AC4rf/4ij/hZ/wAQP+iVf+XFb/8AxFYNv8RtSs9a0+y8X+E7jQodSkENrdfa0uEMh6K+0DYT6Hn8ia7BtZ0tNVGmNqVouoMu4WhnXzSMZzsznGOelMWhm/8ACz/iB/0Sr/y4rf8A+Io/4Wf8QP8AolX/AJcVv/8AEVorrmkvaW90mqWbW9zKIYJhcIUlkJI2K2cM2QRgc8Gkm13SLbU49OuNUsor6TGy1kuEWVs9MITk/lQMz/8AhZ/xA/6JV/5cVv8A/EUf8LP+IH/RKv8Ay4rf/wCIq5deJdCsdQFje61p1teEgC3mu0STJ6fKTnmrJ1XT1ku42vrYPZIHulMy5gUjILjPyjAJyccUdLhYyv8AhZ/xA/6JV/5cVv8A/EUf8LP+IH/RKv8Ay4rf/wCIrUg1fTbm4igttQtZZpoRcRRxzKzSRHpIoByV9xxT/t9n/aP2D7XB9s8vzfs3mDzNmcbtvXGeM9KAMj/hZ/xA/wCiVf8AlxW//wARR/ws/wCIH/RKv/Lit/8A4itGy1zSdSu5bXTtUsru4h/1sMFwjvHzj5gDkc+tSX2q6fpYiOp39tZiZ/LiNxMsfmN/dGSMn2FAGV/ws/4gf9Eq/wDLit//AIij/hZ/xA/6JV/5cVv/APEVqtqunpqi6a19bLfum9bUzL5rL6hM5I4POKjTXNJl1VtMj1SyfUFzutFuEMowM8pnP6UAZ3/Cz/iB/wBEq/8ALit//iKP+Fn/ABA/6JV/5cVv/wDEVYh8W+HLi9Wzg8QaXLdM/lrAl7GXLdNoUHOfapbfxJod3cw29rrOnzT3CloYo7pGaQAkZUA5IyD09DQBS/4Wf8QP+iVf+XFb/wDxFH/Cz/iB/wBEq/8ALit//iK0X1vSo7W5uZNTs1t7SQxXErXCBIXBA2uc4U5I4PPIom1vSrf7V9o1Ozi+xhWud9wi+QG+6Xyflz2z1oCxnf8ACz/iB/0Sr/y4rf8A+Io/4Wf8QP8AolX/AJcVv/8AEVprrGmP9p2ajaN9ljEtxidT5KFdwZ+flBHIJ7c06PVdPlkto4r+2d7yMy2yrMpM6AZLIM/MMEcj1oAyv+Fn/ED/AKJV/wCXFb//ABFH/Cz/AIgf9Eq/8uK3/wDiK36KAMD/AIWf8QP+iVf+XFb/APxFH/Cz/iB/0Sr/AMuK3/8AiK36KAMD/hZ/xA/6JV/5cVv/APEUf8LP+IH/AESr/wAuK3/+IrfooAwP+Fn/ABA/6JV/5cVv/wDEUf8ACz/iB/0Sr/y4rf8A+IrfooAwP+Fn/ED/AKJV/wCXFb//ABFH/Cz/AIgf9Eq/8uK3/wDiK36KAMD/AIWf8QP+iVf+XFb/APxFH/Cz/iB/0Sr/AMuK3/8AiK36KAMD/hZ/xA/6JV/5cVv/APEUf8LP+IH/AESr/wAuK3/+IrfooAwP+Fn/ABA/6JV/5cVv/wDEUf8ACz/iB/0Sr/y4rf8A+IrfooAwP+Fn/ED/AKJV/wCXFb//ABFH/Cz/AIgf9Eq/8uK3/wDiK36KAMD/AIWf8QP+iVf+XFb/APxFH/Cz/iB/0Sr/AMuK3/8AiK36KAMD/hZ/xA/6JV/5cVv/APEUf8LP+IH/AESr/wAuK3/+IrfooAwP+Fn/ABA/6JV/5cVv/wDEUf8ACz/iB/0Sr/y4rf8A+IrfooAwP+Fn/ED/AKJV/wCXFb//ABFH/Cz/AIgf9Eq/8uK3/wDiK36KAMD/AIWf8QP+iVf+XFb/APxFH/Cz/iB/0Sr/AMuK3/8AiK36KAMD/hZ/xA/6JV/5cVv/APEUf8LP+IH/AESr/wAuK3/+IrfooAwP+Fn/ABA/6JV/5cVv/wDEUf8ACz/iB/0Sr/y4rf8A+IrfooAwP+Fn/ED/AKJV/wCXFb//ABFH/Cz/AIgf9Eq/8uK3/wDiK36KAMD/AIWf8QP+iVf+XFb/APxFH/Cz/iB/0Sr/AMuK3/8AiK36KAMD/hZ/xA/6JV/5cVv/APEUf8LP+IH/AESr/wAuK3/+IrfooAwP+Fn/ABA/6JV/5cVv/wDEUf8ACz/iB/0Sr/y4rf8A+IrfooAwP+Fn/ED/AKJV/wCXFb//ABFH/Cz/AIgf9Eq/8uK3/wDiK36KAMD/AIWf8QP+iVf+XFb/APxFH/Cz/iB/0Sr/AMuK3/8AiK36KAMD/hZ/xA/6JV/5cVv/APEUf8LP+IH/AESr/wAuK3/+IrfooAwP+Fn/ABA/6JV/5cVv/wDEUf8ACz/iB/0Sr/y4rf8A+IrfooAwP+Fn/ED/AKJV/wCXFb//ABFH/Cz/AIgf9Eq/8uK3/wDiK36KALHw48cXHjvRtSu73R/7HudO1KXTprb7UJ8PGqFjuCqOrkcZ6dea6+vL/gd/yD/Gv/Y3X38o69QoEFFFFABRRRQAUUUUAebftB/8kJ8Q/wDbt/6UxVpVm/tB/wDJCfEP/bt/6UxVgfYPi/8A3vBH53dAHY0Vx32D4v8A97wR+d3R9g+L/wDe8Efnd0DOxorjvsHxf/veCPzu6PsHxf8A73gj87ugDsaK477B8X/73gj87uj7B8X/AO94I/O7oA7GiuO+wfF/+94I/O7o+wfF/wDveCPzu6AOxorjvsHxf/veCPzu6PsHxf8A73gj87ugDsaK477B8X/73gj87uj7B8X/AO94I/O7oA7GiuO+wfF/+94I/O7o+wfF/wDveCPzu6AOxorjvsHxf/veCPzu6PsHxf8A73gj87ugDsaK477B8X/73gj87uj7B8X/AO94I/O7oA7GiuO+wfF/+94I/O7o+wfF/wDveCPzu6AOxorjvsHxf/veCPzu6PsHxf8A73gj87ugDsaK477B8X/73gj87uj7B8X/AO94I/O7oA7GiuO+wfF/+94I/O7o+wfF/wDveCPzu6AOxorjvsHxf/veCPzu6PsHxf8A73gj87ugDsaK477B8X/73gj87uj7B8X/AO94I/O7oA7GiuO+wfF/+94I/O7o+wfF/wDveCPzu6AOxorjvsHxf/veCPzu6pyyfFmLXLXSm/4Qwz3VtNcow+17QsTRKwJ65zMuOOx6cZAO9orjvsHxf/veCPzu6PsHxf8A73gj87ugDsaK477B8X/73gj87uj7B8X/AO94I/O7oA7GiuO+wfF/+94I/O7o+wfF/wDveCPzu6AOxorjvsHxf/veCPzu6PsHxf8A73gj87ugDsaK477B8X/73gj87uj7B8X/AO94I/O7oA7GiuO+wfF/+94I/O7o+wfF/wDveCPzu6AOxorjvsHxf/veCPzu6PsHxf8A73gj87ugDsa4v4n6NqWqaBYXWi232y70rUYb5bUEAzBCcqM9+c/hT/sHxf8A73gj87uj7B8X/wC94I/O7o9BnO6veat8SNR0KwtvDGr6TZWWoR317c6rB5AATPyIMktnJ5/T0r+H9LbTfGV/a634LvL/AFS41l7uDWvJDQxwkgqfO6rtA+536V1X2D4v/wB7wR+d3R9g+L/97wR+d3R/X5f5Il6qz/rf/M810fwl4ug8M+EpLq5vHsotdjkbRjpm17QCZyZWk+/t6nkAfOPal1jw5eFfEujXXgy+1HXdT1NprHWltw0UcbMpQmfOUwAfl/A16T9g+L/97wR+d3R9g+L/APe8Efnd09/69P8AIpu7v/XX/M8q8d+F9euPGuqpFpN/qBnitVjlTRlniuGWJQ2bhiGhGQclDn1xW/q/hjxZe6941uNNurjSYZdOt1e3TTxOuoEW5BijdueDlcrk/NXbfYPi/wD3vBH53dH2D4v/AN7wR+d3U9LAnZ39P0/yPNNZ0bV7e/8ADNwdP8VwiLwzDbGTQomWWOcE/u5Dj5R6g89K1NP0Lxneau7anFcpqs3hGW1+2MuFE5lO1DIPl37cZ5z3rt/sHxf/AL3gj87uj7B8X/73gj87uqk7387/AI3/AMxLRr5fhb/I80+GvhvUrPxpor31nrFlLYpIr7vDkVvCf3ZBVrlHy49GYHJ9M123xM8NXXizXtD06OCZrZbe9dp1jJjil8oCIs2MA7uRyK1fsHxf/veCPzu6PsHxf/veCPzu6UveBaO6OJ8P6X4ju/FPh/xTqlhe29/eXE8FyrwOPs8a2wjQuCPlBdWbJwDurmfDfhHXLPxNpltrFrrEN1bamsr3MHh6KSNj5mdzXgcOVPcnIGehxXrn2D4v/wB7wR+d3R9g+L/97wR+d3TTtJMTV48v9df8zO03wlY2/wAYNUvF8P28VothDJbziyVYxPvYsyNjG/1I5rzLwlpR1jQfD1npXhW6XUk1gXUmurbgReSkjbgZgc5GMbD6cdq9e/s/4vn+LwR+d3VDRfCnxP8ADulpp2jw+CLe0jZmWPzL18FiSeWyepPelH3X6f53HLVPz/ysefa/4Q8UanpfjH/Q7xLCLWJbq0tYoX8y+leRF37cZZFQEgjgk57VpeL/AAx4gvPFfii/tbS6uNMR9Olm04WzY1RUUblRxzlechc9eegrvvsHxf8A73gj87uj7B8X/wC94I/O7oWiVun/AAP8ht3vfrf8Xc4TxH4b8Q6/4o8Ymztry10e7sYLhm8h0ku3jtz5cCAjn5z8wHI24711nh+z+zXHgaO88N3Ml3BpBQ6gxdBYkRKDG64xlunzYI7d6v8A2D4v/wB7wR+d3R9g+L/97wR+d3TWn9eTX6ieu/8AW3+R2NFcd9g+L/8Ae8Efnd0fYPi//e8Efnd0gOxorjvsHxf/AL3gj87uj7B8X/73gj87ugDsaK477B8X/wC94I/O7o+wfF/+94I/O7oA7GiuO+wfF/8AveCPzu6PsHxf/veCPzu6AOxorjvsHxf/AL3gj87uj7B8X/73gj87ugDsaK477B8X/wC94I/O7o+wfF/+94I/O7oA7GiuO+wfF/8AveCPzu6PsHxf/veCPzu6AOxorjvsHxf/AL3gj87uj7B8X/73gj87ugDsaK477B8X/wC94I/O7o+wfF/+94I/O7oA7GiuO+wfF/8AveCPzu6PsHxf/veCPzu6AOxorjvsHxf/AL3gj87uj7B8X/73gj87ugDsaK477B8X/wC94I/O7o+wfF/+94I/O7oA7GiuO+wfF/8AveCPzu6PsHxf/veCPzu6AOxorjvsHxf/AL3gj87uj7B8X/73gj87ugDsaK477B8X/wC94I/O7o+wfF/+94I/O7oA7GiuO+wfF/8AveCPzu6PsHxf/veCPzu6AOxorjvsHxf/AL3gj87uj7B8X/73gj87ugDsaK477B8X/wC94I/O7o+wfF/+94I/O7oA7GiuO+wfF/8AveCPzu6PsHxf/veCPzu6AOxorjvsHxf/AL3gj87uj7B8X/73gj87ugDsaK477B8X/wC94I/O7o+wfF/+94I/O7oA7GiuO+wfF/8AveCPzu6PsHxf/veCPzu6AOxorjvsHxf/AL3gj87uj7B8X/73gj87ugDsaK477B8X/wC94I/O7o+wfF/+94I/O7oA7GiuO+wfF/8AveCPzu6PsHxf/veCPzu6ANj4Hf8AIP8AGv8A2N19/KOvUK8p+AS3iaD4tXVPI+2jxVeC4+z58vzNsW7Zu525zjPOK9WoEFFFFABRRRQAUUUUAebftB/8kJ8Q/wDbt/6UxV1tcl+0H/yQnxD/ANu3/pTFXW0AFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABXK6H8QtH17xdqvhu1S6hv9LLCTz0UJLtOGKEMc4JGcgdRXVV46vhXVV/4SHxDp9hPHrOl+JLi+sFeIobyBkjEka5HzK6ggEcbgKm+vy/VL9R293Te/+Z1E3xZ0RNC0nUbfT9XvZdXMv2TT7O1Ety4jJDttDYwMev8AXHU6FrVv4g0W31OzSeKKYH93cRmOSNgSrKynoQQQfpXi8eleR8MvC9vrvhHxS91brcPBe6LEy3thIZWOChwQGXBycj+deofDk+Ij4JtP+Ev8z+0Nz488ATeVuOzzNvG/bjP685rSy1Je6sdTRRRUjCiiigAooooAKKKKACiiigAooooAKKKKACuevf8Akpei/wDYI1D/ANHWddDXPXv/ACUvRf8AsEah/wCjrOgDoaKKKBhRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFAGJqHiaO11V9M0/Tb7V72KNZZ4bLyh5CtnaWaV0UE4OFBLYGcY5rTsroXtjFciGaDzF3GKeMo6HuGB6Efl6ZFctHcv4W8W63NqFlfzWeqyR3MF1Z2cl1hliWNo2WJWZSNgYEjBBPORisTxdLfW+qW93pFndW8ni63GkyK6gPbyAkxzMueMRGUkdRhQQDkBa2Vuv59v0/HYel/6/r+rHplFeVX2j6voXiS/1rw7ptw7W/k6NbxRxHD25t12yY7qkxXLDoA/pUB8FXP8AYkng5rW6Ng2vKftXltzD9mEhl3Y6+aMZz97jrxT/AK/Ffo7/AIC1tr/Wj/VWPXKK8u0m08QXvijRPE+r6dcreJM+mTRNGR5cawPul/2VeYEg8Agp7VU8NW2oN460W/TRP7Pd3uF1Hy9GuIZIw0bEJNdyMRc/Mo+YDGQDkZALtrb+v6/IWy/r+v8AM9corlfEmg2uueLtCXVNKh1GxihujILi3EsSMRHtzuBAPXH41xVtptnYWvhay17RLmayjfU99ilm8gCeeChaBRl0+6QoVv4WxgZE3Gev0V5PZ6XJDb6MfEuiXt34aD3xi05rF7n7NulBtvMt1DNgRbwAVOzcAQpxUUrxxaHpHhjVtNvpbOXUGvns20+a7Ntp6yu0EboiuRkqihD0AIOMYp9v6/p9fQHpf+v6XT5nrtFePWc9unhvUdH07QZPIGtvLJaXGj3JjtrWQsY5DaKEaZDsxsHAOCR8tWdF0vUT4dFnHpk0FyviLzdLdNOe0htE2K5l8pixSIjzAULAsXK5VjwR1/D8bf5/gD0/H9f8vxPWKzNW1gabdabapD51xqF0II0L7cAKXdycHoqk47nA4zmuA8LaRrtnquly6/bvdWq6tqBjW3tHh+zyu8hWeQMzFkYbgpyoXeM78gjqNfVk+IPhOZj+5Ju4cY48xogy/wDjqPR2YPdr1B/HlrFfXEc2lakllbXwsJdRKxGFJSQACBIZMEsozsxk84611VcFovhGTUdS1mXWLrUo7L+3Xuo9OKpHBPt2FJCdnmMNwBxv2kqODzVCw0+ceO/+EQEDrpemXba4kuMoUkz5cPsRM0jD2QUlflXdq/4L/g/8OD3flf8AN2/RfM6PTvFOqa5qwGi+Hy2jK7o+qXd4sQkKSFG8qNQ7OOCQW2A469CdXSNY/tO51O2khEE+nXZt5EEm7KlVdH6D7yuDjscjJxmvNtG8OR2emaFptloV3b+KNPvYhcak1nIoWFJP3h+1EbXjaPIEaufvgbRg47XQS0vj7xXKgbyENpAT2MgiLNj/AIC6VS2/ry1/QHv/AF5/8OdRRXn81jaDxzqcniPQ73UbuS5t30i7hs5JRDEFUbUmA2wFZA7NllyCDzmtX4gIbLRYPEcMbSXGgTC9Cp954sFZkH1jZj9QKm9km/6/4bqOzvZHV0V51oXh7XrSex8T2FvZz39/BPJfWl9O9uUM7pIoDKj8oqqhBHbrWC2i6ufDHhddT09fsMH2z7ZaXWkzajGkzSExs1uhV2GN+GwQNwOBkEN3Vr79RJ3emx7HRXlk/gyyvfDPh37RpsWsSR6tEnmzaK8Dw2nmuTF5cu50iUHADHGMdqZr2hQC48Q2Vx4eurjUnEaeG7m1sWaO0QRKsSxSoNtvslDMclOMHkYo7/12/HX8GHW39df8vyPVqK8s1Kw8Raf4o1HxJp9jcXF8DDpWI4ziaN4FPm9BlUnZSWHQB/TFdJ8PtFl8N2ur6O0Uot7a/wA280ikeerRRsWz3O8vk+uaaV7/ANf1o0xX0X9f1qdfRXn+gWNpD4iuP7Z0O9m8Rf2lO66mLOTb5BLGMi5xt8sRlV8vd1GNuaw/DWjataaBZR6zYXE07eHLiCy8u0dBZnjdFIpyfMfK4bIBCYCg/ehytG/l+jf6f09C0ru3n+tv+CeuUV5dY2mrW2r+GPEXiGG4tbaztJw1sFZlsIEtz80m3P7xzyfTCqOQScV7vSmubXxPe6JfQXz699uuLyTQrkNb2YUouZTFjbtVGIBxlqu3v8v9b2/4PyZmnePN/W1/+Ae10V5Q2kyzXDo2jXn/AAmA1rzo9XNo+0W/n7gRdY2eX9n+Ty93XK7M1a0PStTtvEdvcatZzTaf/b+oPbRJbMrWzu0hSeQnO9CNwVgFC7wTuyCEtf69P8/vRT0T/rv/AJf119NooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooA4/4Kf8e/jj/scdQ/lHXpleZ/BT/j38cf9jjqH8o69MoEFFFFABRRRQAUUUUAebftB/8AJCfEP/bt/wClMVXP+E20r/n113/wn77/AOM1T/aD/wCSE+If+3b/ANKYq62gDnv+E20r/n113/wn77/4zR/wm2lf8+uu/wDhP33/AMZroaKAOe/4TbSv+fXXf/Cfvv8A4zR/wm2lf8+uu/8AhP33/wAZroaKAOe/4TbSv+fXXf8Awn77/wCM0f8ACbaV/wA+uu/+E/ff/Ga6GigDnv8AhNtK/wCfXXf/AAn77/4zR/wm2lf8+uu/+E/ff/Ga6GigDnv+E20r/n113/wn77/4zR/wm2lf8+uu/wDhP33/AMZroaKAOe/4TbSv+fXXf/Cfvv8A4zR/wm2lf8+uu/8AhP33/wAZroaKAOe/4TbSv+fXXf8Awn77/wCM0f8ACbaV/wA+uu/+E/ff/Ga1b7V9N0yW3j1LULWzkun8uBLidYzK3HyqCfmPI4HrUhv7MX5sTdQC7EXnG38weYI8437eu3PGelAGN/wm2lf8+uu/+E/ff/GaP+E20r/n113/AMJ++/8AjNaOm69pGsvKmj6rY37QnEq2tykpjP8AtbScfjTrjWtLs9Sg0+71KzgvbkZgtpZ1WSX/AHVJyenagDM/4TbSv+fXXf8Awn77/wCM0f8ACbaV/wA+uu/+E/ff/Ga1LzWdM0+8trS/1G0tbm7bbbwzTqjzHIGEUnLHJHT1qP8A4SHRvMCf2vYbzcmzC/aUyZx1ixn7/wDs9fagDP8A+E20r/n113/wn77/AOM0f8JtpX/Prrv/AIT99/8AGa0rnXdIs5bmO71SygktIxLcLLcIphQ9GcE/KD6mnrq+mvp8N+moWrWc5VYrkTqY5Cx2qFbODknAx1NAGV/wm2lf8+uu/wDhP33/AMZo/wCE20r/AJ9dd/8ACfvv/jNdDRQBz3/CbaV/z667/wCE/ff/ABmj/hNtK/59dd/8J++/+M10NFAHPf8ACbaV/wA+uu/+E/ff/GaP+E20r/n113/wn77/AOM10NFAHPf8JtpX/Prrv/hP33/xmj/hNtK/59dd/wDCfvv/AIzXQ0UAc9/wm2lf8+uu/wDhP33/AMZo/wCE20r/AJ9dd/8ACfvv/jNdDRQBz3/CbaV/z667/wCE/ff/ABmj/hNtK/59dd/8J++/+M10NFAHPf8ACbaV/wA+uu/+E/ff/GawrvxfprfELSJxbazsTS75CDod6GJaW0IwvlZI+U5IGBxnGRnvq569/wCSl6L/ANgjUP8A0dZ0AH/CbaV/z667/wCE/ff/ABmj/hNtK/59dd/8J++/+M10NFAznv8AhNtK/wCfXXf/AAn77/4zR/wm2lf8+uu/+E/ff/Ga6GigDnv+E20r/n113/wn77/4zR/wm2lf8+uu/wDhP33/AMZroaKAOe/4TbSv+fXXf/Cfvv8A4zR/wm2lf8+uu/8AhP33/wAZroaKAOe/4TbSv+fXXf8Awn77/wCM0f8ACbaV/wA+uu/+E/ff/Ga6GigDnv8AhNtK/wCfXXf/AAn77/4zR/wm2lf8+uu/+E/ff/Ga6GigDnv+E20r/n113/wn77/4zR/wm2lf8+uu/wDhP33/AMZroaKAOe/4TbSv+fXXf/Cfvv8A4zR/wm2lf8+uu/8AhP33/wAZroaKAOe/4TbSv+fXXf8Awn77/wCM0f8ACbaV/wA+uu/+E/ff/Ga6GigDnv8AhNtK/wCfXXf/AAn77/4zR/wm2lf8+uu/+E/ff/Ga6GigDnv+E20r/n113/wn77/4zR/wm2lf8+uu/wDhP33/AMZroaKAOe/4TbSv+fXXf/Cfvv8A4zR/wm2lf8+uu/8AhP33/wAZroaKAOe/4TbSv+fXXf8Awn77/wCM0f8ACbaV/wA+uu/+E/ff/Ga6GigDnv8AhNtK/wCfXXf/AAn77/4zVW48SeH7q/tL240/XXuLMuYGOg6h8hYbWOPKwTjjJ6ZOOtdXVPU9X03RbUXOs6ha6fAzBBLdTrEpYgnGWIGeDx7UAZX/AAm2lf8APrrv/hP33/xmj/hNtK/59dd/8J++/wDjNa2napp+sWgutJvra+tyxUTW0yyISOo3KSM1boA57/hNtK/59dd/8J++/wDjNH/CbaV/z667/wCE/ff/ABmuhooA57/hNtK/59dd/wDCfvv/AIzVaXxNoM+oW99LYa61xbK6xP8A2DfjaHxu48rBztHX0rqqKAOe/wCE20r/AJ9dd/8ACfvv/jNVh4m0FdUbURYa79qeEQNJ/YN/ygYsBjysdWPPWuqooA5WLxNoMOpXF/HYa6Lm4jSOWT+wb/5lTdtGPKwMbm6etWf+E20r/n113/wn77/4zXQ0UAc9/wAJtpX/AD667/4T99/8ZqteeJtB1AQi7sNdf7PMs8RGg36lHXoQRFn1HuCQeDXVVnza5plu96tzewwCwVGupJm2RwhhkbnOFBxzjORkZ6igDO/4TbSv+fXXf/Cfvv8A4zVWDxJ4fttRur6HT9dW5vAgmkOg6gdwQEKOYsADJ4GOpNbumazpet27z6NqVnqEKNsaS0nWVVbGcEqTg4I4qa9vrTTbOS71G6htLaIZkmnkCIg6cseBQ9Nw3Mb/AITbSv8An113/wAJ++/+M1VsvEugacJxZ2Gup9ona4lJ0LUGLu3U5MR9hjoAABgCrdh440DU9Fm1ezup306FlDXTWUyRtltuVZkAYA9SuQOpIFdBRsG5z3/CbaV/z667/wCE/ff/ABmqupeJNA1fT5bHUdP12a2mAEkf9g6gu4Ag4JEQOOOneurooA57/hNtK/59Nd/8J++/+M0f8JtpX/Prrv8A4T99/wDGa6GigDnv+E20r/n113/wn77/AOM0f8JtpX/Prrv/AIT99/8AGa6GigDnv+E20r/n113/AMJ++/8AjNH/AAm2lf8APrrv/hP33/xmuhooA57/AITbSv8An113/wAJ++/+M0f8JtpX/Prrv/hP33/xmuhooA5i78WaJf2U9pdWOuyQXEbRSJ/YF+NysMEZEORwahuvEXh690eTS7rT9dezki8l4v7B1AZTGMZEWenvXW0UAc6PGulAYFprv/hP33/xml/4TbSv+fXXf/Cfvv8A4zXQ0UAc9/wm2lf8+uu/+E/ff/GaP+E20r/n113/AMJ++/8AjNdDRQBz3/CbaV/z667/AOE/ff8Axmj/AITbSv8An113/wAJ++/+M10NFAHPf8JtpX/Prrv/AIT99/8AGaP+E20r/n113/wn77/4zXQ0UAc9/wAJtpX/AD667/4T99/8Zo/4TbSv+fXXf/Cfvv8A4zXQ0UAc9/wm2lf8+uu/+E/ff/GaP+E20r/n113/AMJ++/8AjNdDRQBz3/CbaV/z667/AOE/ff8Axmj/AITbSv8An113/wAJ++/+M10NFAHPf8JtpX/Prrv/AIT99/8AGaP+E20r/n113/wn77/4zXQ0UAc9/wAJtpX/AD667/4T99/8Zo/4TbSv+fXXf/Cfvv8A4zXQ0UAc9/wm2lf8+uu/+E/ff/GaP+E20r/n113/AMJ++/8AjNdDRQBz3/CbaV/z667/AOE/ff8Axmj/AITbSv8An113/wAJ++/+M10NFAHPf8JtpX/Prrv/AIT99/8AGaP+E20r/n113/wn77/4zXQ0UAc9/wAJtpX/AD667/4T99/8Zo/4TbSv+fXXf/Cfvv8A4zXQ0UAc9/wm2lf8+uu/+E/ff/GaP+E20r/n113/AMJ++/8AjNdDRQBxfwMnW503xpPGJFSXxdfOokjaNgCIzyrAFT7EAjvXqFeZ/BT/AI9/HH/Y46h/KOvTKBBRRRQAUUUUAFFFFAHm37Qf/JCfEP8A27f+lMVdbXJftB/8kJ8Q/wDbt/6UxV1tABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFAHl/xX0CDxR4q8H6PdO0aXT3qrIhw0biDKsPcMAfwrl7PVRrnirWLTxjdNp91Z+FZdN1a4UH924nIMoA6qysrjsQ1e4TWNpcXVvc3FrDLcWxYwSvGGaIsMEqTyuRwcdqiOjaYb+e+OnWhu7iLyZrgwL5kqf3WbGSvA4PFK36/imv1G3tby/O55H8Lbiw0jxzH4fgi8O6pKNOcw63oBCs0Ssvy3KL8u8kDnOfrkmovi1o9xq/xKhfTuNQ03QW1CzPpLDcK4/MAj8a9e0zQdI0QSDRtKstPEpzILS2SLeffaBmp20+ye/F89pA12sRhFwYlMgQnJTdjO3POOlOTbaa3V/v1t+Yo2V10dv0/wAj5+1HUT4417RfHDR7LY+INN02wVgQVVcvMefWRsZ/2av3n2Fvh/4/jvPM+1yeLZ100QHEpu8p5Ww9jnr7Zr2qPw/o0Vnb2kWkWCW1rMJ4IFtkCRSAkh1XGFbJJyOeaB4f0YTCUaRYiQXJuw4tkyJz1lzj75/vdfenpay/r4f8m/mO736/5c1vzR5R4J0j+3NC8RWniC/+xeLrTVo7vVLm4VXXMLB4TtBXMO1emR35HFUrHU59CkttSubE6pZW8V7q9hHPIbVWUSbpboJtc7m83ESMeFyS2W49mn0LSbqe4nutLsppbqIQ3EklujNNH/cYkfMvseKW/wBE0rVUgXVNMs71bdt0IuLdJBEfVdwOD9KLv+vS1/wX9WaVlt/X9av+rotQTC4t45lDKsiBwGGCMjPNSUUUPcS2CiiikMKKKKACiiigAooooAKKKKACuevf+Sl6L/2CNQ/9HWddDXPXv/JS9F/7BGof+jrOgDoaKKKBhRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABXK6/wD6d488M2Ccm1afUZcfwqsZiXPplpeP9011Vcy3gLQbvXNU1PWdL07VJr+ZJFN3YxyNCqxIm0M2cjKE9uv40dQ6M5qz1O7sw+n2V39g/tXxVd2r3oVWaEYd8KHBXcxQKNwP3uhNWZvEGs2ui6/p8eqNdX1rqcOnWGomGLzJGl8s4ZQBGWTzGBwoGF5XIOd2w8C6HYXGqpFpmn/2bqSwh9OWyRYQY93JX7rEkg9OMCte20TSrNLRbTTLOBbLd9lEVuiiDd97ZgfLnvjrQlZJeSX3W/y/EHq7+v5v/P8AA4KfXtdstJv7f+17q7mh8Qrp8cqRW/2yWNo0ISIFFiL7mySygBA57A10HgDUtS1HTNSGsS3Uk1rqUtun2xYRMqKFIV/JGwnk8iugGl6eLgTixthMJjOJBCu4SFdpfOM7ivy5644qaC1t7bzfs0EcPnSGSTy0C73PVjjqTgc0LTft/l/k/vE9du/+f+a+48+n1PXUYakviC8EZ8SDT/sXkW/k+T5+zGfK35x330ybxDrMcd7qseviU2evjTV0tYItjo1wIwrnG/ftfIIZRgLkHknvzpti0ew2VuU877RtMS483O7zOn3s8565rK0vwhplhfy39xaWl3fm6mnhvHtV82ESMW2K5yQBuI4Izk8c0oaWv0/+1/yf3jlrdr+vi/zX3HLP4j1l9OfxDFq5Ux63/Z39iiGIxsguPI2E7fN8wr+8zux0+XHV/iXWtZNxruoaTrVzaWekzWtrHDHDA0c0rOvm7i8bMcCRRwwwQa7X+wdI/tg6v/ZVj/aZGPtv2ZPOxjb9/G7px16Vz+n/AAx8L2uhx2d3oekXt0sZV72XTYt8jHPzHIJzz60apf15f18/Ie7MXxt4u1LTbjVbrR7vUWj0dolmSGG1W1R22tsmMzea5YMOYsYDADLA1J4s8Wa3oupahDphm1CMXFgR5CQg2fmSKrQsX2hvMHKkFiC3zbRtNdLYeCNCg0+wi1DStO1C7s7OO0+2T2SGR1VNvUgkAjPGe9azaVp7rKr2NswmlWeUGFTvkXG1zxyw2rgnkbR6VVkmvJ/1/XyJ1epkeEdWu9Yh1O4v5dsqX7wiyKgNZBQoEbED5mP3yQWHz/KSMGuN1R5JPhz45ndR9ofWJgQzddjxomT2G1Vr06K1t4JppoYI45bhg0zogDSEAAFj3IAA57Cs238O20N5qzTCK4s9UlSeS0lhDKJAoVjzwQQiHGOCCcnPC/yt+X+Q3qred/z/AMzl9TsPEunPq/i9/sdnexw24NlYsbhZreF2eQM7ohLsruBhRjaOTmsvWtVu/FSWd7a6jGuhXHiG2t7SXy0dCiI2ZPcmfaFzkZReCMg+nXkMlxYzwwyLFJJGyJIybgpIwCVyM49M1naV4a07TPCVr4ea3hubGC3WBo5YgUlAHJZTkHJySPehflZr77v8vxYP87/lZf15HMzTXUkXjHw/q2pPqtla6ar/AGueONZIzJHJuicxqqnAVWGFBw/PatR9evNO+E418Qie8h0dbvy2JIZxEG5xzjNXb/wtZS+FLvQdHhttItbpTG621sqqFY4kwq7RkrkZ7E55xitpI1jjWONQqKAqqBwB6UdH8vwv/mHVPtf9P8jh4JdYTxBYaQPFV1fxarpz3TXUcFsJLVkaPDx4jK+W+8jDh+gw2c1ofD2bUr7wxFqWr6xdajNcs42zRwoseyR1+Xy41PIAzknpxitrTNB0jRPN/sbSrLT/ADiDL9kt0i8wjpnaBnqevrVu2tbeyt1gs4I7eFc7Y4kCqMnJwBx1JNMWp5rL4k8QW/iCe5kutSGnRa6LFmkjs/sQiZ1TbgD7QXywAPTOM8Zrc0PUdS1S4uNVutcNskWpXFmukmKLyyI2ZVXJHmeYwUPndjB+7it4eGNAXV/7VXQ9NGo79/2wWkfnbumd+N2ffNTDQtJXWTq40uyGpEYN6LdPOIxjG/G7px16VKVopdf+G/yf3jerb/rr/mvuOF8Ia54t1ttK1OSDUns7/ebsSixW1t1IbBh2OZsqwVcPuzlsgHpa8D+J9U1zxBPYahfpJDp8LiGZIgv9rL5pT7QPlAAXZtITgsxP3duepHhbw+uqPqS6Fpov3LF7oWcfmsWBDEvjJyCQeec1ci0uwhNqYbG2jNnGYrYpCo8hCACqcfKMADA9BVLf+v6/ryQP+v6/r8zl/EE+qz+Jr21sdcvNMgtNJF2qWsUDb5N7j5jLG5xhRwMVl2Os6xrU2mWsniVtLM3h6DUZHiggMskpyGYb1I29CwC/3cFec+gNZ2zzPM9vE0skflO5QFmTk7Se45PHTk1iXPgvSL7VhcX9hZXdklnHbRWM9ojxxbGYhlB4HD4AA4qEna39fa/zX3De9/6+z/k/vOY0fxHrPixII5dZ/wCEfaPQ4NRaS2iiYztLvBciVWAjXYDgYPz8tVu117V/Etn4Ut4L2bSbzULRr6/ezijJSMJgYEqOFDOy44JwDzXWajoGj6wIBq+k2N+LfPki6tkl8rOM7dwOOg6egrLk8B6Fe69qOqazpenapJeNGU+12SSGFVQLtDNng4z261T1b/rv/XyF/X5HO2niXVL3wr4dh+36lNquoRSyuNNt7UTzLG2C26bEKqMjI25ORjGDSaZ4w1e58OeG9TSV724ujdQzWESReZdiPcBKG+4rLsBPzqh3EDJ2g9DYeAPD9rb3trc6Tpt1ZT3pu4LSSxj8u2JjRCFUgj+EnIA+9W3BpOnWzo9tYWsLRq6I0cKqVV23OBgcBmAJHcjJpPVev9f194Lf+v6/qxxXgLxVq/iG40pdXke1LaMty0MyR7r92ZQZlKZCovTbkNl+VA259BqrDplhb/Zvs9lbxfZIzFb7IlXyUOMqmB8oOBwPQVaqm0/68wCiiikAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQBx/wU/wCPfxx/2OOofyjr0yvM/gp/x7+OP+xx1D+UdemUCCiiigAooooAKKKKAPNv2g/+SE+If+3b/wBKYquf8K/8G/8AQpaF/wCC2H/4mqf7Qf8AyQnxD/27f+lMVdbQBz3/AAr/AMG/9CloX/gth/8AiaP+Ff8Ag3/oUtC/8FsP/wATXQ0UAc9/wr/wb/0KWhf+C2H/AOJo/wCFf+Df+hS0L/wWw/8AxNdDRQBz3/Cv/Bv/AEKWhf8Agth/+Jo/4V/4N/6FLQv/AAWw/wDxNdDRQBz3/Cv/AAb/ANCloX/gth/+Jo/4V/4N/wChS0L/AMFsP/xNdDRQBz3/AAr/AMG/9CloX/gth/8AiaP+Ff8Ag3/oUtC/8FsP/wATVzxRNJb+EdYmgkeKWOxmZHRiGVghIII6GvD/AIceJdWtfEmiS3eqeKTbXunSvcR+ICzw3sypuAtGIIx3ySCR65wUmru/T/g/5Dadk/66f5nsn/Cv/Bv/AEKWhf8Agth/+Jo/4V/4N/6FLQv/AAWw/wDxNcR8PtJ13xdpGn+N7/xnqsd3dTtMbC3kX7EsSyFTCYsdcKRuzkZ7kZPD3fxJ1hPgzd2a2/in+0BduF15UfyFH2j7v2jdkcfLj14qre9yvcS11W3/AA/+R7f/AMK/8G/9CloX/gth/wDiaP8AhX/g3/oUtC/8FsP/AMTXmOveJda0P40XOpHU71tD097GG9svOYwrHcRspk2E4GHCnPvUln4k1nV/jdpV/Dqd6mh3l7e2FvZiUiGZLeDmTaDhsyM2D/sj0pLX8fwF0+V/wv8Aoelf8K/8G/8AQpaF/wCC2H/4mj/hX/g3/oUtC/8ABbD/APE15L8PfEmt+K9V0rw3qGr6haQQzXN/NcvcuJtRCTFVgR85CL/EM5IGMYGa7z4vvqJ8M6Xa6Pqd1pdxfaxbWv2m1laNlDkr1Ug49val9lPvb8dPzKt7zXa/4G9/wr/wb/0KWhf+C2H/AOJo/wCFf+Df+hS0L/wWw/8AxNcJpXi7V9W8V+DtPvJ5bXUrZr+y1a1EjBJJool2uyjG5TkOP97iqXga71nSvHVrZ+OdZ8SWmtXUkqmC8dZdNvuCVEBUYjYcHHtjviqSuyW7K56R/wAK/wDBv/QpaF/4LYf/AImj/hX/AIN/6FLQv/BbD/8AE1xXxpn1/wC1+HLPwxqd7YXU7XTgWszJ5zRxb1RgD8wJXGD61y3xC+IGp+JfDNpeeFtSvNNjsNMj1K/ktJTH+9klWJIWKnPB8w474FKPvO3nb+vuKtql3/zsevf8K/8ABv8A0KWhf+C2H/4mj/hX/g3/AKFLQv8AwWw//E1xNw2p614l+I2mpr17p4tbSxls5lunRLR/JLlhg/KpI+bHUZzSfCfxTqnxB1q61zVbx7ZdOtIbVdLilZUd3Xc1w6d938Gc4GfrTWrt5X+//g6Et2V/66P9Tt/+Ff8Ag3/oUtC/8FsP/wATR/wr/wAG/wDQpaF/4LYf/ia5bx4/iDS/EJ1lJ7uLSrcWhhlgvNkUW2U+eskO4GVpFKqgCvzgDaea0fBHiSLV9Wu21LUpf7WvNzJp22RYLWKNtpjjYgJI6lv3jKT83HQCktUN6Gx/wr/wb/0KWhf+C2H/AOJo/wCFf+Df+hS0L/wWw/8AxNdDRQBz3/Cv/Bv/AEKWhf8Agth/+Jo/4V/4N/6FLQv/AAWw/wDxNdDRQBz3/Cv/AAb/ANCloX/gth/+Jo/4V/4N/wChS0L/AMFsP/xNdDRQBz3/AAr/AMG/9CloX/gth/8AiaP+Ff8Ag3/oUtC/8FsP/wATXQ0UAc9/wr/wb/0KWhf+C2H/AOJrCu/A/hNfiFpFsvhjRhBJpd9I8Q0+LazLLaBWI24JAZgD23H1Nd9XPXv/ACUvRf8AsEah/wCjrOgA/wCFf+Df+hS0L/wWw/8AxNH/AAr/AMG/9CloX/gth/8Aia6GigZz3/Cv/Bv/AEKWhf8Agth/+Jo/4V/4N/6FLQv/AAWw/wDxNdDRQBz3/Cv/AAb/ANCloX/gth/+Jo/4V/4N/wChS0L/AMFsP/xNdDRQBz3/AAr/AMG/9CloX/gth/8AiaP+Ff8Ag3/oUtC/8FsP/wATXQ0UAc9/wr/wb/0KWhf+C2H/AOJo/wCFf+Df+hS0L/wWw/8AxNdDRQBz3/Cv/Bv/AEKWhf8Agth/+Jo/4V/4N/6FLQv/AAWw/wDxNdDRQBz3/Cv/AAb/ANCloX/gth/+Jo/4V/4N/wChS0L/AMFsP/xNdDRQBz3/AAr/AMG/9CloX/gth/8AiaP+Ff8Ag3/oUtC/8FsP/wATXQ0UAc9/wr/wb/0KWhf+C2H/AOJo/wCFf+Df+hS0L/wWw/8AxNdDRQBz3/Cv/Bv/AEKWhf8Agth/+Jo/4V/4N/6FLQv/AAWw/wDxNdDRQBz3/Cv/AAb/ANCloX/gth/+Jo/4V/4N/wChS0L/AMFsP/xNdDRQBz3/AAr/AMG/9CloX/gth/8AiaP+Ff8Ag3/oUtC/8FsP/wATXQ1y/iOa5vfE+jeH4rqaztbyOe5upLdzHJKsWwCJXHKZMgJKkNhcAjNHkBP/AMK/8G/9CloX/gth/wDiaP8AhX/g3/oUtC/8FsP/AMTUF7I/g21t49MjvtVbULxbeG3vNQZ/KYoxz5sm59uVyQScclR/Cc+9+Iy6VZzx6vZ2tlqcGoJYNHLfhbUM0fmq5uGQYTZzymc8YPBouv6+X+aCz/r+vI1/+Ff+Df8AoUtC/wDBbD/8TR/wr/wb/wBCloX/AILYf/iazbT4h2934R1fVoYrO5uNKcxPFZ34mgmchSgSYLyG3qPugg5GOOXN43u7Gw16XWtLtbabRWhEiwXxkjdZADne0abcBueO1D03A0P+Ff8Ag3/oUtC/8FsP/wATR/wr/wAG/wDQpaF/4LYf/iarp4+0m81K5ttDmg1pbbTpL1zplwk7kqwAiCrn5mzxzWbonxIOrXt5biz0+7NtprX+3RdT+3OcEDyivlphzngZNL+vz/yYf1+X+aNr/hX/AIN/6FLQv/BbD/8AE0f8K/8ABv8A0KWhf+C2H/4ms3wp4+/4STX30wx6S22y+1+bpuq/a9nzBdjjy02tznHNa+v63e6beabY6VY297eahI6qlxdGBUVELMxYRufQdOrCm9FdiuiL/hX/AIN/6FLQv/BbD/8AE0f8K/8ABv8A0KWhf+C2H/4ms+y8b3eq2GjDS9Jhk1PVLeW5+zzXhjhhjjYKxMojJPzMoACc55wBTz42nl8P2d1aaUh1K41E6Y1lPdbFjnVmV/3iq25RsYghckdhyAf1+Nvz0H0v/W1/yLv/AAr/AMG/9CloX/gth/8AiaP+Ff8Ag3/oUtC/8FsP/wATWNJ8RZY9B0y+msLCze9lnieS/wBSMFpCYnKFTP5ZyzYyq7BkBvTnofCmvf8ACTeF7PWPISD7SGPlxzeao2uV4fA3A4znA60dLgV/+Ff+Df8AoUtC/wDBbD/8TR/wr/wb/wBCloX/AILYf/iazNI8a6pf3eh/bNFs7ez1oyCCWLUWlkTajP8AMhhUchccMetLp3ju7uE0m81LRVstM1ZzFBOLzzZFkCM/zRhAApCNghiemVGTgA0v+Ff+Df8AoUtC/wDBbD/8TR/wr/wb/wBCloX/AILYf/iao6d41u7uXR7i70dLfSdcfZYXKXfmS5KF4/Ni2AIGRSflZ8HAOM8NfxrfLrot00m2fTTqw0oXf25vNMmzcW8rysYByv385FHW39dF+qDZX/rr/kzQ/wCFf+Df+hS0L/wWw/8AxNH/AAr/AMG/9CloX/gth/8Aiazb/wCIEeneK4NJuE00LLeJaeWNVQ3ql+Ff7MFPyEkc787TkjtTdQ+JVhourRadry22m3D3727i4vAgWDy2dLgbgNyNtC+gYkZJHItVf+un+Ybaf1/Whqf8K/8ABv8A0KWhf+C2H/4mj/hX/g3/AKFLQv8AwWw//E1f0LVJdY0eLUJ7J7ITFmjikJ3GPcQjEEAqWXDbe2cV509+X+G+karJPexjWdcWe7ewaZZpI5JWGweV+8OECLhecKKNnb0/F2Dpf+tEdt/wr/wb/wBCloX/AILYf/iaP+Ff+Df+hS0L/wAFsP8A8TWDoOtX2jThbi21J9Cv9W+y2M2qSSC4gQxjBYSgyFWlDKu8hgCO2Ko+INavfF+oabpFjZStYXVzfIyJqD2y3kcAEfzyINyxl3bhQxO1exOD0/rb/MPX+t/8jrP+Ff8Ag3/oUtC/8FsP/wATR/wr/wAG/wDQpaF/4LYf/ia5KU6fp/gC9Gm6JbaJdeF9Sikkt7YiRN6GNi6vhS++F8FmAY7iD0ruvEGtpoOjm9aFriRpI4IIUIUyyyOERcnhQWYZJ6Cn/X5WEUv+Ff8Ag3/oUtC/8FsP/wATR/wr/wAG/wDQpaF/4LYf/iaz5/F2t2x1K0n0KxXUtPt1vWiGpsYZbch/mWTyd28MhG0oB0O6tzw3qV/rGh2+oalZW9k1yiyxR290042MoYbiY0w3PQAjjrSWo3o7FP8A4V/4N/6FLQv/AAWw/wDxNH/Cv/Bv/QpaF/4LYf8A4msTw/8AEtNa1i2spINNUXHnZWz1T7RPbeXk5mi8tfLBxjO48kDvWhZ+MrqXQZPEN9o4t9C+xveQ3Ed0JJjGo3LviKgKWXkbWb3xSurXHbWxb/4V/wCDf+hS0L/wWw//ABNH/Cv/AAb/ANCloX/gth/+JrG0X4j/ANtXUljaQaRdX8lk91aQWGsrchiuMxysEHlN8y44YH5ueOdjwr4tj8WrPcafZyxWMIWNpp8oxnxmSLYR/BwC2cbsgdM1Vibr+v6/r5C/8K/8G/8AQpaF/wCC2H/4mj/hX/g3/oUtC/8ABbD/APE1m69401TSZNbks9Fs7qy0YRmeSXUWikfciv8AKghYcBu7CpNW8Z6hYXGsm00NLmz0RFlvJ3vRGzIYxIfLTYdzAE8MVHAw3JAm63KtrYvf8K/8G/8AQpaF/wCC2H/4mj/hX/g3/oUtC/8ABbD/APE1n3/jm5jj1S80nSEvtM0cKb6d7vyZf9WsrCKMoQ5WNlPzMmScD1qXxB4wvNNm2aNpttqATTZNSma4vGt9kS4wABG+S2TjOPumm9N/66/khLXb+un6lv8A4V/4N/6FLQv/AAWw/wDxNH/Cv/Bv/QpaF/4LYf8A4ms/X/HZ0XS7K88rSovtVp9pA1PV1tA/yg+XH8jM7DI/hUcjnnAZrPxGttG0ddVubQJYXOl/brKaecRieXG77OeCFcggjk5+bA+Wh6f16/5AtbW6/wBfqaf/AAr/AMG/9CloX/gth/8AiaP+Ff8Ag3/oUtC/8FsP/wATUnh/xPD4kubltNjSbToUjCX8cu+OaUgl0TAwQvygsCeSR1BrdptWEmnsc9/wr/wb/wBCloX/AILYf/iaP+Ff+Df+hS0L/wAFsP8A8TXQ0UhnPf8ACv8Awb/0KWhf+C2H/wCJo/4V/wCDf+hS0L/wWw//ABNdDRQBz3/Cv/Bv/QpaF/4LYf8A4mj/AIV/4N/6FLQv/BbD/wDE10NFAHPf8K/8G/8AQpaF/wCC2H/4mj/hX/g3/oUtC/8ABbD/APE10NFAHPf8K/8ABv8A0KWhf+C2H/4mj/hX/g3/AKFLQv8AwWw//E10NFAHPf8ACv8Awb/0KWhf+C2H/wCJo/4V/wCDf+hS0L/wWw//ABNdDRQBz3/Cv/Bv/QpaF/4LYf8A4mj/AIV/4N/6FLQv/BbD/wDE10NFAHPf8K/8G/8AQpaF/wCC2H/4mj/hX/g3/oUtC/8ABbD/APE10NFAHPf8K/8ABv8A0KWhf+C2H/4mj/hX/g3/AKFLQv8AwWw//E10NFAHPf8ACv8Awb/0KWhf+C2H/wCJo/4V/wCDf+hS0L/wWw//ABNdDRQBz3/Cv/Bv/QpaF/4LYf8A4mj/AIV/4N/6FLQv/BbD/wDE10NFAHF/Ay3htNN8aW1rDHBBD4uvo44o1CqigRgKAOAAOMV6hXmfwU/49/HH/Y46h/KOvTKBBRRRQAUUUUAFFFFAHm37Qf8AyQnxD/27f+lMVdbXJftB/wDJCfEP/bt/6UxVc/4RvVf+h113/vzY/wDyNQB0NFc9/wAI3qv/AEOuu/8Afmx/+RqP+Eb1X/oddd/782P/AMjUAdDRXPf8I3qv/Q667/35sf8A5Go/4RvVf+h113/vzY//ACNQB0NFc9/wjeq/9Drrv/fmx/8Akaj/AIRvVf8Aoddd/wC/Nj/8jUAdDRXPf8I3qv8A0Ouu/wDfmx/+RqP+Eb1X/oddd/782P8A8jUAbGo2Mep6XdWE7OsV1C8LlCAwVgQcZ781x3h34TaP4e1KxvDqut6qdOUixh1K982K1yu0lECgDjj0rZ/4RvVf+h113/vzY/8AyNR/wjeq/wDQ667/AN+bH/5GoWjuD1VjFsvhJoem6yLzT9R1q2s1uRdDSYr4rZ+YGDA+Xj1AOM449KtSfDTR5fh9L4Pa5vv7PllMrSiRPNBMvmdduMZ9un51of8ACN6r/wBDrrv/AH5sf/kaj/hG9V/6HXXf+/Nj/wDI1C0Drcrah8PdH1OfX5LuS6b+3rWK2uVDrhFjBCsny8NznJzyBxSWHw70bTW8NG0kulHhtJUtBvXEnmrtcyfLye/GOTVr/hG9V/6HXXf+/Nj/API1H/CN6r/0Ouu/9+bH/wCRqP6/r72H9foZdv8AC3RLXR9Osre5v45dMvnvrS9WRBPE7tuZc7NpQ9CpByK39f8ADtp4jisY76SaMWN7FfR+SwGXjOVByD8vr0PvVT/hG9V/6HXXf+/Nj/8AI1H/AAjeq/8AQ667/wB+bH/5Go2t5f1+gf1/X3le9+H2i33jiPxTJ9oS+WBoJIo3CxTAoU3OMZLbWxkEcAelUtF+Fmk6PrVrqMmqa3qhsSTZW+pXxmhtCRjKLgY4OOc9u9av/CN6r/0Ouu/9+bH/AORqP+Eb1X/oddd/782P/wAjULTYHruWdV8NWer67o+q3Mk6z6RJJJAsbAKxddp3Agk8ehFc5H8IfDkPh7XdGge8it9cuRcXLpIm9MOGVEO3AUEdCCeTzW1/wjeq/wDQ667/AN+bH/5Go/4RvVf+h113/vzY/wDyNQtNv6/qw7v+v68yhqnw20rVZdeea91GL+31t0vBDKi/JCMBV+QkBh97rntitC38GaZZ+Lo/ENg09pcLZizkghYCGaNfublxnK8YII4GKT/hG9V/6HXXf+/Nj/8AI1H/AAjeq/8AQ667/wB+bH/5Go2/r5C/r+vuRev9CttT1ewvr15ZBp7NJBbEjyhKRgSkYyWUZA5wMk4zzWbpHgfTtG15tUt7m7lYeeYLeVkMduZnDylcKGO5h/EzY6DFSf8ACN6r/wBDrrv/AH5sf/kaj/hG9V/6HXXf+/Nj/wDI1C0Dc6Giue/4RvVf+h113/vzY/8AyNR/wjeq/wDQ667/AN+bH/5GoA6Giue/4RvVf+h113/vzY//ACNR/wAI3qv/AEOuu/8Afmx/+RqAOhornv8AhG9V/wCh113/AL82P/yNR/wjeq/9Drrv/fmx/wDkagDoaK57/hG9V/6HXXf+/Nj/API1H/CN6r/0Ouu/9+bH/wCRqAOhrnr3/kpei/8AYI1D/wBHWdH/AAjeq/8AQ667/wB+bH/5GrCu/D+pD4haREfF2ss7aXfMJjDZbkAltMqP9Hxg5BOQT8owRzkA76iue/4RvVf+h113/vzY/wDyNR/wjeq/9Drrv/fmx/8AkagZ0NFc9/wjeq/9Drrv/fmx/wDkaj/hG9V/6HXXf+/Nj/8AI1AHQ0Vz3/CN6r/0Ouu/9+bH/wCRqP8AhG9V/wCh113/AL82P/yNQB0NFc9/wjeq/wDQ667/AN+bH/5Go/4RvVf+h113/vzY/wDyNQB0NFc9/wAI3qv/AEOuu/8Afmx/+RqP+Eb1X/oddd/782P/AMjUAdDRXPf8I3qv/Q667/35sf8A5Go/4RvVf+h113/vzY//ACNQB0NFc9/wjeq/9Drrv/fmx/8Akaj/AIRvVf8Aoddd/wC/Nj/8jUAdDRXPf8I3qv8A0Ouu/wDfmx/+RqP+Eb1X/oddd/782P8A8jUAdDRXPf8ACN6r/wBDrrv/AH5sf/kaj/hG9V/6HXXf+/Nj/wDI1AHQ0Vz3/CN6r/0Ouu/9+bH/AORqP+Eb1X/oddd/782P/wAjUAdDRXPf8I3qv/Q667/35sf/AJGo/wCEb1X/AKHXXf8AvzY//I1AHQ1l61oVvrS27vPcWl1aSeZbXdq4WSFsYOMgqQRwVYEHuOlUv+Eb1X/oddd/782P/wAjUf8ACN6r/wBDrrv/AH5sf/kagDP1rwlfXUOnRJq2qXsq6lHPNeSTxxyQIsbgMioqoMFhwEO7PzbhxVtfA1kLN1a/v3v3vRff2mXj+0CcLsDABPLxsGzbs246gnmpf+Eb1X/oddd/782P/wAjUf8ACN6r/wBDrrv/AH5sf/kahaf16f5IP6/P/MzdZ8J6tqc+mWE3iDVJ7COZ7q4uWW0EiyJsMK7fJClQwY42nnqelQjwRd/8JBex3Wrajf6bqtsGvZp/sysJ43j8rbsjXHyhgeCOPWtj/hG9V/6HXXf+/Nj/API1H/CN6r/0Ouu/9+bH/wCRqFp/Xy/r0B6otap4dg1S6nuWurq2mmsZLHzLdwrIjkEspIOGGOD29KrTeDtPbItJrqxA0s6VH9ldV8mEkEFMg4YY4P6Un/CN6r/0Ouu/9+bH/wCRqP8AhG9V/wCh113/AL82P/yNR5f11/zf3h1v/XT/ACX3Fuz8N2Gn6pbXtmrw/ZbAafFCpHlrEGDDjGc8AdelY0/hfVNT8aXurT6zqOmpBGtvp/2VbZl8plVpOJInIJcdeDwO1Xv+Eb1X/oddd/782P8A8jUf8I3qv/Q667/35sf/AJGo3/ruGxi6H4DuLSHyJNV1K0k0u4ki0u/iaAzNayIhZHHllGBkBPzJkFQRjvuWHg+w0+4sZY5rqUWJkkjSVwQ88md87nGWkIZh12gMcAU3/hG9V/6HXXf+/Nj/API1H/CN6r/0Ouu/9+bH/wCRqP6/r8/XUP6/r+thdP8AB2n6fcadKk11KNOa4e3jldSoeZizOQAMsAzKD2DN1zmtDRNHt9B0eLTbN5HhiLlWlILHcxY5wAOrHtWd/wAI3qv/AEOuu/8Afmx/+RqP+Eb1X/oddd/782P/AMjUdLASWvhOxtItFSKW4I0Uubfcy/PuRkO/jnhj0xWL4U8DNZ6bpEmt3d9JJYKzx6dNLG8MErKVZgQu48M2AXKjccAYGNb/AIRvVf8Aoddd/wC/Nj/8jUf8I3qv/Q667/35sf8A5GoAz38Ef2Zpn/Eq1DULt9NhlbR7G5kiaK0lKME2nYC20HavmMwAP41lXXw+1O18JxDTPEGrzahZub62tpBZ7TdncxLN5ILZZ26t3610v/CN6r/0Ouu/9+bH/wCRqP8AhG9V/wCh113/AL82P/yNR1v/AF/X+SDf+v6/psqD4f2f2hW/tTU1tV1AaktirxCJZ9+8nPl7yC2flLEc8YwMXI/B2nx3MFwZrl54dRk1JpGZcyyujJhvl+6EYKAMYCrz1yn/AAjeq/8AQ667/wB+bH/5Go/4RvVf+h113/vzY/8AyNQtFZf1t/kvuD1/rf8AzZoaHott4f0safYNKbZJJHiSRgfKDMW2LgD5RnAHYYFYmjeFSuh22l6kJY49K1RrmzeN1/eoJGePPXAAfaRwcqccYNW/+Eb1X/oddd/782P/AMjUf8I3qv8A0Ouu/wDfmx/+RqOtweqHeONLuNb8E6np1jE0t1PEFg2yBCkm4FXDEjG0gN6/LxzTG8HWg0nSbS0u7uyn0iMJa3luyGVRt2tkOrK24ddynnnggGl/4RvVf+h113/vzY//ACNR/wAI3qv/AEOuu/8Afmx/+RqAKGreET/wjZ0ew+0XZ1LUIpdSvJpF8x13q0jtjaOVjCAKOMrgADjoNb0a11/SZLC9MiI5V0khfZJE6sGR1PZlYAjtxyCOKzv+Eb1X/oddd/782P8A8jUf8I3qv/Q667/35sf/AJGo/r+vuAfa+FIIo9Ra8v73UbvUYPs015cmMSCLBARQiKigbmPC8k5Oa1dPso9N0y1sYCzRWsKQoXOWKqoAzjvxWP8A8I3qv/Q667/35sf/AJGo/wCEb1X/AKHXXf8AvzY//I1H9f194FfTvAltY3Fi02rale22nyPLaWlwYRHE7BgTlI1ZsB2GGYjn6VLY+CbOzs5dPk1DULvSWhkt49NnkTyYY36qNqh2AHA3s2B0p/8Awjeq/wDQ667/AN+bH/5Go/4RvVf+h113/vzY/wDyNSsrWDrcIPC91DYT2b+KNamgltzboH+zBoQcAMrrCG3ADGWJ65OTzU+ieFNN8O3c0mjI9rBNDHG9ohHlEoNokxjO8rhSc8hRnnmoP+Eb1X/oddd/782P/wAjUf8ACN6r/wBDrrv/AH5sf/kamHkS6h4UsdSttagnluFXWdv2goygrtQKNuRxwo65rGuPBMur69r7X97f2mn6g0KNDbzR7LyIRKrKwKsU5DDK7GIPXpjU/wCEb1X/AKHXXf8AvzY//I1H/CN6r/0Ouu/9+bH/AORqAIr7wNZXl1evHf6hZ2mo7ft9hbyIIbraoX5soXXKAKdjLkAZ9ayofAt9qNzrVxqOt6np51B3tPItltShtFLCJV3RMVG1j3Bycnmtr/hG9V/6HXXf+/Nj/wDI1H/CN6r/ANDrrv8A35sf/kala+4ehjaV4FuZtPjk1TVdSs737O+nzm3aAG5tUlfygx8s7TsbqmxufXppv4C0uXTns5Z7t4zpI0iNmdd0MOMMV+Xhm+XJOR8i8DFTf8I3qv8A0Ouu/wDfmx/+RqP+Eb1X/oddd/782P8A8jVX9fn/AJv7wWn9en+S+4u2OgWmnazdalavKsl5DFFNHuGxzGCFfGPvbSFJzyFXjitSue/4RvVf+h113/vzY/8AyNR/wjeq/wDQ667/AN+bH/5GpBsdDRXPf8I3qv8A0Ouu/wDfmx/+RqP+Eb1X/oddd/782P8A8jUAdDRXPf8ACN6r/wBDrrv/AH5sf/kaj/hG9V/6HXXf+/Nj/wDI1AHQ0Vz3/CN6r/0Ouu/9+bH/AORqP+Eb1X/oddd/782P/wAjUAdDRXPf8I3qv/Q667/35sf/AJGo/wCEb1X/AKHXXf8AvzY//I1AHQ0Vz3/CN6r/ANDrrv8A35sf/kaj/hG9V/6HXXf+/Nj/API1AHQ0Vz3/AAjeq/8AQ667/wB+bH/5Go/4RvVf+h113/vzY/8AyNQB0NFc9/wjeq/9Drrv/fmx/wDkaj/hG9V/6HXXf+/Nj/8AI1AHQ0Vz3/CN6r/0Ouu/9+bH/wCRqP8AhG9V/wCh113/AL82P/yNQB0NFc9/wjeq/wDQ667/AN+bH/5Go/4RvVf+h113/vzY/wDyNQB0NFc9/wAI3qv/AEOuu/8Afmx/+RqP+Eb1X/oddd/782P/AMjUAdDRXPf8I3qv/Q667/35sf8A5Go/4RvVf+h113/vzY//ACNQBQ+Cn/Hv44/7HHUP5R16ZXl/wMjeHTfGkUk8lw6eLr5WmkChpCBH8x2gDJ68AD0Ar1CgQUUUUAFFFFABRRRQB5t+0H/yQnxD/wBu3/pTFXW1yX7Qf/JCfEP/AG7f+lMVdbQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAV5ve/EnUNL+Lc2gX9pbLoCNBA14qN5kU8yFo953Y2kqy9BjI5r0iuIuvAH9ra94ul1doX0/Xra2hiEbHzYmiVhv5GAQxBUgnpS2dx7pr+tzA1r4p6xpvhzU7yO008TQeI5NHiuJxItvbxr0lm2ksfQ4x1/A9t4M1TV9X0AXOvDS3nMhEdxpM5ltrhMDDoTyOSRg91rjtF8E+OtD8IXVpb6hoN3qV3qUt1dJexSSW13HIoBD/AChlbIzgcc1vfDfwZd+DtN1AahLZi41G7Ny9rp0bJa23ygbY1bnHHXjtxxVK1reS/Jf8El3bv5v83/wDGk8Y+OfEWpaw/gTTNFbTNIuXtHfU5JfNupU++IwmAo7fN+fUDO1r4m+K5fhxb+N/DNnosemrFi8ttQ8550m83yyE2FVK5xycGrv/AAhnjzw3qGtReBtU0T+y9WupLzGppL51rJJ97YVBB9t3oOOuaemeDtT1b4E3fgmLTZdI1O3dYXfUG/dTSeasryI6A7kOTjA46ds0o6rXy/4JenNrtf8AD+v1NO68ZeLPCE2kXPj9dCXSryWSG4udNSbFu2zdESXboSGB47Dnmun8D6xq3iDwrBq+t20Fq96zTW8ESsCkBP7vdknLFcEkYHPQVX+Ifha68X/D2+0Kxa3S6uBF5b3BIRSsisSSAT0B7V08MYihSNQAEUKAo4GBTWzuZ62X4j6KKKRQUUUUAFFFFABRRRQAUUUUAFFFFABXPXv/ACUvRf8AsEah/wCjrOuhrnr3/kpei/8AYI1D/wBHWdAHQ0UUUDCiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAK4WTx3cS3er6Rp5sptdh1MWdnaAFmWIqhM0qBt2xdzEt8o4AHJGe6rib/wVe3Wk66kU1tHf3Gqf2npk5LYglVUCFjjI5Qg4z8rHrnFC+LXb/gr9Lg9tN/8AgP8AWxtal4w0TR7x7XUbx0kiCGd0tpXit95wplkVSkQPX5yOOenNGt+MNF8OzrDqtzNG7Qmc+TaTTBIwQu9jGrBVyQMnFYV/4X19/wDhILKxOmmx8REPcTTTSCW0ZolikCoEIlG1AVyycnnNO1XwZqGp2GuIZbdJrqxj06wUyMVSJCW3udvDMW5ABA2jk0Lz/r/hnb1D0/r+lc7K4uYrW0luZ22QwoZHbBOFAyTgc9KyNN8YaLqjSC3uJoTHB9pP220mtcxd5B5qLuUdyMgZGeoov/DUM8OoS28139rvLaSELLqE7QAsuP8AVFii/gvrXHWfw31S4s7m01GWGxim0eTTWdNSuNRZ2bbhx56r5SrtJ2Jw2ecbRSW7v/W//A+8Oi/rt/wTtNI8V6Prl2bXT7iXz/KE6x3FrLAZYycb08xV3rnHzLkcj1FJq3ivStEvfsl81404h89ltdPnuNkeSNzGJGCjIPXHSqGm6Rrl54isNW8Rpp9s2nWkkEUdhO8omaTZvdi6LtA8sYUbupy3FW7zQ7m41+/vkeIRXOlizQEncH3Ocnjp8w9+vFErrbz/AFt9+g467+X6X/Ubc+OPD9rHbs93LIbm1W8ijgtJppGhbOJNiIWC8ckjjIzjIy++8ZaFp8MEst4863Fv9qj+x20tyfJ/56kRKxVOfvHA965aysNf0bxBaafpKadc3Vr4ctreZbmZ4kLK7rvVwjHAI6FeQeq45taV4Q1zwm0DeHm06/LaVBY3AvZZINkkJcrIu1X3A+Y2UOOgw1N7Nrz/ADa/RfeSvPy/Jf5s6W/8T6Tp1nZXUtxJPDfkC1NlbyXRm+UvlRErEjaCc9MVH/wl+jHSbPUYp554L0E26wWc0ssgHUiJUL4Hc7eMjPWuO0rS9csdes9N0e2sL+18K2otVa7vnt2mmljRjLhYZAAFJUDP8R5qDRdH8S3Wh2ukx/ZwNCuJbS8tYNXuLRbhiqSJIJ4oxJ8okI2EYOc54FG70/pf1b7x+p6DaeINLvk09rW6Eg1FWe1+RhvCjLZyPlI7hsEHI6ij+39MDlftPIvBYkeW3+vIB2dPQjnp71yWl/D26i0vw/Zapdkrpsl2872d7cQu/msSu11Ic9ect+Ldam/4QGX+z3sBcyfZ21wagHN9P53khAMebnzN+R/e6d6PtW6f8FfpcWvLf+tn+tjprzxFpdgbwXd15ZshEbj92x2eacJ0HOT6Zx3xVq91C209YWvJfLE8yQR/KTudzhRwO579K4rU/h9NJp3iO00+VZo9US18lNRvZpyTExZld5N7BT0GM9+KSw8C30Fw88Vrpejwvf2dwNM0+RjbxiFiXkB8tAZHyAfkHCLknsLe3p/wQd+VvrqdTB4n0i4mihhu900t1JZrF5ThxKgJdSuMgADO44GCDnkZfq/iDT9De3S/NyZLosIY7azmuHfaMn5YlY8DviucsPCGq2njl/FbzWRvLyR4Lu3UfItrgCPY+zcZBsUtnAbJHRVq34y8PahrV7pNzp0ccv2JpTJG2pz2DMHUAYlhVm7dOhpa8qfUrq0aEni/RI9Ns70XUs0d6WFvHBayyzSFc7gIkUv8uDu+X5e+KntfEelXpsBbXYc6ikj2w8tgW2ffByPlK5wQ2CDkYyDXF/8ACvdUi0/RpElimutP+0o1rFqVxZr5czhwouYh5jFSoG5lO/knB5q9H4W1fTZNEu9G07T0msmu3uLW41e4lVmmI+YTvEzsSQScqOT+NMR01p4k0q+/s/7LdeZ/aSyPa/u3HmBPvHkcY98VBYeLtF1LUVsrO6keSQuIpGtpUhnKfeEcrKEkIweFY8Ansa4m10bxJ4dXwy2q2WlNa6bI1k722oSM7/aXVAwVoFA2k5xnn2rQ8MeA7vRLrTIL22ju7bTGJgvDr94xGFZVcWjKYlOGwQGwMnHpQtX/AF/XYHsWLfxDfxatpsl7rlh/Y+oahItlIFb7Rd7gQlv5XlDYEb/lpuJO1c43Gu5rzzT/AIdX9va6ZLe3kFxqFnqEcobLCOC2WQuY4+M7mOGYnGSB2Vceh0R+HXf/AIC/r+rsfxf15/1/VkUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQBx/wU/49/HH/Y46h/KOvTK8z+Cn/Hv44/7HHUP5R16ZQIKKKKACiiigAooooA82/aD/AOSE+If+3b/0piq59t8Zf9AHQv8Awdzf/IlU/wBoP/khPiH/ALdv/SmKutoA577b4y/6AOhf+Dub/wCRKPtvjL/oA6F/4O5v/kSuhooA577b4y/6AOhf+Dub/wCRKPtvjL/oA6F/4O5v/kSuhooA577b4y/6AOhf+Dub/wCRKPtvjL/oA6F/4O5v/kSuhooA577b4y/6AOhf+Dub/wCRKPtvjL/oA6F/4O5v/kSuhooA577b4y/6AOhf+Dub/wCRKPtvjL/oA6F/4O5v/kSuhooA577b4y/6AOhf+Dub/wCRKPtvjL/oA6F/4O5v/kSq/wDwsLRx8RG8GSJdR6iIw6yui+S5K7wobdndtycEdjVa9+J+iWOmXd5Jb6hK1vqj6SlrDAJJrm4XtGobkHtkj+VH9fp+Yf1+F/yNH7b4y/6AOhf+Dub/AORKPtvjL/oA6F/4O5v/AJEqx4Z8S2/ijTHvLa0vrFopTDNa38BhmicAHDLz2IPXvXPa38WNH0fVrywg0vW9XOnnF7Pplj50VqeuHbIwQOeM0PR2YLXY2ftvjL/oA6F/4O5v/kSj7b4y/wCgDoX/AIO5v/kSsPXPi7oui6PaavFpmtappV1AJl1Cwsw8MYLbdrszLtbPGDVrSviXY6hqmnWF5omuaNJqRlW2bVbRYAzRqGI++TyDxxg80B0uaX23xl/0AdC/8Hc3/wAiUfbfGX/QB0L/AMHc3/yJVjwx4mtPFmjnVNNhuI7QzSRRPOgXzgh271wT8pIOM4PHSsvwX8SNF8czajFpUd3by6ewEqXcaoWBJG5cMcjKkUAXPtvjL/oA6F/4O5v/AJEo+2+Mv+gDoX/g7m/+RK562+NHhu70XXdUgtdSa20RohNmFAZlkcojR5fkHGeccVsXfxD0TTtR1my1Pz7KXSLRbyTzwoE8LDhosMd3OF5x8xAo2V/67js72/r+tSz9t8Zf9AHQv/B3N/8AIlH23xl/0AdC/wDB3N/8iVYbxNaQ+DT4lvoLqytFtftTwzxgTImM4Kgn5sds96zk8f6b/ZV1dXFpfW9zbXS2Z0+REa4knZVZI0CuVYsrA8NwM5xg4dnewr6XLP23xl/0AdC/8Hc3/wAiUfbfGX/QB0L/AMHc3/yJXQKSVBIKkjoe1LSA577b4y/6AOhf+Dub/wCRKPtvjL/oA6F/4O5v/kSuhooA577b4y/6AOhf+Dub/wCRKPtvjL/oA6F/4O5v/kSuhooA577b4y/6AOhf+Dub/wCRKPtvjL/oA6F/4O5v/kSuhooA577b4y/6AOhf+Dub/wCRKPtvjL/oA6F/4O5v/kSuhooA577b4y/6AOhf+Dub/wCRKwru78Wf8LC0hm0XRhONLvgiDWJSrL5tpuJb7NkEHbgYOcnkYAPfVz17/wAlL0X/ALBGof8Ao6zoAPtvjL/oA6F/4O5v/kSj7b4y/wCgDoX/AIO5v/kSuhooGc99t8Zf9AHQv/B3N/8AIlH23xl/0AdC/wDB3N/8iV0NFAHPfbfGX/QB0L/wdzf/ACJR9t8Zf9AHQv8Awdzf/IldDRQBz323xl/0AdC/8Hc3/wAiUfbfGX/QB0L/AMHc3/yJXQ0UAc99t8Zf9AHQv/B3N/8AIlH23xl/0AdC/wDB3N/8iV0NFAHPfbfGX/QB0L/wdzf/ACJR9t8Zf9AHQv8Awdzf/IldDRQBz323xl/0AdC/8Hc3/wAiUfbfGX/QB0L/AMHc3/yJXQ0UAc99t8Zf9AHQv/B3N/8AIlH23xl/0AdC/wDB3N/8iV0NFAHPfbfGX/QB0L/wdzf/ACJR9t8Zf9AHQv8Awdzf/IldDRQBz323xl/0AdC/8Hc3/wAiUfbfGX/QB0L/AMHc3/yJXQ0UAc99t8Zf9AHQv/B3N/8AIlH23xl/0AdC/wDB3N/8iV0NZGreIYdLvYLCG0utR1G4RpI7OzCb/LXAZyXZUVQSB8zDJ4GTQBV+2+Mv+gDoX/g7m/8AkSj7b4y/6AOhf+Dub/5ErV0y/bUbMTSWV1YyBijwXSBXQg+qkqw91JB9auUAc99t8Zf9AHQv/B3N/wDIlH23xl/0AdC/8Hc3/wAiV0NFAHPfbfGX/QB0L/wdzf8AyJR9t8Zf9AHQv/B3N/8AIldDRQBz323xl/0AdC/8Hc3/AMiUfbfGX/QB0L/wdzf/ACJXQ0UAc99t8Zf9AHQv/B3N/wDIlH23xl/0AdC/8Hc3/wAiV0NFAHPfbfGX/QB0L/wdzf8AyJR9t8Zf9AHQv/B3N/8AIldDRQBz323xl/0AdC/8Hc3/AMiUfbfGX/QB0L/wdzf/ACJXQ0UAc99t8Zf9AHQv/B3N/wDIlH23xl/0AdC/8Hc3/wAiV0NFAHPfbfGX/QB0L/wdzf8AyJR9t8Zf9AHQv/B3N/8AIldDRQBz323xl/0AdC/8Hc3/AMiUfbfGX/QB0L/wdzf/ACJXQ0UAc99t8Zf9AHQv/B3N/wDIlH23xl/0AdC/8Hc3/wAiV0NFAHPfbfGX/QB0L/wdzf8AyJR9t8Zf9AHQv/B3N/8AIldDRQBz323xl/0AdC/8Hc3/AMiUfbfGX/QB0L/wdzf/ACJXQ0UAc99t8Zf9AHQv/B3N/wDIlH23xl/0AdC/8Hc3/wAiV0NFAHPfbfGX/QB0L/wdzf8AyJR9t8Zf9AHQv/B3N/8AIldDRQBz323xl/0AdC/8Hc3/AMiUfbfGX/QB0L/wdzf/ACJXQ0UAc99t8Zf9AHQv/B3N/wDIlH23xl/0AdC/8Hc3/wAiV0NFAHPfbfGX/QB0L/wdzf8AyJR9t8Zf9AHQv/B3N/8AIldDRQBz323xl/0AdC/8Hc3/AMiUfbfGX/QB0L/wdzf/ACJXQ0UAc99t8Zf9AHQv/B3N/wDIlH23xl/0AdC/8Hc3/wAiV0NFAHPfbfGX/QB0L/wdzf8AyJR9t8Zf9AHQv/B3N/8AIldDRQBz323xl/0AdC/8Hc3/AMiUfbfGX/QB0L/wdzf/ACJXQ0UAc99t8Zf9AHQv/B3N/wDIlH23xl/0AdC/8Hc3/wAiV0NFAHPfbfGX/QB0L/wdzf8AyJR9t8Zf9AHQv/B3N/8AIldDRQBz323xl/0AdC/8Hc3/AMiUfbfGX/QB0L/wdzf/ACJXQ0UAc99t8Zf9AHQv/B3N/wDIlH23xl/0AdC/8Hc3/wAiV0NFAHPfbfGX/QB0L/wdzf8AyJR9t8Zf9AHQv/B3N/8AIldDRQBz323xl/0AdC/8Hc3/AMiUfbfGX/QB0L/wdzf/ACJXQ0UAc99t8Zf9AHQv/B3N/wDIlH23xl/0AdC/8Hc3/wAiV0NFAHPfbfGX/QB0L/wdzf8AyJR9t8Zf9AHQv/B3N/8AIldDRQBz323xl/0AdC/8Hc3/AMiUfbfGX/QB0L/wdzf/ACJXQ0UAcX8DGmbTfGjXUccc58XXxkSNy6q2I8gMQCRnvgZ9B0r1CvM/gp/x7+OP+xx1D+UdemUCCiiigAooooAKKKKAPNv2g/8AkhPiH/t2/wDSmKutrkv2g/8AkhPiH/t2/wDSmKrn/CbaV/z667/4T99/8ZoA6Giue/4TbSv+fXXf/Cfvv/jNH/CbaV/z667/AOE/ff8AxmgDoaK57/hNtK/59dd/8J++/wDjNH/CbaV/z667/wCE/ff/ABmgDoaK57/hNtK/59dd/wDCfvv/AIzR/wAJtpX/AD667/4T99/8ZoA6Giue/wCE20r/AJ9dd/8ACfvv/jNH/CbaV/z667/4T99/8ZoA6Giue/4TbSv+fXXf/Cfvv/jNH/CbaV/z667/AOE/ff8AxmgDitX8GXviDxp4ylihltLlU0+50i/eMqguIkcja2MEZO1sdmrAsrS4u/AOpS+LPBGu3IvvEE940FjEy3dmzKCssanBYBsjI4+teqf8JtpX/Prrv/hP33/xmj/hNtK/59dd/wDCfvv/AIzSWn9en+SG3d3/AK2sY3wq/wCEi/sG8HiH+0vsouiNM/tgAXvkYH+tx3znrz17Yrl9I1bW/hzeeJdLu/B2tawb7U576yu9NtvNimWTGBI2fkxgA9fpxz6D/wAJtpX/AD667/4T99/8Zo/4TbSv+fXXf/Cfvv8A4zTlr91vy/yEtF87/n/meVWWnm//AGVp9M0Rjqt9lTNbWaNJJFI1wshjKAbtyg88dieldt8YtDn1n4YXA0+0ubjUrR4prRbRGaVX3BW2hefuM2fatiDxVoNrJM9rpmrwvcP5kzR+HL1TI2MbmIh5OABk+lT/APCbaV/z667/AOE/ff8AxmnJ82/e/wCX+Q07NfP8TU0nTrfSNFtNOsYvKt7WFYo0HYAYrwCHwv4r0bwzpeoaBpd/HqOo/bNHvYvIdWiilmdo5mGMgLknceORzXtf/CbaV/z667/4T99/8Zo/4TbSv+fXXf8Awn77/wCM0nrK7/ruKPux5V/Vtv8AM8k1/wAF6hp2kfEHS9I0i+mtzaaRBY+XbO32kRBQ2zA+cjGTjp3rS+I3hbWvG3iS5vNN0po18MWkbWxubY41SYsshiGcb0AUj03H3r0n/hNtK/59dd/8J++/+M0f8JtpX/Prrv8A4T99/wDGad3o+q/O1h6Wt0/4b/Is20tt4n8HpJq2mTxW99bf6RYXcDLIgI+ZCmM5HPT2IrzJ9A1PTpLTxHYWup6dDPduiRxW73t5aQGMgTOsqyOZZCkanKnYmF4+Y16J/wAJtpX/AD667/4T99/8Zo/4TbSv+fXXf/Cfvv8A4zSe7a0EtFZlzwxPqdz4V0yfX4xFqclsjXSBdu1yOcjsfUetatc9/wAJtpX/AD667/4T99/8Zo/4TbSv+fXXf/Cfvv8A4zTbu7iWiOhornv+E20r/n113/wn77/4zR/wm2lf8+uu/wDhP33/AMZpDOhornv+E20r/n113/wn77/4zR/wm2lf8+uu/wDhP33/AMZoA6Giue/4TbSv+fXXf/Cfvv8A4zR/wm2lf8+uu/8AhP33/wAZoA6Giue/4TbSv+fXXf8Awn77/wCM0f8ACbaV/wA+uu/+E/ff/GaAOhrnr3/kpei/9gjUP/R1nR/wm2lf8+uu/wDhP33/AMZrCu/F+mt8QtInFtrOxNLvkIOh3oYlpbQjC+Vkj5TkgYHGcZGQDvqK57/hNtK/59dd/wDCfvv/AIzR/wAJtpX/AD667/4T99/8ZoGdDRXPf8JtpX/Prrv/AIT99/8AGaP+E20r/n113/wn77/4zQB0NFc9/wAJtpX/AD667/4T99/8Zo/4TbSv+fXXf/Cfvv8A4zQB0NFc9/wm2lf8+uu/+E/ff/GaP+E20r/n113/AMJ++/8AjNAHQ0Vz3/CbaV/z667/AOE/ff8Axmj/AITbSv8An113/wAJ++/+M0AdDRXPf8JtpX/Prrv/AIT99/8AGaP+E20r/n113/wn77/4zQB0NFc9/wAJtpX/AD667/4T99/8Zo/4TbSv+fXXf/Cfvv8A4zQB0NFc9/wm2lf8+uu/+E/ff/GaP+E20r/n113/AMJ++/8AjNAHQ0Vz3/CbaV/z667/AOE/ff8Axmj/AITbSv8An113/wAJ++/+M0AdDRXPf8JtpX/Prrv/AIT99/8AGaP+E20r/n113/wn77/4zQB0NcnqLS6F47fW57O8utPvbCO0eS0t3uHt5I3dhmNAXKsHPIU4K84zVv8A4TbSv+fXXf8Awn77/wCM0f8ACbaV/wA+uu/+E/ff/GaOtw6W/ruc34nvdO1fXvD0+q6LqFzprLdhraWydmkUCLDtb/fZN2PlZCcgNtwAwwp9E1X+yNE+1WBGhx3F8y2N7pMuoLbo8mbYPaoyvxHuAznZkAgdu4l8TaDPqFvfS2GutcWyusT/ANg342h8buPKwc7R19Ks/wDCbaV/z667/wCE/ff/ABmlYd9Dh7mSzj0HQvC98l5q1s139suY10C6CwWiSOyRGAq7qu9VRQ38I9MUzSI2n02TS/DdnJp9xa+JRdxwXGlTRpb27l/LkMREZ2YU9CMY5xXZDxNoK6o2oiw137U8IgaT+wb/AJQMWAx5WOrHnrRF4m0GHUri/jsNdFzcRpHLJ/YN/wDMqbtox5WBjc3T1pre/wDW6/yX4kvXRf1o/wDN/gc7q+l681v4sjv421G6vUsYrZrGyeCKZtzDawZ3zGCR5nzfcLdKoN4Xv9J0/wAYWEOlwlrw2KWsekaabS2ncnGCm5wY8kCU5+4W6V3X/CbaV/z667/4T99/8Zo/4TbSv+fXXf8Awn77/wCM0DWlvIyPAnh648PeJPEcU1nY28Mv2Vom07TzZ274Rt21NzAkHqQfyrn/ABhc6V4l13Whd6Ld6lHp2mzWNkw0S4uVa7YneVZY2UFSiLuyOSe1dv8A8JtpX/Prrv8A4T99/wDGarWXibQdPSVbOw12NZpnnkH9g35y7nLHmLue3SlJc2/9dPyuEfdWn9dfzscjF/ZmrG2uvEWiXut6Q2jxW9ii6ZLcCC4jZ0uEMYXMUhIQB2A+6cMMGrTeHr7XNN0fTfE2nPfto2kSvdtdwmVZLp4wsaqzcSMBvJYbsHHOTXSWHibQdMtfs1jYa7FF5jybf7Bv2+Z2LscmLuzE1Z/4TbSv+fXXf/Cfvv8A4zTn71/P/g/5/kEfdt5f8D/I4G98K6hrOk6fb/2VC5svDEaS/wBr6a1ykc235UgTcpWY4be2TjEYxXbNaXP/AAqT7H9nl+1f2H5XkbDv3+Rjbt65zxirH/CbaV/z667/AOE/ff8Axmj/AITbSv8An113/wAJ++/+M0T95SXf/g/5hH3XF9v+B/kcbfeGbXRJLqfStEh0+F/Cd0lxJbWgiVpfkIDlQBuwDweetVodMu7iN38CaTfaTenQbiO8nlgaA3F0wTysyPxM4IkPmhmxn73Ndrd+LNEv7Ke0urHXZILiNopE/sC/G5WGCMiHI4NPh8Y6PBCkUVnrqpGoVR/YF+cADA/5Y073bf8AX2v8wWlrf18P+RydjNpOgapFruh6Hf6PplrprpqaNp0tu1zMzIIU2FQZpA28bwG+997msvw//Zuk694Y1CTRrqz1Cb7SNSum0W4tw1xcEFI2laIbvnYqCTgYrur/AMTaDqdm1rfWGuywsysV/sG/XlWDLyIs9QDRfeJtB1KKOO9sNdkSKZJ0H9g34w6MGU8RdiAcdKXX+vn+f4IVtNP67HF+Hba/bxto2oDQ/sDO1yNSEei3EUiBo2ISa6kY/acso+YDBIByMqC230DxV9r0s6Mv9n2n9mX4tILi0Yy2kbvGUhaXIVHIxtyh2AEESbc13/8Awm2lf8+uu/8AhP33/wAZo/4TbSv+fXXf/Cfvv/jNK2n9ef8AmVfW5HbQK3wvW3sNPubMHSTHFZSofNjPlYCEYyWB49zXI/DjTJrHxHbvb6YttAdL8u6a30KbSkWQMhUSCUnz3+98y424bP3hXZf8JtpX/Prrv/hP33/xmj/hNtK/59dd/wDCfvv/AIzVX99z7/8AB/zJt7qj2/4H+Rg+LJnsvFmoyvY6jNHdeH2tYXtNPnuFMpdztJjRtp5HXFU/D1pBr2s6Rbaho13LZ23h0Wt3HqelyxxeaHhOz96gVjlSeM9M11X/AAm2lf8APrrv/hP33/xmj/hNtK/59dd/8J++/wDjNTFcv9f4v/kmOWv9en/yKOGtPDlt4V+G9l4kttEjsdU0W4e9nWO2EM08IkkV0bgE/umYrn0WtXQvD2vWk9j4nsLeznv7+CeS+tL6d7coZ3SRQGVH5RVVCCO3WtrUvEmgavp8tjqOn67NbTACSP8AsHUF3AEHBIiBxx071a/4TbSv+fTXf/Cfvv8A4zTWmv8AXZismrf15HCWGh+JH07wvHZQPp93HZaok7S27sIi8ikKGO3YzfwswI4ztbpTNcs/tuj6ZY2/hVorVNGVbWPUNFn1BklOQYQqsq28gwMyvjdkHOFrvv8AhNtK/wCfXXf/AAn77/4zR/wm2lf8+uu/+E/ff/Gam2lv66/5/wBalJ2t5f8AA/yOD1bTNbv7PSZ7fTtRaSHRoB4gBVkfUIcqTbrlcvKMSE4wQGK5y4x23jSC5uvBTLpVvcSRb4GntbdSkslqJFMsarwcmPcNvBPTrxU3/CbaV/z667/4T99/8Zo/4TbSv+fXXf8Awn77/wCM1bd/vv8Ajf7v+D3JirW9Lf1/XbscknhnTNTXxGdM8NiHQnsFNvZXOmmBXvVWTMsdvIoKttZF3BRkjjOK7DwXo9ronhDTbe006HT3a2ie4iigERMvlqGLAAfNxyTzxTP+E20r/n113/wn77/4zR/wm2lf8+uu/wDhP33/AMZpLS/n/wAH/P8ABA9Wn/XT/I878HaPeWniHSJLbSxBdJJci6ePQZrJ1Vg+GmuX+W4G7ZhVAJJB/hNaui6Yy+Fbm203Rb+z8Z/2bPFdai9s8Pm3BGCzXDYWXc/KkFsDn5a6/wD4TbSv+fXXf/Cfvv8A4zR/wm2lf8+uu/8AhP33/wAZpW93lKvrc4Xw9pFrbR3ctxYt9n/sqSK+0qz8K3dmb37vDu7sssgOQCMk72Occ1v/AA607V9Mub2HxTBcS6o0EBjvZD5iG3C4WDzAoG9G3bu7Ft3Q8bf/AAm2lf8APrrv/hP33/xmj/hNtK/59dd/8J++/wDjNVfW/wDXX/Mm2lv6/r+uhyPi7wnDqkXjS9l0CO8vyIfsE7WQklOIU/1TYJ4Ofu981T8TWdnea14uhfRL3UNWZIU0qeG2eUW85t02lXXIgYNtJc7AQB8x24Hdf8JtpX/Prrv/AIT99/8AGarW/ibQbW8urqCw11Zrxladv7BvzvKqFHBiwOABxU2KTs7nJa7pEk8/iCHWtGvdR16dYxoWoRWbyLD+6UIUnUbbcrMHZslOoPIxUPiefT/EWpaomp6Rdaq2m6TJYWsi6LPco962fMKMsRUFSiDdkck9q7z/AITbSv8An113/wAJ++/+M1WsvE2g6ekq2dhrsazTPPIP7Bvzl3OWPMXc9ulDV9P67fk3fzsJaWt/XX80vlc4jWZP+Eh0bTooNFW8gXSfKgmu9EuL7dcKTG8SoGRbZ1ZcGR8ZyOcLU2uaXrupeFy1jaXUepf8IqIdQluLZ5DdFl+WALwTKCHO7J27sFW3DHY2HibQdMtfs1jYa7FF5jybf7Bv2+Z2LscmLuzE1Z/4TbSv+fXXf/Cfvv8A4zVPW/n/AMH/ADCPu28v+B/l/WhQ8I2WoWfiLVDrkLy3kltbGO+jhMcDxAMBEqknYytuLAsxO8HgEAdhXPf8JtpX/Prrv/hP33/xmj/hNtK/59dd/wDCfvv/AIzQ3cSVkdDRXPf8JtpX/Prrv/hP33/xmj/hNtK/59dd/wDCfvv/AIzSGdDRXPf8JtpX/Prrv/hP33/xmj/hNtK/59dd/wDCfvv/AIzQB0NFc9/wm2lf8+uu/wDhP33/AMZo/wCE20r/AJ9dd/8ACfvv/jNAHQ0Vz3/CbaV/z667/wCE/ff/ABmj/hNtK/59dd/8J++/+M0AdDRXPf8ACbaV/wA+uu/+E/ff/GaP+E20r/n113/wn77/AOM0AdDRXPf8JtpX/Prrv/hP33/xmj/hNtK/59dd/wDCfvv/AIzQB0NFc9/wm2lf8+uu/wDhP33/AMZo/wCE20r/AJ9dd/8ACfvv/jNAHQ0Vz3/CbaV/z667/wCE/ff/ABmj/hNtK/59dd/8J++/+M0AdDRXPf8ACbaV/wA+uu/+E/ff/GaP+E20r/n113/wn77/AOM0AdDRXPf8JtpX/Prrv/hP33/xmj/hNtK/59dd/wDCfvv/AIzQBQ+Cn/Hv44/7HHUP5R16ZXl/wMnW503xpPGJFSXxdfOokjaNgCIzyrAFT7EAjvXqFAgooooAKKKKACiiigDzb9oP/khPiH/t2/8ASmKutrkv2g/+SE+If+3b/wBKYq62gAooooAKKKKACiiigAooooAKKKKACq97f2mmWb3eo3UFpbRjLzTyCNF+rHgVYrz/AOLunaXqug6dbanrdjpE0d6txaNqSBrWaRFP7uUN8u0gnr+RpMa1Oom8XeG7exgvbjxBpUVpcEiG4e9jWOUjqFYtg49qlsPEmh6rBPPpes6fexWwzPJb3SSLEP8AaKk46Hr6V5No40TxH8J/Fyz+G9Djn0kXWJ9OjWWzebyAfNtyw+TgLwvoD3qnr2maTpnwb8EytY29npV9c6c2uyW8IjM8Xl5JlKAFhu5JPOfeqt/7b/5MLpf1/A9n0vxBo2uFxour2Go+X9/7JcpLt+u0nFKdf0ddXGlNq1iNRPIszcp53TP3M7unPSvJLweGm+K/hhfhcum/bI4Lo3raTs8nyfLwvmFPlJ3Y685xntUPww/4V63hPTm8QHTj4p/tAm4N4R9uN353y4/jxnb046570lrr/W/T+t9BS0/r8/621PYB4h0U6et8NXsDZtL5K3H2lPLMmcbA2cbs8Y65q7PPFbQPPcypDFGpZ5JGCqoHUknoK+dvhsTDr/hyXxTh9Ee7vE0ggYjiv/NP+tB6sV+4ex6DOTXoXxskjTQNCXUt39iPrVuNUIzt8jk/NjnbnH6e1C1jF97fjb/h/SxT0k12v+F/69bncWPiXQtUt559M1rTryG2XdPJb3aSLEMZyxBOBgd6pJ488ISOEj8V6I7Hoq6jCSf/AB6vOHtvCV38ZfDMXgCPS5YzbXQ1dNLVDA1uUwokCfIcscYPPIz2rR8I+FvD6/GPxpEuhaaI7IWDWqCzjxbloiSUGPlJPJximlf8fwdhdH8vx/r7j0ca7pJtrS4GqWRgvnEdrL9oTbcMeioc4YnB4Gav1474G8MGD4ranpM9wJtL8JMZdLtyP9Ubsb+fXYAyj65r2Kjon3DVNrsFFFFIAooooAKKKKACiiigAooooAK569/5KXov/YI1D/0dZ10Nc9e/8lL0X/sEah/6Os6AOhooooGFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUARS3VvDNDDNPHHLOSsSO4DSEDJCjvgAnjtSQXdtdPMltcRTNbyeVMsbhjG+AdrY6HBBwfUVyfjRL6TxR4TXS7i3tro3dxskuYGmQf6O+cqHQnj/aFYml6xPaaJpujWk76Zf3euTWGqXkjJNJHPh5WZSyhC0mF25XADgBTgChav+v6/pA9P69f8j02ivPZvEGs2ui6/p8eqNdX1rqcOnWGomGLzJGl8s4ZQBGWTzGBwoGF5XIOb+g61rFtFrEE8OpeJHs9Ve1jeMWscixiNGG7JiQ8segzQtdu1/wAv80D0/r1/yOzorzHxV4j8RWWsa5PYT6nDa6XDBMBGlmbWEFNz+fvzMR1z5WTjpzVnV/EOrTQ+KdSstc/s4eHtvkWQhiZLn9ysoMu9d+JC2wbGTpwSaV9L9h7tLuei0VznizV73T/A8mpWbG1u/wBweVDbN8iBhhh6MR0rG8Q+JNVsU8am1uvLOl21tJafu0PlM6kseRzkjvmm9HYlO9jvKK4iaLWpfiEdMi8U6lDaSae16sSwWhCN5oUICYc7MHud3+1WL/wlXijV9MfT9FuM63o9jOdVWKKNme5VvLjUKQQN+15ABjIC9jQtVf8ArS9/yH/X32t+Z6jRXn1/48uhqmpvpcN4YbHQJb0Wt7p8tsWnV+D+8RWIxwdpx+NU49b8X2nh7UdRcam9r/Ys90t5qC2G2KdU3RmIQMSUbLcOG+6vPJyr2V/66/5DWrSX9bf5nptFcp4R1rUNZ1K9OpO9qYba22adKqeYm5STMzJkHecgBWIATnDZAq6h4o1ey1zxFa22lX+ow2kMTQSWxtlW3JiLHd5kiMeeejf0pz9zcUfe2O1orzXVvFOpyaLZ/YtQ1MXkWiR6hdf2fBZrs3IT5krXJC7CVb5YxkYOTyBXR3Hia7g+FjeJkt45LtdJF75IB2F/K349cZ/Sm1a/l/wf8hRfNa3X/gf5nT0V5zqHiDWvDEhaLV28SLPolxqASWGJfKeIKVZTEq/u33kYbcflGG650Z4dVi8N3U8Xja6nuBYi9Ro4LXcMIxyo8ojymOOoLfL9/rUyfKm30/4P+THH3rW6/wDA/wAztaK88GqarFoWg239tazf6nqtv9sK2ltZCfaI0LBWkVIVRS3QhnO4YOAapQ63rur+D/DerQ+IL2ylvr9NPnWCK1ZZF810MnMbgOQo+6dmegxVNNO3nb9PzEpJx5vK56hRXnMniPW4PE19or306WsGp2VsNVnjhwitDGzRkKv+skY4yUCjfwQdq1Hf+L9Sj8RWlzY3eozafLrS6aQ0NrHZt8xRkALG4LqQfm+6SpONtJatW6/8D/NDeiu/X8/8j0qivP8ATPE2qXHxEk8OzaijWNvczPHeiIA3RCKfsn3du6PeSSDuIVR134uePdd1fSL3Sl0SUrsWe+u4RGrefbwhC8eSCQSH4I5zijon3Dq0dpRXnNn43u217Ub+71COPQJ9OubrTm8gSIqQMitKduGfcWLY3crjGOtQ6d4o1uHVdRsrmbUyG0KTUYTqaWYeNlOFZBbk/Ic9JMn5frSbsrvtf7r/AOTGtX+H5f5o9MorgxqWo2HgrSJrjXdUvdQ1owCIR21qZi7R72SLKpEvAJzJu4BHUiq2j67rWreHb2H7Zqa3tlq0loohFh9unRVDFTuP2fcpbkr2TpnJqmmm12/4H+ZKaaT7/wDB/wAj0WivNrTxxfWmneH5tQuHu5bia8tpreKJPNuJo2KxxcAL5gPDFMJkMc7Rmls/FPiWHRTNqH+l36eIxZSW1kkYzHtBMSFyoIBONzEE4zkdKX2rf1ul+q/qw3or/wBaJv8AQ9IorgpvGF/G3iJ7+K80hbVbSO1gmhgmlV5Sy/LskKEsdoG5sA8kYzm14I1rU7zXNd0nVXvnNh5Dp/aP2X7QnmKxKt9m/d4+UEfxfNz2oFfS52dFFFAwooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigDj/gp/wAe/jj/ALHHUP5R16ZXmfwU/wCPfxx/2OOofyjr0ygQUUUUAFFFFABRRRQB5t+0H/yQnxD/ANu3/pTFXW1yX7Qf/JCfEP8A27f+lMVXP+Ff+Df+hS0L/wAFsP8A8TQB0NFc9/wr/wAG/wDQpaF/4LYf/iaP+Ff+Df8AoUtC/wDBbD/8TQB0NFc9/wAK/wDBv/QpaF/4LYf/AImj/hX/AIN/6FLQv/BbD/8AE0AdDRXPf8K/8G/9CloX/gth/wDiaP8AhX/g3/oUtC/8FsP/AMTQB0NFc9/wr/wb/wBCloX/AILYf/iaP+Ff+Df+hS0L/wAFsP8A8TQB0NFc9/wr/wAG/wDQpaF/4LYf/iaP+Ff+Df8AoUtC/wDBbD/8TQB0NVNR0uw1e0Nrq1jbX1uSGMNzCsiEjocMCKyf+Ff+Df8AoUtC/wDBbD/8TR/wr/wb/wBCloX/AILYf/iaANWHSdOt9LOm29haxWBQxm1SFViKngrsAxg+mKeNPshpw08WkAsljEQtvKHlhAMBduMYx2rH/wCFf+Df+hS0L/wWw/8AxNH/AAr/AMG/9CloX/gth/8AiaANHS9B0fQ1kXRdKsdOEhy4tLZIt312gZpp8O6KdW/tU6PYf2jnP2z7Knnf994z+tUP+Ff+Df8AoUtC/wDBbD/8TR/wr/wb/wBCloX/AILYf/iaAND/AIR7Rf7N/s/+yLD7F5nm/ZvsyeXvzndtxjOec+tXLi2gu7eS3u4Y54ZF2vHKgZWHoQeCKw/+Ff8Ag3/oUtC/8FsP/wATR/wr/wAG/wDQpaF/4LYf/iaOlgK1z8OPDMl1ZXWnadHo11ZTCWKfSlW2Y8glW2jDK2ACCOnpXRQ6fZ297cXkFpBFdXW3z50jAeXaMLuYDLYHAz0rG/4V/wCDf+hS0L/wWw//ABNH/Cv/AAb/ANCloX/gth/+JoA2YdPs7e9uLyC0giurrb586RgPLtGF3MBlsDgZ6VYrnv8AhX/g3/oUtC/8FsP/AMTR/wAK/wDBv/QpaF/4LYf/AImgDoaK57/hX/g3/oUtC/8ABbD/APE0f8K/8G/9CloX/gth/wDiaAOhornv+Ff+Df8AoUtC/wDBbD/8TR/wr/wb/wBCloX/AILYf/iaAOhornv+Ff8Ag3/oUtC/8FsP/wATR/wr/wAG/wDQpaF/4LYf/iaAOhornv8AhX/g3/oUtC/8FsP/AMTR/wAK/wDBv/QpaF/4LYf/AImgDoaK57/hX/g3/oUtC/8ABbD/APE0f8K/8G/9CloX/gth/wDiaAOhrnr3/kpei/8AYI1D/wBHWdH/AAr/AMG/9CloX/gth/8AiawrvwP4TX4haRbL4Y0YQSaXfSPENPi2syy2gViNuCQGYA9tx9TQB31Fc9/wr/wb/wBCloX/AILYf/iaP+Ff+Df+hS0L/wAFsP8A8TQM6Giue/4V/wCDf+hS0L/wWw//ABNH/Cv/AAb/ANCloX/gth/+JoA6Giue/wCFf+Df+hS0L/wWw/8AxNH/AAr/AMG/9CloX/gth/8AiaAOhornv+Ff+Df+hS0L/wAFsP8A8TR/wr/wb/0KWhf+C2H/AOJoA6Giue/4V/4N/wChS0L/AMFsP/xNH/Cv/Bv/AEKWhf8Agth/+JoA6Giue/4V/wCDf+hS0L/wWw//ABNH/Cv/AAb/ANCloX/gth/+JoA6Giue/wCFf+Df+hS0L/wWw/8AxNH/AAr/AMG/9CloX/gth/8AiaAOhornv+Ff+Df+hS0L/wAFsP8A8TR/wr/wb/0KWhf+C2H/AOJoA6Giue/4V/4N/wChS0L/AMFsP/xNH/Cv/Bv/AEKWhf8Agth/+JoA6Giue/4V/wCDf+hS0L/wWw//ABNH/Cv/AAb/ANCloX/gth/+JoA6Giue/wCFf+Df+hS0L/wWw/8AxNH/AAr/AMG/9CloX/gth/8AiaAOhornv+Ff+Df+hS0L/wAFsP8A8TR/wr/wb/0KWhf+C2H/AOJoA6Giue/4V/4N/wChS0L/AMFsP/xNH/Cv/Bv/AEKWhf8Agth/+JoA3JbW3mmhmmgjklgJaJ3QFoyRglT2yCRx2qtcaLpV5DdQ3emWc8V4ytcpLbqyzkYwXBHzEbRjPoPSsz/hX/g3/oUtC/8ABbD/APE0f8K/8G/9CloX/gth/wDiaANO20TSrNLRbTTLOBbLd9lEVuiiDd97ZgfLnvjrVmG1t7ZpWt4I4mmfzJTGgXzHwBuOOpwAMn0FYf8Awr/wb/0KWhf+C2H/AOJo/wCFf+Df+hS0L/wWw/8AxNAFy88MaBqGpLqF/oem3V6pUrczWkbyDb93DEZ47elS3Wg6RfalBqN9pVjc31vjybma2R5IsHI2sRkYJJ4rO/4V/wCDf+hS0L/wWw//ABNH/Cv/AAb/ANCloX/gth/+JoA2r2xtNSs5LTUbWG7tpRiSGeMOjjryp4NYy+AfBysGXwnoYIOQRpsPH/jtJ/wr/wAG/wDQpaF/4LYf/iaP+Ff+Df8AoUtC/wDBbD/8TQBt/Zbf7WLryIvtAj8oTbBv2Zzt3dcZ5xWbougR6RqGr3vmLLc6pd/aJXEezChQiJ1OcBevckniq3/Cv/Bv/QpaF/4LYf8A4mj/AIV/4N/6FLQv/BbD/wDE0bAbf2W3+2fa/Ij+0+X5XnbBv2Zzt3dcZ5xWbbeEvDllJO9n4f0u3e5jaKdorKNTKjfeViByD3B4NVv+Ff8Ag3/oUtC/8FsP/wATR/wr/wAG/wDQpaF/4LYf/iaANmOxtIrr7TFawpP5Qh81YwG8sHITPXaCScdKd9ktt87/AGeLdcACZtgzKAMAN68cc1if8K/8G/8AQpaF/wCC2H/4mj/hX/g3/oUtC/8ABbD/APE0bgXrrw3od81q17o2n3LWahbYzWqOYAMYCZHyjgdPSr8MEVtbxwW8SRQxqESONQqooGAABwAB2rC/4V/4N/6FLQv/AAWw/wDxNH/Cv/Bv/QpaF/4LYf8A4mgDR0zQdI0Tzf7G0qx0/wA4gy/ZLZIvMI6Z2gZ6nr60lh4e0XSoJ4dL0iwsorn/AF8dvbJGsvGPmCgbuCevrWf/AMK/8G/9CloX/gth/wDiaP8AhX/g3/oUtC/8FsP/AMTQBoX3h/RtUs4LTU9Isby2t8eTDcWySJFgYG1SCBxxxUy6Xp6W8UCWNssMMvnRRiFQqSZJ3gYwGyScjnJrJ/4V/wCDf+hS0L/wWw//ABNH/Cv/AAb/ANCloX/gth/+JoA1pdK06dZxPYWsouXV5w8KnzWXG1myPmI2rgnpgelVj4a0I6m+pHRdON9IwZ7r7InmsQQQS+MkgqD17D0ql/wr/wAG/wDQpaF/4LYf/iaP+Ff+Df8AoUtC/wDBbD/8TQBqppGmpFDEmn2qxwTGeFBCoEchJJdRjhiWbkc8n1qZ7S3luFnkgieZUaNZGQFgjYLLnrg7Rkd8D0rE/wCFf+Df+hS0L/wWw/8AxNH/AAr/AMG/9CloX/gth/8AiaANaPStOijhjisLVEt4jBCqwqBHGcZRRjhTtGQOOB6VWsfDOg6YjrpuiadZrIrI4t7SOMMrY3A4HIO0ZHfA9Kpf8K/8G/8AQpaF/wCC2H/4mj/hX/g3/oUtC/8ABbD/APE0Aal3o+mX+mrp19p1pc2KhQtrNArxAL93CkY47elQP4Z0GTTTpz6JpzWJYObU2kZiLAAA7MYyAAAfQCqX/Cv/AAb/ANCloX/gth/+Jo/4V/4N/wChS0L/AMFsP/xNAGtDpWn2yWqW9jbRLZqVtljhVRACMEJgfKMccUo02xBJFlbgmf7QcRLzL/z06fe/2utZH/Cv/Bv/AEKWhf8Agth/+Jo/4V/4N/6FLQv/AAWw/wDxNHmBrXGl2F2lyl1Y2063aBLhZIVYTKOgfI+YDJ4PrTNN0XS9GjKaRptnYIwClbWBYgQCSB8oHdmP4n1rM/4V/wCDf+hS0L/wWw//ABNH/Cv/AAb/ANCloX/gth/+JoA6Giue/wCFf+Df+hS0L/wWw/8AxNH/AAr/AMG/9CloX/gth/8AiaAOhornv+Ff+Df+hS0L/wAFsP8A8TR/wr/wb/0KWhf+C2H/AOJoA6Giue/4V/4N/wChS0L/AMFsP/xNH/Cv/Bv/AEKWhf8Agth/+JoA6Giue/4V/wCDf+hS0L/wWw//ABNH/Cv/AAb/ANCloX/gth/+JoA6Giue/wCFf+Df+hS0L/wWw/8AxNH/AAr/AMG/9CloX/gth/8AiaAOhornv+Ff+Df+hS0L/wAFsP8A8TR/wr/wb/0KWhf+C2H/AOJoA6Giue/4V/4N/wChS0L/AMFsP/xNH/Cv/Bv/AEKWhf8Agth/+JoA6Giue/4V/wCDf+hS0L/wWw//ABNH/Cv/AAb/ANCloX/gth/+JoA6Giue/wCFf+Df+hS0L/wWw/8AxNH/AAr/AMG/9CloX/gth/8AiaAOhornv+Ff+Df+hS0L/wAFsP8A8TR/wr/wb/0KWhf+C2H/AOJoA6Giue/4V/4N/wChS0L/AMFsP/xNH/Cv/Bv/AEKWhf8Agth/+JoA6Giue/4V/wCDf+hS0L/wWw//ABNH/Cv/AAb/ANCloX/gth/+JoA6Giue/wCFf+Df+hS0L/wWw/8AxNH/AAr/AMG/9CloX/gth/8AiaAKHwU/49/HH/Y46h/KOvTK8v8AgZbw2mm+NLa1hjggh8XX0ccUahVRQIwFAHAAHGK9QoEFFFFABRRRQAUUUUAebftB/wDJCfEP/bt/6UxV1tcl+0H/AMkJ8Q/9u3/pTFXW0AFFFFABRRRQAUUUUAFFFFAHN+P4fEFx4H1CLwe5TVmVfJKuFYjcNwVjwGK5APauF8G2UXifS9T0J/FfjWwvLd4ppbW/uPKvrY4YHE2354m44xxtB4zXpPiLw/beJtHfTrya6t1LrIk9pMYpYnU5DKw6Gs7wt4F07wrNd3UN5qOp394qpNfancmeZkXO1d2BgDPYfypdGhvZWPKND1DWfD/wRufG6eI9av8AVLpWtUj1C8M9vbk3HliVUYcMAM5JI68Y4rd1rS9a+HM/h/V4PGWtaxJe6nDZ3tpqM4lhmWTO4xp/AR1ABP6c9zYeANEsvAR8ISpNeaUwcMLhxvbc5fqoGCGPBA4wKzNG+E2jaVq9nqFzqetaw2nnNlDql750VqegKLgYwOmc4wPSruua/mvu7f138hS628/+Ac74fsNc+I19rety+MNW0c2OqS2VjZafKFhhWMjBljI/eE5yQf5HAwYvE+u6h461XwedXvrGDUfEMsP9ptOw8mKNQ32eA87Hbt0Azxknj0DUvhLomoa5ealBqOtaaNQfffWmn3xhgu27l1Ayc5OcEdT61PcfC/Qbqw1i1mkvCNVvhqBlEqiS2nH3WiYL8uMd89TUR6X6L/L87P8AUHre3f8Azt/X3Dvibr934Q+G19f6TJsuoxHBDLKd/ll3VN5LZyQDnnPPWuQ1jS9a+HOoeG9StPF+tawNR1OGwvbTU7jzo5RJnLRrj5MEcYz259fTtV0Gy13w7Nousq17azxCObzDhnxj5srjDZAORjmuAuvg7NYSWOo+HfEupXWpaXIHsYden+1WsYwRsChQUGMYIyRgYprSV33X3dv67+Qbxsuz+/p/X+ZlSeELw/GJfD3/AAm/i8WTaSdRONWO4Seds2/dxsx2xn3pWPidPHbfDwalqRtpL4asup/an81dP6mHfnd/rAE69K9LXwzbHxjH4nlkm/tBdP8AsBjVh5WzfvJxjOc+/TtSnwzZnxqvifzJ/tq2BsBHuHl+Xv35xjO7PvjHanHTl8r/AJ3X5L5BL3rv0/Kz/U5b4yS6inhPTrfR9SutMuLzVre2+0WszRuA5I6qQce3tXEax451rXfhvpmj2V9eWOvQQ3T6vcQSFJYRZod2WHILvs+uSK9h8R+GrPxPbWcN/JPGtneRXsZhYAl4zkA5B49e/vWQvwz0FNY8R6lGblLjxFbtb3WHXEasuGMfy8E9TnPIqLOzXfX8Fb8b3Kurp/1u7/haxx/hu91PXfFOi6bd6xqCxX3gaOaRo7p1ImZ1HnDB/wBZz97rVP4b+Jtb8X+L7TSNW1dlj8NQSeY1vcOv9sOJDEsp/vxqFGfVjnviu7T4baXE0T29/qUEkWhjQ0kjlQMsGc787P8AWcdentUtv8OtFsrrw/c6c11ZzaDEYLd4HUedGR8yS5U7gTk8YOSSMVq2ua/TX85Wfyuv6SI+zb0/JXXz/rcyviXbeIWCXekT3MVlb2M5Mlvfi2FvcZUxzS5dd8SgNlfm6/dNM8LeL4dZ8U+fqupT28sw+y6fp3lSpFjaH3yttCGZ1AcITuVCOMk12GtaFba/HbQag8rWsM6zvbKR5dwV5VZAQSVDYbAIyQM5HFZp8D6cfFX9ufabvd9p+2G03J5Jn8ryvM+7vzs4xu298ZqI6b/1/Wv9bOWu39f1/Xn0tFFFABRRRQAUUUUAFFFFABXPXv8AyUvRf+wRqH/o6zroa569/wCSl6L/ANgjUP8A0dZ0AdDRRRQMKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAK868SRy6prXiyb7fqMMWj6TGIFtNQnt1S4KSyEkRuoY7TH97PavRD0OOtcFo3gPU5vD0w1nxLrFte6uhk1SGNbMhpGQKwDeQxAAAAw3AHFTJNppdvx/r9CotJ6l238Tao0Frp2iabHql9b6XBd3bXd6bcfOpCANscs7FHPIAGOTzS3njqSTStGvNA02O8bVraS6WO7uvs/lRxoGbJVHyckLwMZPWodI8F3jaXazXuranpmqJbNZXEto8GbiBJG8oOCjKGCnhkCsNx59Ni18IabZyHyDMsaWP2C3h3DZawkDcE4zliFJLFjkD6VdR3u4/1v8A8D8SIaJX8v0/4Jz+q/Ew6dpun3f2LT7cXemLqGdT1P7Kj7hnyYm8tvNcdxhcbl9eOnOu48F/2/8AZ/8AmH/bfI3/APTPft3Y/DOPwqpbeC9Ot4wvnXUu3Sl0qIyOp8qEDDFfl4Zvl3HvsXgYrQOiWx8Mf2Fvl+y/Y/se/I37NmzOcYzj2/ClPaXL8vx/4A47x5vn+H/BM5PFm+9jt/sWN+j/ANqbvN6cgeX09/vfpWZ/wmeuzzaCLHQdOkj1y3E1u02quhTEQkYMBbt0yQCCc47U8fDxlmWUeLNd3rZ/YQdlnxBnOz/j39uvX3rZt/C9lbf2F5ctwf7DiMNtuZfnBj8v5+OTgdsc09Nf66v9LE+9p/XRfrczrfxq00VpE+nbNRm1WTTZLTz8+UU3M0m7byPLUOOBncB703wn46j8X/Y2060RontPPvJY7jetpISAsJIXlz8xI4IAGR8wpbHwuy/E/VfEU0TxQvaRQQDzQVkcj95LtB4O1Y0ycHCntVzSPB9hokmmSWM90G06zayXcynz4yQw8z5eSpGQRjGW9aUfP+tH+tn8yn1t/X9bfINU8ZaTofiNNL1q9s9OjktPtCXF3dpEHO/bsAbGT36/hWdJ49Q+FbHWoU0yGK8lkRJdQ1VLa3AVmUfvdrFiwXICqRjOSMDPSf2XB/b39rbpPP8As32bbkbdu7dnGM5z71it4GtUXT2sNT1CwudP88Q3MBiZysz73UiSNlIzj+HIx165Wtl3/wCC/wDgB9ry/wCAv+CX/DfiKDxF4Xt9ajVYo5UYuqv5iqVYq21gPmXKnBwMjBwOlY9j44uZ20m8vtIS10fWmK2N0t35koyhkQyxbAEDIrH5WfBwDjPG7oWhWugaHHpVo801ujSHNw+9m3uWOTjnlj1/HNZmm+B7LTprMG/1C7s9OLGwsLl0aG1yCo24QO21SVXezYB49ab3dv6/rp+ILbX+u3/BG6X4j17W9Oj1HTtAtfsd5F51jJPqRRmUkbTKoiOzcpLDb5nYHGcinYeNtSn8Itr1/pel2EDvsiabWNsa4dkZpZHiXYMqANocncOBWvofhaPQZEW11TUZbKFWS2sZpE8m3UnOF2oGYDoN7NgdKrv4Isf7D0/Tbe9vbZtNuWurW6jaMyxyEvk/MhQjEjDBU8e/ND8gXmYzfEa8m8I3eu6Zpmm3yafcPb3Yi1UmMkFdrQyLCRICHGchccjmrV/49n0jUpNJ1PTbX+2DYpcWtnbXxkN1I8joIkzGrHAUMzbflBORgZN9PA9iNA1PSpr2+uE1S4+0XM8siGUv8mSMKFAOwcYwMkDAwBPq3hHT9ZudQnu5LgPf2K2L+WwHlqrs6unGQ4Z8g89BxR1X4/d/mC63/rX/ACMnxT8QF8LXfl3kWlqkaRvJFPqyR3MiscEwQ7SZAOfvFMkED1q1e+MpLPxSvh46W739y8bWOJT5c8B/1krNt+TZhsrzn5Mfe4ZqXw9tNSbUQ+sarDBqgT7bBC8QWd1UKHJMZYHCrkKwU45GCQbN34I0281OXU5prr+0WuIpobwOvmWwjGFjj+XAQgvkEHO9s9sC3V/6/r8uzFrbQl8Y+JJfC2iJe22nnUZ5J1hjtll8tnJyTg4OSACcd8YqnF46t7rxhY6PY23n2t5biUX3m4AdozIqBcckoNx5GMjg1uajpFvqdzp81yXzp9z9piVSMM+x0+bI6YcnjHOKx9O8A6PpdvZQ2rXO2yvZL2ItICdzo0ewnH3AjbQBjAVeeORdb/1/W435f1/Wi+ZU0/4gR3fi+DQ5k00PctKiJa6qlxcQtGMkTRKuI+A3R2wRjvmptJ8W6lqHhu51250mytrJVdocal8x2uVJkLxosajaWJ3NgdieKdpXgG00q70yRNV1O4h0kv8AYbWZ4vLgVlKlfljDMMHgsSRjryc2X8Gac/hBfDvnXItkk82OYOvmo4l81WB27eG7EEccg0ntoHUy9L+II1TT9YkgTSJp9L8tnkttYWSzKP8AxNcFBt24bcNhIAGM5qbS/HX2/TILtrO3Ky6oNP8AOtbzzrdwRnzY5di71HQ/KOQwzxk27XwctrLqFyNc1aS/v1iEl6zxCRTGW2lVWMIOGwRtKnuMkkwTfD7S7zTprTU7q+vjc3qXt1NNIivcOqhArBFVQm0BSFAyPqafX7vzV/wv/Wy6ff8Ak/1sVE+JNtNY69fQ2R+xaSYTHPLMEW5SQkeYOPlTgkE/eGDwCDWlZ+N9K1TXJNP0O6tNWWKxe7eSxvI5MFWCiPg4BOepYDj8amuvCGn3TaoWeeMamsCyrGVAQQ/dCDbx75z+FTar4ZsNZuLiW+81hcWElhJGr4UxuQW7Zzx1zSd76f1o/wBbDW2v9a/5GR4Y8eQ+INfl0knS3lW2+0o+l6oL1QoYKVkIRdjcrx8wPPPHN3VPEWoJrU+leHtKh1G6tbZbm5+03htkVXLBFUhH3MdjdQAMcnml0jwjHpesR6nNq2o6jcxWhs4zdmIKsRZWwFjjQZBXr1OeScDD9V8Kx6jqralaapqGk3UtuLaeSxeMefGCSoYOjAFSzYZcMNx5py2Vv63t+gLrf+tr/qY48carez6IdF0SyntNciMlpJdak8Lrtj3sJEWBwCOQMM2cdq2PF3iT/hF9IgvDHaMZrlLfdeXf2aGPdn5mk2tgDHpU0XhjTrebRmtUe3j0ZHS1hRvl2smwhsgk8d89euak13RE120gia8ubKS3uEuIp7XZvV1zjh1ZSOe4olvp3/AF5nP2XxAbUNJgks7C2ub+61BtPtkt77zLWZlUuZFn2ZMYUNkhCcqRg9adrfjqXw+mn22rWum2GpXplO2+1VYbVUjxlvPKEnO5cLsB5OQMZq1/wgtmbWTfqWoNqD3q339ploxOsyqEDABPLxsGzbswQTkE81PN4SWZLOUazqialaGTZqQeJpmEn31KtGY9pwvAQAbRjFH9fh/mH9fi/wBLGOfibZxaBY65cWZbTbiSW2nntJvtHlXCEhUXaP3iOVYK4xklMgbuOkudaOl+FJda122Nobe1Nxc28T+aY8LkqDgbj27DNUrzwbZ6stoniG7utZjto5UEd4IgkjSDBdljRRuCkqCAMAnjPNX10K1fwz/YWoSTahaNbG2la6fMkqEY+ZlA5x3GD360PZ/1/X/Dedxbq+xhS+OLnR5HHizSE05GsJb+FrW7+07liAMiMCibXAZcY3Kcn5uOZ5te8TwaLcX83hyxjaGH7QEbVWwU2kspIhyJBgcAFTk/PxzJb+CLPD/2xf3+ubrRrJP7QdD5ULgB1HlomS2BljluBzVix8MfZdNubK71rVNRjntvsoN3JHmKPBHyhEUE8/eYMeBzSleztv8A8P8A8D+t3HdX+f4f8H+tsuTxpf2vhix1XUrLRtPN/teI3et+VAqMgYBpGiDbzk/KqMPlJ3Cqx8falc6Fo2raRo1hdW2qTpafvdTZNkxdkOCsLBo8rkPkEg/drYufB1vKuktZ6lf6fc6Tbm1t7m3MTOYyqgqwkRlOdinIUHjjFLbeDNPtdF07S457toNPvRexO8gZ2cSM+GJHIyx9/fvVO19Nr/h/w34kK/L52/H/AIczh48f+3LjQvsED61Bc28H2OG83ZSSNHkmzsBEaBiNxXkgDgsBSyeOblVOoppCPoC3/wBga8+14nDeb5JcQ7MFBL8v392Mnb2Ojd+DrC7ub24M91HPd3sF75kbKGhlhVVXZlTgEJgg5yGYd6gHgaxF03+n3501rv7adKLp9m87dv3fc8zG/wCfbv27u2OKS6X/AK2/4P8AW1Py/rf/AIH9b5Y+JA/4SptINvprY1H7B5Ueqbr09vM+z+X9zuTv4AJ7Yru65eTwNbzXsrzavqT2U18L99PzCITKGDA7hH5mAyg439vTiuooj8Kvv/wF+twfxO23/Bf6WCiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigDj/gp/x7+OP+xx1D+UdemV5n8FP+Pfxx/2OOofyjr0ygQUUUUAFFFFABRRRQB5t+0H/wAkJ8Q/9u3/AKUxVc/4RvVf+h113/vzY/8AyNVP9oP/AJIT4h/7dv8A0pirraAOe/4RvVf+h113/vzY/wDyNR/wjeq/9Drrv/fmx/8AkauhooA57/hG9V/6HXXf+/Nj/wDI1H/CN6r/ANDrrv8A35sf/kauhooA57/hG9V/6HXXf+/Nj/8AI1H/AAjeq/8AQ667/wB+bH/5GroaKAOe/wCEb1X/AKHXXf8AvzY//I1H/CN6r/0Ouu/9+bH/AORq6GigDnv+Eb1X/oddd/782P8A8jUf8I3qv/Q667/35sf/AJGroaKAOe/4RvVf+h113/vzY/8AyNR/wjeq/wDQ667/AN+bH/5GroaKAOe/4RvVf+h113/vzY//ACNR/wAI3qv/AEOuu/8Afmx/+Rq6GigDnv8AhG9V/wCh113/AL82P/yNR/wjeq/9Drrv/fmx/wDkas/4l+Mb3wX4dtrzToLZpbq8S1+0Xpf7PbBs/vJNnzbeMcev4HD1L4g6/ongSw1nVF0J5Z9VitWurOdpbSW3frKh3ArjkfMeNpPSj/hvy/zB6fn/AF9x1n/CN6r/ANDrrv8A35sf/kaj/hG9V/6HXXf+/Nj/API1cfqXxK1weBfEHjDSrKzTSLZ449J+1RSF7oeYqPM2GGEOTtHB4yffpNX8VX1h4y8IaTDFbtBrYuDcs6tuTy4g42HOByecg8U0m/68rh/wfw3Ln/CN6r/0Ouu/9+bH/wCRqP8AhG9V/wCh113/AL82P/yNXQ0UgOe/4RvVf+h113/vzY//ACNR/wAI3qv/AEOuu/8Afmx/+Rq6GigDnv8AhG9V/wCh113/AL82P/yNR/wjeq/9Drrv/fmx/wDkauhooA57/hG9V/6HXXf+/Nj/API1H/CN6r/0Ouu/9+bH/wCRq6GigDnv+Eb1X/oddd/782P/AMjUf8I3qv8A0Ouu/wDfmx/+Rq6GigDnv+Eb1X/oddd/782P/wAjUf8ACN6r/wBDrrv/AH5sf/kauhooA57/AIRvVf8Aoddd/wC/Nj/8jUf8I3qv/Q667/35sf8A5GroaKAOe/4RvVf+h113/vzY/wDyNWFd+H9SHxC0iI+LtZZ20u+YTGGy3IBLaZUf6PjByCcgn5RgjnPfVz17/wAlL0X/ALBGof8Ao6zoAP8AhG9V/wCh113/AL82P/yNR/wjeq/9Drrv/fmx/wDkauhooGc9/wAI3qv/AEOuu/8Afmx/+RqP+Eb1X/oddd/782P/AMjV0NFAHPf8I3qv/Q667/35sf8A5Go/4RvVf+h113/vzY//ACNXQ0UAc9/wjeq/9Drrv/fmx/8Akaj/AIRvVf8Aoddd/wC/Nj/8jV0NFAHPf8I3qv8A0Ouu/wDfmx/+RqP+Eb1X/oddd/782P8A8jV0NFAHPf8ACN6r/wBDrrv/AH5sf/kaj/hG9V/6HXXf+/Nj/wDI1dDRQBz3/CN6r/0Ouu/9+bH/AORqP+Eb1X/oddd/782P/wAjV0NFAHPf8I3qv/Q667/35sf/AJGo/wCEb1X/AKHXXf8AvzY//I1dDRQBz3/CN6r/ANDrrv8A35sf/kaj/hG9V/6HXXf+/Nj/API1dDRQBz3/AAjeq/8AQ667/wB+bH/5Go/4RvVf+h113/vzY/8AyNXQ0UAc9/wjeq/9Drrv/fmx/wDkaj/hG9V/6HXXf+/Nj/8AI1dDRQBz3/CN6r/0Ouu/9+bH/wCRqP8AhG9V/wCh113/AL82P/yNXQ0UAc9/wjeq/wDQ667/AN+bH/5Go/4RvVf+h113/vzY/wDyNXQ0UAc9/wAI3qv/AEOuu/8Afmx/+RqP+Eb1X/oddd/782P/AMjV0NFAHPf8I3qv/Q667/35sf8A5Go/4RvVf+h113/vzY//ACNXQ1znibxTD4a1TREvrmztLG+nkjuLi7kCBAsTMuGJABLADnPWgB3/AAjeq/8AQ667/wB+bH/5Go/4RvVf+h113/vzY/8AyNTNP8UFNCk1jX1+x21xdMlhCtvIZ5IidseYxlmdsFgqrnBHHBq0ni7RZNButYF2y2dmzJc74JFkhYEAq0RXeG5HylcnII6igCD/AIRvVf8Aoddd/wC/Nj/8jUf8I3qv/Q667/35sf8A5GrQ0bXbDXreabTXmZYJjDKs9tJA6OACVKSKrDhh271T1Dxloul6jNZXs1ykkGzz3SxneKEP90vKqFEHuWGO9AEf/CN6r/0Ouu/9+bH/AORqP+Eb1X/oddd/782P/wAjVLqfjHQ9IvXtb+8dHiCGZ0t5ZI7cOcKZZFUpED1y5HHPStS9vrbT7KS7vJVigjGWc8+wAA5JJIAA5JIAo6XAxv8AhG9V/wCh113/AL82P/yNR/wjeq/9Drrv/fmx/wDkapI/GWhNp15fS3clrBYuiXP2y2lt3h342lkkVWCnI+bGOvPBxF/wnWhfY7i58y+22pXz4/7MufNjVgWDmPy94QhT8+NvB5o2DcX/AIRvVf8Aoddd/wC/Nj/8jUf8I3qv/Q667/35sf8A5GqzpvirStWFobOS4H2zd9nFxZzQGUKoYlfMRcrhgc9D2NNtvF2hXqxtaagkyy3zaejRoxVp1UsUBxjop56cdaOtg6XIP+Eb1X/oddd/782P/wAjUf8ACN6r/wBDrrv/AH5sf/karVh4o0fU79LOyu/MnkWVkUxOocRP5chViADhjjg+/Tmq9z420G1060vpLqaSC8aRbcwWc0zSbM7yFRC20YJ3YxjnNK6tcOthv/CN6r/0Ouu/9+bH/wCRqP8AhG9V/wCh113/AL82P/yNT7vxroVna21xJdTSpdW32uMW1nNO4hwD5jKiFkXnqwAovvGeiWDQiS4uLgT2/wBqjaysprpTD2k3RIwC+5p7BuM/4RvVf+h113/vzY//ACNR/wAI3qv/AEOuu/8Afmx/+Rq2P7QtP7L/ALSWdWs/J88TJ8wMeN24Y6jHPFZ+j+KtJ1y48iwkuRL5QnVLqymtjJGTjevmou4cjlc4yPUUdbB0uV/+Eb1X/oddd/782P8A8jUf8I3qv/Q667/35sf/AJGq/c+INMs9es9Fubry9Qvkd7eEo37wKMt82No4HQnNQQeLdEuI9SeG+Vk0uXybpvLcBHzjaOPnOePlzk8deKPMCv8A8I3qv/Q667/35sf/AJGo/wCEb1X/AKHXXf8AvzY//I1SL4z0Q6Xfag9xcQw6eV+1LPZTRSxbsbSYmQOQc8ELzzjoafJ4s0uKxiupBfqJmZY4Dptz577epEPl+ZtGRltuORzzQBB/wjeq/wDQ667/AN+bH/5Go/4RvVf+h113/vzY/wDyNUs3jHRYtPtL1Zri4hu42ki+y2U877VwGLJGhZMEgHcBg8HnircGv6XcsggvY3EloL1XGdhgPR93TH40AZ//AAjeq/8AQ667/wB+bH/5Go/4RvVf+h113/vzY/8AyNVvT/E2karBp82n3gnj1ISNaMI2AlCfePI4x74z2oufE2kWlrcTz3R229z9kdUhd3abAPlogBZ2ww4UH9DR1sBU/wCEb1X/AKHXXf8AvzY//I1H/CN6r/0Ouu/9+bH/AORq09K1iy1q0a40+R2VHMciSxPFJG46qyOAynocEDgg9CKvUAc9/wAI3qv/AEOuu/8Afmx/+RqP+Eb1X/oddd/782P/AMjV0NFAHPf8I3qv/Q667/35sf8A5Go/4RvVf+h113/vzY//ACNXQ0UAc9/wjeq/9Drrv/fmx/8Akaj/AIRvVf8Aoddd/wC/Nj/8jV0NFAHPf8I3qv8A0Ouu/wDfmx/+RqP+Eb1X/oddd/782P8A8jV0NFAHPf8ACN6r/wBDrrv/AH5sf/kaj/hG9V/6HXXf+/Nj/wDI1dDRQBz3/CN6r/0Ouu/9+bH/AORqP+Eb1X/oddd/782P/wAjV0NFAHPf8I3qv/Q667/35sf/AJGo/wCEb1X/AKHXXf8AvzY//I1dDRQBz3/CN6r/ANDrrv8A35sf/kaj/hG9V/6HXXf+/Nj/API1dDRQBz3/AAjeq/8AQ667/wB+bH/5Go/4RvVf+h113/vzY/8AyNXQ0UAc9/wjeq/9Drrv/fmx/wDkaj/hG9V/6HXXf+/Nj/8AI1dDRQBz3/CN6r/0Ouu/9+bH/wCRqP8AhG9V/wCh113/AL82P/yNXQ0UAc9/wjeq/wDQ667/AN+bH/5Go/4RvVf+h113/vzY/wDyNXQ0UAc9/wAI3qv/AEOuu/8Afmx/+RqP+Eb1X/oddd/782P/AMjV0NFAHPf8I3qv/Q667/35sf8A5Go/4RvVf+h113/vzY//ACNXQ0UAcX8DI3h03xpFJPJcOni6+VppAoaQgR/MdoAyevAA9AK9QrzP4Kf8e/jj/scdQ/lHXplAgooooAKKKKACiiigDzb9oP8A5IT4h/7dv/SmKutrkv2g/wDkhPiH/t2/9KYqufbfGX/QB0L/AMHc3/yJQB0NFc99t8Zf9AHQv/B3N/8AIlH23xl/0AdC/wDB3N/8iUAdDRXPfbfGX/QB0L/wdzf/ACJR9t8Zf9AHQv8Awdzf/IlAHQ0Vz323xl/0AdC/8Hc3/wAiUfbfGX/QB0L/AMHc3/yJQB0NFc99t8Zf9AHQv/B3N/8AIlH23xl/0AdC/wDB3N/8iUAdDRXPfbfGX/QB0L/wdzf/ACJR9t8Zf9AHQv8Awdzf/IlAHQ0Vz323xl/0AdC/8Hc3/wAiUfbfGX/QB0L/AMHc3/yJQB0NFc99t8Zf9AHQv/B3N/8AIlH23xl/0AdC/wDB3N/8iUAHjCx8RX2mxp4Wm0vzdxE9tq0LPBcRkYKtt5Hrx171wMPwi1ZPCv2NrjSo7m412HVJ7W2V47OBE4ZIlIJ59wAeBxiu++2+Mv8AoA6F/wCDub/5Eo+2+Mv+gDoX/g7m/wDkShaO/wDW6f6A9Vb+u36nLN8MLz/hG/EnhKK+hTw5qH77TRljLYylt5j24wY9wBHIPUd81Jofg7xfd+L9I1nxxqOkyJocEkdlFpiSAys67C8hcDBx2HH0rpftvjL/AKAOhf8Ag7m/+RKPtvjL/oA6F/4O5v8A5EoWjv8A12/IHr/Xfc6Giue+2+Mv+gDoX/g7m/8AkSj7b4y/6AOhf+Dub/5EoA6Giue+2+Mv+gDoX/g7m/8AkSj7b4y/6AOhf+Dub/5EoA6Giue+2+Mv+gDoX/g7m/8AkSj7b4y/6AOhf+Dub/5EoA6Giue+2+Mv+gDoX/g7m/8AkSj7b4y/6AOhf+Dub/5EoA6Giue+2+Mv+gDoX/g7m/8AkSj7b4y/6AOhf+Dub/5EoA6Giue+2+Mv+gDoX/g7m/8AkSj7b4y/6AOhf+Dub/5EoA6Giue+2+Mv+gDoX/g7m/8AkSj7b4y/6AOhf+Dub/5EoA6Guevf+Sl6L/2CNQ/9HWdH23xl/wBAHQv/AAdzf/IlYV3d+LP+FhaQzaLownGl3wRBrEpVl8203Et9myCDtwMHOTyMAEA76iue+2+Mv+gDoX/g7m/+RKPtvjL/AKAOhf8Ag7m/+RKBnQ0Vz323xl/0AdC/8Hc3/wAiUfbfGX/QB0L/AMHc3/yJQB0NFc99t8Zf9AHQv/B3N/8AIlH23xl/0AdC/wDB3N/8iUAdDRXPfbfGX/QB0L/wdzf/ACJR9t8Zf9AHQv8Awdzf/IlAHQ0Vz323xl/0AdC/8Hc3/wAiUfbfGX/QB0L/AMHc3/yJQB0NFc99t8Zf9AHQv/B3N/8AIlH23xl/0AdC/wDB3N/8iUAdDRXPfbfGX/QB0L/wdzf/ACJR9t8Zf9AHQv8Awdzf/IlAHQ0Vz323xl/0AdC/8Hc3/wAiUfbfGX/QB0L/AMHc3/yJQB0NFc99t8Zf9AHQv/B3N/8AIlH23xl/0AdC/wDB3N/8iUAdDRXPfbfGX/QB0L/wdzf/ACJR9t8Zf9AHQv8Awdzf/IlAHQ0Vz323xl/0AdC/8Hc3/wAiUfbfGX/QB0L/AMHc3/yJQB0NFc99t8Zf9AHQv/B3N/8AIlH23xl/0AdC/wDB3N/8iUAdDRXPfbfGX/QB0L/wdzf/ACJR9t8Zf9AHQv8Awdzf/IlAHQ0Vz323xl/0AdC/8Hc3/wAiUfbfGX/QB0L/AMHc3/yJQB0NYur6PPqHiHQr6F4xFp08skyuTuYNEyDbxzyw644qD7b4y/6AOhf+Dub/AORKPtvjL/oA6F/4O5v/AJEoAxE8F6tpqw/2TJYtHpWrvfaXazO6J5EsbK8LMFJTBkkKkBgPlGPSU+EtXvTdNqD2cX9r6jDd6gkEzsIooQgSKMlQXLeWAzHbgE4U1rfbfGX/AEAdC/8AB3N/8iUfbfGX/QB0L/wdzf8AyJR/X5f5A9f6/ruQWfhANJq/9pz3Cpeak15D9gv57ZgpjRcMY2Qk/KeMkdKwvEvgTV9V1jVZLJYDBfxQxxzS6vcx+SUXbue3VTHPg84c89Dwa6T7b4y/6AOhf+Dub/5Eo+2+Mv8AoA6F/wCDub/5Eo7eX6Kwf1+pj3/hXXseINP0+TT5bDxCQ09zcSOk1qWiWGTbGqlZPlQMvzJgkg5Fb2vaXqFx4UfTtBvPst0qIkcjuU3KpG5d6glNygjcoyucjkVD9t8Zf9AHQv8Awdzf/IlH23xl/wBAHQv/AAdzf/IlHT+umwHF6h4X1XRdD8QX108ETag9gsEZv7i/MTJOB80k21mHzA4G3uOMZPTReHtZv7vW9R1gWNvd32mrp9vDazvKiKPMO9nZFPLSdApwB1OavfbfGX/QB0L/AMHc3/yJR9t8Zf8AQB0L/wAHc3/yJSaumn/Wlhp22M2+8Haje2Phm0TUEtE023NvfSQs3mOhiVGWI44ztxu4IByOcYpt8O5WtobJHht7KLXjqCx2txJAyW/kmNUVkwVYccAgY79q3vtvjL/oA6F/4O5v/kSj7b4y/wCgDoX/AIO5v/kSm9ZOT6/5p/oSlaKj2/yt+pyfifRtY0nwdpMNjcWcOsWmoGy02WJMK8ExaMBlAUBhGQxxxmPNdD/wiUq3UEUPkQ6fpmmSWOnxCRizNIqqzvxgYCADG7O5jx0q39t8Zf8AQB0L/wAHc3/yJR9t8Zf9AHQv/B3N/wDIlJq6afX/ACt/n95V7NNdP87/AORjad4Y8ReHXt59HGmXk0mkW2n3Ud1PJEsckAbbIjKjb1O9sqQp4HPPFC7+Hmo2sem2+nCO/gs9KFgxfV7nTmZt2Sx8hW3Kc/dJrqPtvjL/AKAOhf8Ag7m/+RKPtvjL/oA6F/4O5v8A5Epy953f9b/5sUfdVl/Vrf5Ilt9FuofAa6JJcRTXS6f9lMyx+WjN5e3O0fdHsKwfCHhDVtG1q3vL8QQRwWBtGVdUuNQaY5UggzKvkqNp+VODuGfuitn7b4y/6AOhf+Dub/5Eo+2+Mv8AoA6F/wCDub/5Ep395y6v/g/5sVlyqPb/AIH+RneJ/COo6xq93qen3FtFdRWluNMaYsRHPHM0hLADhWBVTjJwW/GmPA2r6ZaajF4f1CK3a6sbSIuZGRpJY3cykuASnmK+N65YE5A4Fbv23xl/0AdC/wDB3N/8iUfbfGX/AEAdC/8AB3N/8iUtlYe7v/XT/L8zmI/AGsyab4kjle2hk1eK2SGOTUri88oxMxO6aVdxBzkYAAzjHGT0Pi3R9a1S4sW0qYPaw7/tFn/aU9gZWIGx/OhUv8vzfL0O7J6CpvtvjL/oA6F/4O5v/kSj7b4y/wCgDoX/AIO5v/kSh6gtDn4PBuuWXgiy0MC1vmiedptur3dlkvIzKfMjDM4w3Kv353Gp18B3txe6VHql/BLp1tpaWd9DDF5f2xkbITaBhYj3UdcBehOdn7b4y/6AOhf+Dub/AORKPtvjL/oA6F/4O5v/AJEo63/rr/mHS39dH+hj2fgO4Nj4ftdSuSF017p52s7yaB281iV2um1u/IyPxqvd/Dy5/s14rS5Z3g1ltRtlk1G4RpUMXllHuATKrYLHcC3QDkEiug+2+Mv+gDoX/g7m/wDkSj7b4y/6AOhf+Dub/wCRKVrO/wDXT/IOlv62t+o7wpoj6Pa3bXNklpc3U3mS7dVn1AyYUKGMkyqwOBjGMYA5rfrnvtvjL/oA6F/4O5v/AJEo+2+Mv+gDoX/g7m/+RKYHQ0Vz323xl/0AdC/8Hc3/AMiUfbfGX/QB0L/wdzf/ACJQB0NFc99t8Zf9AHQv/B3N/wDIlH23xl/0AdC/8Hc3/wAiUAdDRXPfbfGX/QB0L/wdzf8AyJR9t8Zf9AHQv/B3N/8AIlAHQ0Vz323xl/0AdC/8Hc3/AMiUfbfGX/QB0L/wdzf/ACJQB0NFc99t8Zf9AHQv/B3N/wDIlH23xl/0AdC/8Hc3/wAiUAdDRXPfbfGX/QB0L/wdzf8AyJR9t8Zf9AHQv/B3N/8AIlAHQ0Vz323xl/0AdC/8Hc3/AMiUfbfGX/QB0L/wdzf/ACJQB0NFc99t8Zf9AHQv/B3N/wDIlH23xl/0AdC/8Hc3/wAiUAdDRXPfbfGX/QB0L/wdzf8AyJR9t8Zf9AHQv/B3N/8AIlAHQ0Vz323xl/0AdC/8Hc3/AMiUfbfGX/QB0L/wdzf/ACJQB0NFc99t8Zf9AHQv/B3N/wDIlH23xl/0AdC/8Hc3/wAiUAdDRXPfbfGX/QB0L/wdzf8AyJR9t8Zf9AHQv/B3N/8AIlAHQ0Vz323xl/0AdC/8Hc3/AMiUfbfGX/QB0L/wdzf/ACJQB0NFc99t8Zf9AHQv/B3N/wDIlH23xl/0AdC/8Hc3/wAiUAUPgp/x7+OP+xx1D+UdemV5f8DGmbTfGjXUccc58XXxkSNy6q2I8gMQCRnvgZ9B0r1CgQUUUUAFFFFABRRRQB5t+0H/AMkJ8Q/9u3/pTFXW1yX7Qf8AyQnxD/27f+lMVdbQAUUUUAFFFFABRRRQAUUUUAFZPiXxLpnhLRJNV1ucw20ZCgKpZnY9FVR1JrWrhfihouqahZ6Jqui2P9pT6Jqcd81hvCmdFBBCk8bhwR+Pfikxom0n4mWOp/bRPoWv6U9pZyXuzUrDyTNGmNxQ7iCeR1I61D4b+LOj+JNWstPGl61pcmoxmSxk1KzEUd0ANx8tgxDcc+lcXpH/AAkGseIvE13BaeM4tIutDusWmvhgq3TtkJDHnG3bwvGeoqLwh4W1PwhrPg7VtQtda1i2m0143iuVlmfRpygJCIBhFYfJgjjHWmrXvLb/APa/yX9MT20/rb/M9KX4g6O/xAPhBUuvtwU/v/LHkFwm8x7s537TnGPxqhr3xT0/QfEd5ox0HX9RmsY0luZtOshNHErDILHdkDGeo7GvMm8OfEhNFh8UjS9PDx6udc+yok51IlztMRTbtxswNvXA9eK6qbX9Q8MfFPxFqa+EvEWqQ6pZ2gtmsrBmTcqHIdjgLywB6454pa2V9/8Agf56fIfV2/rW35anTar8U9D0/StG1CwtdS1uLWi4s00u3EsjFBlgULKcjnjqMHNdJoOr/wBu6LBqP9n3+m+du/0bUIPKmTDEfMuTjOMj2IrwvVfB+uaL4Y8IC/sNfEqX17d3ieG1MlzZiXlVVhwD0B7fexXsfhC9z4ItZjb66ogjcbNbjP259pPLgdSccevFPTlbfQXVJf1qyBfiDo7/ABAPhBUuvtwU/v8Ayx5BcJvMe7Od+05xj8a1PE3iG18KeG7zW9QjmltrRQ0iQKC5BIHAJA7+teHt4c+JCaLD4pGl6eHj1c659lRJzqRLnaYim3bjZgbeuB68V6j8Ura61j4S6vDp1ncXFxcQIY7eOFmlPzqcbAM5x2xSd+Tz/r/gr5FRs526f1/wH8yzD8RdEn+HreMUFyNPVTmExjz94fZ5e3ONxbjGcc9ag0r4m6PrMfh5rO0v8+IPtItVeNAUMAO8P8/GccYz74rh7fwfrKfEePw/9juR4WlvE195tjeWJQnMJOMcy4bb1wKr+DdD1exX4avd6RqEIsJdVa73WsgMAbds3jGV3ds9e1Urdf60f6/1qQr8v9dm1+n3nf2/xQ0O60uwureC9kub7UDpyacI0+0xzKcOHXdgBR8xOeAQe9bXiHxJb+HktBLa3N7cXkpigtrUJvchGdjl2VQAqk8kV5JpWi67p3jq1+JMugXHl6pfzQ3GlJZsZ7KBwESfYBkOdpLnHRvevUfG1jZ3Wg+bc6Vdanc27g2cVpJJHL5rDaMSRkMindhmzgLnNS78ifX/AIbT+u9uhStzNdP+H1/r16kll4y0vUp9Ih04T3Mmq232uNUQZhgxkSSZI2gn5R1JPQHBI368etdI8T+DdchtNKE7SXIs2Y2unh7ac+YUljeTYTFHFEFCDcnc/MSa9hq3bdEq+zCiiipGFFFFABRRRQAUUUUAFc9e/wDJS9F/7BGof+jrOuhrnr3/AJKXov8A2CNQ/wDR1nQB0NFFFAwooooAKKKKACiiigAooooAKKKKACiiigArB1HxbZ6driabJa3UvzQpNcxhPKt2mYrEHywY7mGPlVsZGcVvVyHivQItU1m0FjbXEeo3AXffo8git4ozney58t5QXPlhgSCd3RTR1QdGdBp+rQanc3kdosjJZy+Q85XEbyD7yqc5O08E4xnIzkEC/XCeCW1i21h9NljvItOt4pke3ms/KhtmWbEIhk2Ayho9zM25+cEkZxXO/EK21C+1bVTa6HuvbcRHT7j+x57yaTADb4bkMI7fac/JjJKk4JYCje3n/X9eQd/I9doryTxNaWl7rXi6KTRL3UNWdYl0ueG2eUQTmBNpV1yIGDbSXOwEAfMduBvw+DtOHxOt7+40CykI0zzZLz7CmGu/OU7923/WdTnrRHVr+ujf6figeiv/AF0/z/BneUV5JY6Lr93pvhua+s7q2t9N1eJYbIK25h5rF7iUDoAOFB4AJY8sNtvSdEv/AO24212wludLk1zUfJgW1ZTA0hk2zS5zvRl3KrAKF3gndkEKLbX9eX53/roPT+vX/L+uvqFFeW+G3ubfVZra/tbua38ERSWkHlQtK128mPKKhcklYdoPoZD25qtb+DdW0aM/2Lp62ut3Phq58+6t4wm68eRGCmXoWBJAJPQZzin6f1o2vvt+KDyf9apfhc9bory620q1kuJZvCGgXuk2v9iXEOoRy2ElqbiVlXylKsAZZARJlxu+9945pvw40yax8R272+mLbQHS/Lumt9Cm0pFkDIVEglJ89/vfMuNuGz94U1rK39df8vxE3pf+un+f4HqdFeY/EXShfeLY5LjT4biA6W0aSz+HZ9VVXMh4XyiPLbHOTXU215qWk/DSC5bT7qbVLfTVxZs3nSvMEACswHJ3YycepqU7xcv66/5fiV9rl/rp/mW9I8U2OtazqOm2iTrJYEAySKAkw3MhMZBOQroynOMEVb1nWbPQdNa8v2fZvWOOOJC8ksjHCoijlmJ4x/TJrh7Pw74j8MXvh25e8tb+O3DafcCz02VX2zcmWQ+a28CVVYkBfvMcgVpeIdO8RpbaXqVy9vrMuk6it29tp9obdpIvLdG2q8r7nG/cBkZxjrT7fc/v/wAtewur+9f166G/pmt3F/dm3vNC1PS22F0a7ETI4BAI3RSOAeRwxBPOM4ONavNNVu9X1mPxHBp02uXumz6HdkW99pRtvLuG4jji3Qxu/wAu4Yy3bJzik13RLbTNL0WxtvDls1rMjS3k82kT6komCKAZbeIhnkbn965JG0jq1HS/9bv/AC/IOv8AXZf5nplZXhzW/wDhINJa9+z/AGfFzcW+zfu/1Uzx5zgddmcds45rzfTtMmXRfCw8Y6Hd32l2kd7HJZHTnnEM3mYgLQKHO0Rh1XqFyOehqpHoOpxeHdBjvNMkj0uC61Ez2eoaVLqQjd52MLSQRvuf5d2HywG7PcNT/r+v66oOn9eZ7RXMSeNoo9JOoDTrm5il1I6faR2roXuGDlN3zsiqC6sOW6AHvgTeCbN7Hwnb25uZLhFeTyi9jLZ+Uhc7YxFKS6qo+VQT90DHFcnpFndTfDvwnBFDLPNZ61GLnZGSVMc8gkZgOgyDk0vtJea/FoV/db9fwTOv0zxOb/Xm0i70XUdLuhbfalF20DK6bgvBilfnJ74rerhvFWn61ceJNSl0GOZLp/Dc0NtcL8qicyAqoc8BvTn3rN0iOw0zXINW8MeHdS02xt9NkXUoRpk0D3MpKeUuwrmaQHzMuAcbjluaSeib8/zf+Q+rX9bL/P8AA9LorynTfB8+iSgppIS8ufDV0L6a3g/1t07q2xnH3myWAyScDitfTtM8SRar4QfVZra5treJwyW2nSQtbk25A8xmlce3Refyp9P67tfp+Im7P+vL/P8AA7+ivJPC41+10iy0u2OszJ9nuk1Czv8ATPJhtl2uU8mTykLsX2gAPJkMxxwCI9V0S+kk0b+2LKObTl0K3giju9BuNUWCcD94PKidWifGz5iP4cAjGCv6/P8Ay/EfW39dP8z1+iuVu4Zrb4S3UNzeTXssejyK1zPC0Mkv7o/MyP8AMreobnPWuU0q28m6jvfC3hzUIGi0ScakjxyWrX1wdhiUzH/WyZEh81S2N33uRlvRtdv+D/l+I1ql5/8AA/zPVaK8k8L6fNFr15INGMWm3GiyLdR2Ogz6aJZQ6/IyyPulcKzYbjIJAJOcQ2+iXEuieI7LT9HxaakbK3xa6NLpsDbpdsuLZ8tkI25pc4IwONlOz/r1sTf+vuPYaK8lOia21xYNcWV3InhS/t7Sy3Rk/aYmnAaYeu2Axgt2Ik96ZFod+fFs76mwtdT/ALYM0N+vhy5uZzD5gKKLxH8tYzHhCpACgsCO5Frb+u3+Y3pf+u/+W/meu0V5CLKC8vrwWGj3jeIB4jZrbUhbOywwrc5kxPysabPMBjJXcSflO7J0NV0jxPL4d8UpaPAtpPqEzpZtpkr3Eyll5RxKBg9jsP40o+8k+6v+X+f4BL3b+tvz/wAj06ivMNabXNO8Y+IrjRZNYjvbg2zWFvDpvm2l4wjC4llMRCLngnzEwMmm69pOrzabfBLVjanxGZ7uKWxkuUmt/JUAmBWVpk37SVU87ehwRSTv/Xml+oPT+vJv9D1GiuS+H1j9h0u9WKbNtJdF4rZNHn02O2+VdyxxTEnaTlsjjLNjvWPD4ZuP7L8Z3+l6XHb+Iri7u1sL1oFjnYNGoXZKRnaTnBzjNN6O3lf8v8wWtvW35/5HotFeTS6fZLb3t34V0O70Wyj8P3UepiexktPOkKAxBg4HmuuJMuM/e+8c1XfSludNu28M6DqFkW8N3cWpGS0kRry4dF8pSxH+kPnzDvUv1+983Kbtfy/4P+X4jir28/8Agf5nsNQ3kk0NjPLawrPOkbNHEz7A7AcKWwcZPGcH6V5jd6ZqsGia6t/p1zf6rJYWTRT2tqypLEj/AOoRSTtdSGLAsc7t3A4Xa0PTNXg+I8mr62shku9JYybctBa/vV2wK3QkKCSerEsemAHJa8t++v3/AOX9aXlPTmt2/G3+f9dOs0bVIdb0Oy1S14ivIEmUE5KhhnB9x0q9XL/Dne3w/wBNkcMomEk0at1EbyMyf+OkVymieEl07/hDL2x0GOy1EfaPttylkEkUmCQAysFz94j73eiTs3oNbHqdFeV+GtJIvfDTWmiXtj4htZGOvX81o8Xnr5bCUPORtnDybGUKX6Ajbitr4gaNqGt6rpC6dDIZNPiub+CYKdqXMezyVJ6fMSwx3AND0/r8UCu3ZHdUV5dp9trUWtXXiY6Ney3Ot6TdSPaMWhkhKNH5EBccxsUz3yG3YqDwfoa3fiqWK70K1Gj3el4uoh4dlsIJZllRlWRJmbzXXJIcgdTgnBwJN6f11/yE3pf+un+Z6xRXj8Xh3TtF8B+HlufDxhefV8X0FtaeXNPGPPwGUYZxtP3ecqSADnBtrZX9rp81x4c0G6Fh/wAJDDNpmmm3a2CIIgrvsYAwxmTcTlRjk455Sd/vt+X+f4Dei+V/z/yPVaK8nv8AQNXsrDxj9rjvNRubltPnaaOB389g+5xEoBJVBwFXJAAzk5Jtalq0uqeL9YXQ49StbzUNA+y6dLc6fcWu+4QzOVVpEUAgMpz/AIUN9P62v/wBrX+vO3/BPTqK81+H+ki016KeALYFbIx3NrD4ZutPWZsrhpJZHZJHU5wRkncxyRXpVU1YlO4UUUUhhRRRQAUUUUAFFFFABRRRQAUUUUAFFFFAHH/BT/j38cf9jjqH8o69MrzP4Kf8e/jj/scdQ/lHXplAgooooAKKKKACiiigDzb9oP8A5IT4h/7dv/SmKrn/AAm2lf8APrrv/hP33/xmqf7Qf/JCfEP/AG7f+lMVdbQBz3/CbaV/z667/wCE/ff/ABmj/hNtK/59dd/8J++/+M10NFAHPf8ACbaV/wA+uu/+E/ff/GaP+E20r/n113/wn77/AOM10NFAHPf8JtpX/Prrv/hP33/xmj/hNtK/59dd/wDCfvv/AIzXQ0UAc9/wm2lf8+uu/wDhP33/AMZo/wCE20r/AJ9dd/8ACfvv/jNdDRQBz3/CbaV/z667/wCE/ff/ABmj/hNtK/59dd/8J++/+M10NMlmjgheWeRY40G5ndgAo9ST0oAwf+E20r/n113/AMJ++/8AjNH/AAm2lf8APrrv/hP33/xmrtj4n0HU455NN1vTbxLZS87W93HIIlHUsQeB7mjTPE2g61M0Oja3p2oSoNzJaXccrKPUhSaAKX/CbaV/z667/wCE/ff/ABmj/hNtK/59dd/8J++/+M1q/wBrad/a39l/b7X+0PL837J5y+bs/vbM5x74qpfeLPDumXxstS1/S7O7GM29xeRxyDPT5Sc80AVf+E20r/n113/wn77/AOM0f8JtpX/Prrv/AIT99/8AGa0dT1/R9Fjik1nVrHT0mz5TXVykQkx6FiM9e1T2GoWWqWSXmmXkF5ayZ2T28qyI2Dg4YEg8gigDH/4TbSv+fXXf/Cfvv/jNH/CbaV/z667/AOE/ff8Axmrdj4r8PanffYtN17TLy75/cW95HJJx1+UHPFWtS1bTtGtftWr39rYW+4L5t1MsSbj0GWIGeKPMDK/4TbSv+fXXf/Cfvv8A4zR/wm2lf8+uu/8AhP33/wAZrVvNW07T9O/tC/v7W1ssKftM0ypHhunzE45yMVFJ4h0aL/W6vYJ/o32z5rlB+4/569fuf7XT3oAz/wDhNtK/59dd/wDCfvv/AIzR/wAJtpX/AD667/4T99/8ZrVbV9NT7Hv1C1X7cQLTM6j7RkZGzn5uOeM0moazpmkmEarqNpYm4fZD9pnWPzG9F3EZPsKAMv8A4TbSv+fXXf8Awn77/wCM0f8ACbaV/wA+uu/+E/ff/Ga22u7ZLyO0e4iW5kRpEhLgO6qQCwXqQMjJ9xU1AHPf8JtpX/Prrv8A4T99/wDGaP8AhNtK/wCfXXf/AAn77/4zXQ0UAc9/wm2lf8+uu/8AhP33/wAZo/4TbSv+fXXf/Cfvv/jNdDRQBz3/AAm2lf8APrrv/hP33/xmj/hNtK/59dd/8J++/wDjNdDRQBz3/CbaV/z667/4T99/8Zo/4TbSv+fXXf8Awn77/wCM10NFAHPf8JtpX/Prrv8A4T99/wDGawrvxfprfELSJxbazsTS75CDod6GJaW0IwvlZI+U5IGBxnGRnvq569/5KXov/YI1D/0dZ0AH/CbaV/z667/4T99/8Zo/4TbSv+fXXf8Awn77/wCM10NFAznv+E20r/n113/wn77/AOM0f8JtpX/Prrv/AIT99/8AGa6GigDnv+E20r/n113/AMJ++/8AjNH/AAm2lf8APrrv/hP33/xmuhooA57/AITbSv8An113/wAJ++/+M0f8JtpX/Prrv/hP33/xmuhooA57/hNtK/59dd/8J++/+M0f8JtpX/Prrv8A4T99/wDGa6GigDnv+E20r/n113/wn77/AOM0f8JtpX/Prrv/AIT99/8AGa6GigDnv+E20r/n113/AMJ++/8AjNH/AAm2lf8APrrv/hP33/xmuhooA57/AITbSv8An113/wAJ++/+M0f8JtpX/Prrv/hP33/xmtW21fTb2+uLKz1C1uLu1OLi3inVpIf95Qcr+NT29zBdwia1mjmiJIDxsGUkHB5HoQR+FAGH/wAJtpX/AD667/4T99/8Zo/4TbSv+fXXf/Cfvv8A4zXQ0UAcrb+JtBtby6uoLDXVmvGVp2/sG/O8qoUcGLA4AHFWf+E20r/n113/AMJ++/8AjNdDRQBz3/CbaV/z667/AOE/ff8Axmj/AITbSv8An113/wAJ++/+M10NFAHKWXiTw/pxuTZ6frsZup2uJj/YOoMXkbGTzF6ADHQAcVa/4TbSv+fXXf8Awn77/wCM10NFAHPf8JtpX/Prrv8A4T99/wDGaP8AhNtK/wCfXXf/AAn77/4zXQ0UAc9/wm2lf8+uu/8AhP33/wAZo/4TbSv+fXXf/Cfvv/jNa+oanYaRZm71a9trG2UgGa5lWNAT0G5iBSabqunazafatIv7W/t9xXzrWZZU3DqMqSM80AZP/CbaV/z667/4T99/8Zo/4TbSv+fXXf8Awn77/wCM1rajqmn6PaG61e+trG3DBTNdTLEmT0G5iBmnafqVjq1mt3pd5b3ts5IWa2lWRGwcHDKSDzQBj/8ACbaV/wA+uu/+E/ff/GaP+E20r/n113/wn77/AOM10NVdS1K10fS7nUdRl8m1tYzLNJtLbVAyTgAk/hQBkf8ACbaV/wA+uu/+E/ff/GaP+E20r/n113/wn77/AOM10AIZQR0IyKZcTxWttJcXEixwxIXkdjgKoGST+FD03Ba7GF/wm2lf8+uu/wDhP33/AMZqtZ+JtBsDcG0sNdj+0TNPIBoN+QXOMkAxYGcZ4xzk9Sa6C11OzvTGttcI0kkC3Aib5ZBG33WKHDAHBHIHII7VLbXVve26z2c8dxC2dskThlODg4I46gijZhuYf/CbaV/z667/AOE/ff8Axmj/AITbSv8An113/wAJ++/+M10NFAHPf8JtpX/Prrv/AIT99/8AGaP+E20r/n113/wn77/4zXQ0UAc9/wAJtpX/AD667/4T99/8Zo/4TbSv+fXXf/Cfvv8A4zXQ0UAcxd+LNEv7Ke0urHXZILiNopE/sC/G5WGCMiHI4NPh8Y6PBCkUVnrqpGoVR/YF+cADA/5Y10lFAHPf8JtpX/Prrv8A4T99/wDGaP8AhNtK/wCfXXf/AAn77/4zXQ1i674v0Lw3NbwaxqCRXNywWC1jRpZ5STgbYkBcjIxkDGaAIP8AhNtK/wCfXXf/AAn77/4zR/wm2lf8+uu/+E/ff/Ga3YJluLeOaMOFkUMokRkYAjPKsAQfYgEVJQBytl4m0HT0lWzsNdjWaZ55B/YN+cu5yx5i7nt0qz/wm2lf8+uu/wDhP33/AMZroaKAOe/4TbSv+fXXf/Cfvv8A4zR/wm2lf8+uu/8AhP33/wAZroaKAOe/4TbSv+fXXf8Awn77/wCM0f8ACbaV/wA+uu/+E/ff/Ga6GigDmLvxZol/ZT2l1Y67JBcRtFIn9gX43KwwRkQ5HBp8PjHR4IUiis9dVI1CqP7AvzgAYH/LGukooA57/hNtK/59dd/8J++/+M1DdeLdGvbOa1uLTXzFPG0bhdC1BCVIwcMIgRweoOa6eijfRhqjmbfxdotpaxW9tY65HDCgjjQeH77CqBgD/U+lS/8ACbaV/wA+uu/+E/ff/Ga6GqtlqNrqInNnIX+zztbygoVKOvUYIHsc9CCCMg0Xuw2Rkf8ACbaV/wA+uu/+E/ff/GaP+E20r/n113/wn77/AOM10NFAHPf8JtpX/Prrv/hP33/xmj/hNtK/59dd/wDCfvv/AIzXQ0UAcrd+JtBvntmurDXZGtZhPCf7BvxtcAgHiLnhjweOas/8JtpX/Prrv/hP33/xmuhooA57/hNtK/59dd/8J++/+M1Wn8TaDc3lrdz2GutPZszQP/YN+NhZSp4EWDwSOa6qigDnv+E20r/n113/AMJ++/8AjNH/AAm2lf8APrrv/hP33/xmuhooA57/AITbSv8An113/wAJ++/+M0f8JtpX/Prrv/hP33/xmuhooA57/hNtK/59dd/8J++/+M0f8JtpX/Prrv8A4T99/wDGa6GigDnv+E20r/n113/wn77/AOM0f8JtpX/Prrv/AIT99/8AGa6GigDnv+E20r/n113/AMJ++/8AjNH/AAm2lf8APrrv/hP33/xmuhooA57/AITbSv8An113/wAJ++/+M0f8JtpX/Prrv/hP33/xmuhooA57/hNtK/59dd/8J++/+M0f8JtpX/Prrv8A4T99/wDGa6GigDnv+E20r/n113/wn77/AOM0f8JtpX/Prrv/AIT99/8AGa6GigDi/gZOtzpvjSeMSKkvi6+dRJG0bAERnlWAKn2IBHevUK8z+Cn/AB7+OP8AscdQ/lHXplAgooooAKKKKACiiigDzb9oP/khPiH/ALdv/SmKutrkv2g/+SE+If8At2/9KYq62gAooooAKKKKACiiigAooooAK81+NRT+xNDXVGkXw+2rwjVzGGx5PJG7bzt3AZx3x3xXpVMlijnheKeNZI3G1kdQQw9CD1pdvkNHhOn39gfFXiXT9LsfCH2QeHLya2vPDynf5W4BY5iG2l8AEjHpg1n/AA50ySx8ZeCbjX7TS9Lik0uSfTbnS7co18THhluXJGXVfm4GDnrXulj4Y0DS45o9N0PTbNLhCky29pHGJFPUMAOR7GpJfD+jT21rbz6TYyQWYxbRPbIVg4x8gIwvHHFNaar+vi/zE9Vb+un+R88jxYY/E0XjwaFrQdtcaWXU2sSLRtPZfIVPN9QAD0xknvXZ3jeC3+L3i9vHB0cwNY2hgOo+Xkjyzu8vdznGPu89PavWDpGmtpP9lNp9qdO2eX9jMC+Tt/u7MYx7YqldeEPDV9dLc3vh7SridVVVllsY3YBRhRkrnAAwPSlZWS7f5W/r5jvq33/zv/XyPn6T7T/whfgHz/7K+z/br77F/wAJHn7L9n/5Z+bnnbj7v/Aa978Fm3Pg6x+ynRSoRg/9g4+xh9x3eXjtnOffNX9T0DR9ajij1nSbHUEhz5S3dskoTPXAYHHTtU9hptjpVmtppdnb2VshJWC2iWNFycnCqAOtPo0Lqn/W7Z8veGJILW/8N3tyvh6VYNfIWGxl2au7NKyqZRg7owcHHGRjkV7J8abSHUPDGjWd0u6G4120ikX1VmII/I119l4T8O6bffbdO0DS7S65/fwWUaSc9fmAzV+8sLPUEjS/tILpYpFljWaMOEdejDPQjseoo3jGL6Nfp/kNv3pSXW/6/wCZ88XUl/rnhuTwLqS7l8G2l9NfOVOJRFGy2uP++s/8Bro/CT2cfi7QX1MxiyX4exm4Mn3RHvG7PtjNevnRtLM15KdNtDJfoI7tzAu64UDG2Q4+YY4wc8VE/hzRJFCyaNp7KLb7GA1qhAgznyun3M/w9Pai7tru9/N2kv1X3Bp/Xa6f6P7zxP4UfuPHWlpr/wBq+xSWM7eE/tbAhYTK24Hv5hTbj/Y49K774n6FDdWbapJqD25azl0xrZLbz3uVnZfkiG5dspKgBjkDuMCu0l0jTZvsfnafayfYSGtN8Cn7OQMApx8uAO2KlmsrW5mgmuLaGWW3YvC8kYZomIwSpPQ4JGR2NN9PL+vv1Erpt/1/wx5j4U1y603xfJDrWmrNqF7erptxeLdbmt2EHnJDHHsx5SqcFg2WbcxXkV6rVL+xtL/tcar/AGbaf2iF2C88hfO24xjfjdjHbNXaL3QrW2CiiikMKKKKACiiigAooooAK569/wCSl6L/ANgjUP8A0dZ10Nc9e/8AJS9F/wCwRqH/AKOs6AOhooooGFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAeUa3p1xoF1eJbag1zBZ2dzJMbeEwyWttNL5rI0hZg0rsu1WAXaodzk4z3PhfUfP025s5NPt9NbSZfsj29rKZYUCxoy7G2KSNrrxtGCCK1f7Pswlyn2SDbdktcr5QxMSoUl+Pm+UAc9gBRp+nWOk2a2ml2dvZWyElYbaJY0XJycKoAHNC0VgeruefaL4t1O58WaH/pWo3Ona19oMbXUNpFBIqoXV4FRjOo4AxLnhuecU3SNd1u6svDd6/iVrttcnks5reGCALBiKQ+Yh2k+YhjGdxZSSflHAHcWnhrQrC8a7sNF061uncyNPDaIjliCCxYDOcM3PufWqvhzwhpnh62t2jtLSTUYoBDJqC2qpNKo7FuTjgcZPQUL+v6/UO5yS6rrem+HfE2qXXia8uP7Mv2tIvtMNqqIivH852xKd2GYdcYPTvRfeMddku9durd/sVgvh64vtMieEeZlDhZ33DILHJCHgLtyMkgegNpdg9vPA9jbNDcuZJ4zCpWVjjLMMYJ4HJ9BTp9Osrp5HurO3maWE28jSRKxeI9UORyp9OlS07L0t87Wv9+v9aNaP53+V72+7Q4E+I/EV1puqajDPJZz6ZBaXJ0qSKJpJIRl5XYgEfvFDhdjHGzs2QJrjxXqGpaBq+q6LqAFveXsGn6JJGkb7mLKjyjI+b5mfrkAR5x1rs7jS4Hjne0ht7e7ktjbJc+QGZE52r2JUE525xVXRPDOm6Jo+lWMNtDIdKh8q3maJdyErhmU/wluc465q9G32/q/5fK5Nmkv6/rX8jj4te1qKY6NNrcxafxC2mrqc0MIlijFuJQAAgjLsw2glT97oeKZe6/r9vaXum2+o3l7Laa5DYx3trFbC4njeMOyfOoh3qW25wo4GQD17640bS7u0ubW6020mt7t/MuIZIFZJm4+ZwRhj8o5PoPSopPDmiS6Omky6Np76bGcpZtaoYVOc5CY2jkk9O9T0Xy/C1/yf3j7/AD/X/P8AAyfA+q3+oWup22ryzyXVhetDtuliE6IUV1Ehh/dFsN/BxjGec1zEviTxBb+IJ7mS61IadFrosWaSOz+xCJnVNuAPtBfLAA9M4zxmvRdP0yw0izW00qyt7G2UkrDbRLGgJ6naoAqoPDGgLq/9qroemjUd+/7YLSPzt3TO/G7Pvmn9pP8Arp/k/vE/ha/rr/XyMb4irO2i6YtnJHFOdYsxG8sZkVW80YJUMpI9sj61n6Jdajo/jDxNDdWja5qEiWt1JJpaJApBUxqmyWTCsAm7JkJYMOmAK7TUNMsNXszaatZW19bMQTDcxLIhI6HawIpum6Rpui2pttH0+1sICxcxWsCxKWPfCgDPA5oWl/66L/Ib1d/63f8Amcg120/xQik1GyEF3/Y2/R7a+lVcTF289Qyb1D48oEruO3pkZqrceIdVumgt7KG20C+n8RDTr6W0K3IlH2YsXDPGuWwEAJXjaM5HB7nUtJ07WbX7Lq9ha39vuDeVdQrKm4dDhgRnmmWuhaTY2sFtZaXZW8FtIZoIobdEWJ8EblAGA3J5HPJoXn/Wt/8AgA/L+tLfnqef+LfFGq6KuoSaZqeq3Y0QQpO4gsktzIdp2zl8SMWDD/UqoG4ADINV/Huo3+peHvHJl1s6faaXEtrHYmOIpPvhVyzsy78sZNq7WXBUcNyD6JeeGtC1G/8At2oaLp11d7PL+0T2iPJtwRt3EZxgkY96W88PaLqN6LzUNIsLq6ERhE89sjuEIIK7iM7SGIx05PrQvP8Ar+v1GnZ3OH1LXfFd54h1m10CDUnbSvJS2gtVsvImJjV/35ncSYYkrmPbgA4JOcb3xEll/wCFb6hmMoZliimXcPlR5EV+enCs1bGp+GdB1qaObWNE07UJY12I91aRysq9cAsDgVNrGlQa1od5pd1kQ3ULQsV6qCMZHuOoo6f1/WpMVaxjajpWtWvi/wDtzQYbC7WawWzmt7y5e32bHZ1ZWWOTOd7AggdBzXJ6Dq15B4I8PabZTX8d/dm6lMGlR27zMqTNuIkuSIwoLDORuORjGDXptrHNFZwx3MqzTJGqySqmwOwHJC5OMntk1Su/DWhX9lFZ32i6fc2sLF4oJrVHSNjnJVSMAnJ5HrSa6DXdnE6F4n1jxLZeGrNtTk05tQhu5Jr6GOFpZjBIEVFyrxgsCXbAI+U7cCruof2y3iHw9bWvjG9a31ISrK9rBabD5cWQybonIyRk8kcnGOg6q58O6Le6ctheaPYXFkkhkW2ltUaNXJJLBSMZ+Y8+59atCws1a2K2kANopW3IjH7kY24T+6MccdqoWp5trfjfXI9N1230ecG602/fz7t4VK2sAZQkYGMNIxPfOFyx/hBu+I/F2r6Fp3iOK5F/Fdx3anTLhNNeSEQMI8fvVQxjkuDvOf0ruW0uwe3ngextmhuXMk8ZhUrKxxlmGME8Dk+gqa5tbe9t3t7yCO4hf70cqBlbvyDwaS0S9P8AL/L8+4NXv/Xf/P8AI4/UPFGr2WueIrW20q/1GG0hiaCS2Nsq25MRY7vMkRjzz0b+lU7TWNW164ism199FNvoNtqD3EUMJa4eUNudhIhUIhTkKBy/UcCu7+yW2+d/s8W64AEzbBmUAYAb1445qnfeHNE1OG2i1LRtPu47QYt0uLVJBCOOEBHy9B09BSto/wCu/wDmvuH/AF+X+T+8zNO12+1D4Yx65Mi299LphuSEX5VfyycgNnjPIBz+Ncjp3ifxDa29wNQutSV5tAmvrf8AtOOzLGVFU7ovs4xsG8ZEnP3cfxV6hJFHNC0UqK8bqVZGGQwPBBHcVm6f4Y0DSVnXStD02yFwmyYW1pHH5q+jbQMjk8GiV25Ndf8Ag/5r7hrRLy/4H+X4nG3fjfXLbw7JBf2tvaam+kDULe5tbj7QrAMisXVo02MS4wAGB+bkY5WS2vJPGnjO8TxA+jvaRW7I6QwsfKEG4FzIrfuw/mcLtOd3zdMdjZ+GNA062nttP0PTbWC5wJ4oLSNFlx03ADBx71LqGgaPq9xDcarpNjfTW/8AqZLm2SRo+c/KWBI5Haqlq9NCY6b67HGReN9Xe40mL7MG1HVdEiuINO2bV+0sfmZj95Y1HJyeAMcsQDTTUvEV54R8N6ifE15Bc3uoJY3P2e2tgjgzSKXCvExVsADrjjoTkn0r7Lb/AGz7X5Ef2ny/L87YN+zOdu7rjPOKhXS7BLeG3Wxtlhgk82KMQqFjfJO5RjAOSTkdzS6r1v8AK97fdoFnr6fpv9+pxN14s1vw/qXiFriOLVdJ0ZbYyyzXCw3ABiBcoiRbZGJOcFkGeBgVHq/ivWoYJobNrh3uPEJ05Htkg86GLyQ4VPNIj3EjAL5+93OBXZ3HhzRLvVU1S60bT59QjKlLuS1RpVK9CHIyMdueKmn0nTrq0uLW50+1mt7pt9xDJCrJM3HLAjDHgcn0FL1/rVf5fiN+X9aP/hzL8JTa69ndx+Ibe7j8ufFrLem38+WIqDlxAxQEMWHGMgDjOa5W/wDF+pR+IrS5sbvUZtPl1pdNIaG1js2+YoyAFjcF1IPzfdJUnG2u90zR9M0S2a30bTrTT4Gfe0VpAsSlsAZIUAZwBz7VAfDWhHU31I6LpxvpGDPdfZE81iCCCXxkkFQevYelV9pPp/wwvstdf+HOKm8Q6zHHe6pHr4lNnr401dLWCLY6NcCMK5wX37XyCCowFyp5JsxS65a614oSTxPqNzFo9oksEUsFqA7PC7fMVhBOCARgjpzmuh0vwhplhfy39xaWl3fm6mnhvHtV82ESMW2K5yQBuI4Izk8c1rmxtC9w5tYS90oWdvLGZlAwA394YJHPrUWfs7dbfov1Luue/S/6s4PSfGGr6x4h8Nm3kVdGvIZEeRohuvZUh3M6/wB1FbABGNx3fwgZp+HvEXinxPotskd++m6i+iPPb+dDCxvptwAmAAKiNeBjKt+85UAKT6QLCzU2xW0gBtFK25EY/cgjbhP7oxxx2pkOlafbm2NvYWsRs0ZLYpCo8hWxkJgfKDgZA9KqWrbX9b/5/wBaERulZ+Rw9r47m1XS9X16ynEem6bpQzGFUk3zKWZDnncnyLtzgl6pXOt+KNE03xBDPrEt9fWVtp0kb3MUKbJJXIkX5IwNpxjkMRXZaF4TsdI0hLO4it72T7ZJfPK9uozO7l/MCnO0jOAc5AA5rSudJ068W5W70+1nW7RUuBLCrecq/dD5HzAZOAemaH5f1/V/uSC39fd/l97Zyd14v1QagNLubWGwv7fULFJ/stx9pieGdyMbmjQhvlbI28AqQeeNDQXCePvFdvFjy82k7AHpI0RU8f7saVr2egaPp1otrp+k2NrbrKJ1hgtkRBIOjgAY3cDnrxTNI0f+zLnU7mSYTz6jdm4kcR7cKFVETqfuqgGe5ycDOKa/r8NPzYa3v/XU47xTqWuQr4svrDX7yzXRxF9ntooLdo2zErHdviZjksejCl1nX9XePxXf2ut/2afDhUQ2IhiZLnEKygy71L4kLFBsZOnBJrupdNsZ0uUnsreRbrH2hXiUibAwN2R83AA59KhutB0e+1KDUL3SrG4vbfHk3M1sjyRYORtYjIwSTxU/1/wSutzM8Ware2XgWa9sXa0v5VhjhYIHMUkrqg+Vhg4L9CK5L/hNNcludKQXKxjTLuGy17bGh82Z5/JA5Hyg4MnGOHTnFelz20F1GEuYY5kV1cLIgYBlIKtg9wQCD2IqE6Xp7edusbY/aJVmmzCv7yRcbXbjlhtXBPI2j0qvtX8/6/X8Cbe7Y8/v/F+pR+IrW5sbvUZtPl1pdNO6G0js2yxRkALG4Lqcnd90lScbane412y1HxZu8T6jcx6NZLNbxzQWoDM8Lt822EE4IBGCOnOa7A+GtCOpvqR0XTjfSMGe6+yJ5rEEEEvjJIKg9ew9KfqejW+oabqdvEkdvNqNu0EtwsQLHKlQW6FsZ4BNZyv7Oy3/AOB/mWrc93t/w5xaa/q9lLbka8NWXUtCudRyIYlS2eMIVaLYOUJkIw5c/KPm65dpHi/V9Y8ReGjBIq6NeQyI8jRDdeypDuZ1P8KK2ACMbju/hAz12meG9I0qCVbXTbKOW5jCXcsdsiNc8YJfA+bOT1z1NXRYWam2K2kANopW3IjH7kY24T+6Mccdq0la7t/Wr/R/gZq9l/Xb/I4rT/EmrT+GvBt1Ld7p9T1EQXbeWg8xNkxxjGByi8jB4qlZa/4u1TWLm60+11KWK21Z7RrZRZLZiFJNjbizi437cvngZxhSvXe1j4beGNS024htNC0ixuphlLyLTot8bZzuBABz+NbFx4Z0G81VdTu9E06fUEZWW7ltI2lUr90hyM5GBjnilHR3f9bf5P7ypa6L+t/819xqUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAcf8FP8Aj38cf9jjqH8o69MrzP4Kf8e/jj/scdQ/lHXplAgooooAKKKKACiiigDzb9oP/khPiH/t2/8ASmKrn/Cv/Bv/AEKWhf8Agth/+Jqn+0H/AMkJ8Q/9u3/pTFXW0Ac9/wAK/wDBv/QpaF/4LYf/AImj/hX/AIN/6FLQv/BbD/8AE10NFAHPf8K/8G/9CloX/gth/wDiaP8AhX/g3/oUtC/8FsP/AMTXQ0UAc9/wr/wb/wBCloX/AILYf/iaP+Ff+Df+hS0L/wAFsP8A8TXQ0UAc9/wr/wAG/wDQpaF/4LYf/iaP+Ff+Df8AoUtC/wDBbD/8TXQ0UAc9/wAK/wDBv/QpaF/4LYf/AImj/hX/AIN/6FLQv/BbD/8AE10Nch8UPEd94X8A3l/pO1b1njt4ZXGViaRwu8/TOfrikNF7/hX/AIN/6FLQv/BbD/8AE0f8K/8ABv8A0KWhf+C2H/4muA0XzPDfxT03RL3xB41vby48wPJqIVtOvCIS7eVk5XaSOmcEY964vwbr2vXfibQUtdb8UHUbvVJFn/tS6B02e2R23rEHOWcDAwOhz0qlq0u/+dhPRN/11/yPc/8AhX/g3/oUtC/8FsP/AMTR/wAK/wDBv/QpaF/4LYf/AImvL/Hnjuay+IF1f23iP7JaeG57SF9KW8Cfbt7ZnPlZy+1WUdOCDXQeKLS48VfFrTNJt/EmtaXp8uiNeA6TfGDzGEuATwQeG9M9KlapNdb/AJX/ABQ3o2n/AFrb8DsP+Ff+Df8AoUtC/wDBbD/8TR/wr/wb/wBCloX/AILYf/ia8i13xL4gg8Faho91rOq3M+keJYdPF/pzmO7uYCCdgKn5pO3ucZr1D4bw+X4XZ/M8UP5twzbfFDZukwAMD0TjI+ppx95Nr+tE/wBRPR2/rdr9C7/wr/wb/wBCloX/AILYf/iaP+Ff+Df+hS0L/wAFsP8A8TXCeH7DXPiNfa3rcvjDVtHNjqktlY2WnyhYYVjIwZYyP3hOckH+RwNr4xy6lH4S0230nU7rTbm71a2tTc2srROA5IPKkHHfFJvRPvb8bW/MfVrtf8Dof+Ff+Df+hS0L/wAFsP8A8TR/wr/wb/0KWhf+C2H/AOJryfWPHOta78N9M0eyvryx16CG6fV7iCQpLCLNDuyw5Bd9n1yRW14bvdT13xToum3esagsV94GjmkaO6dSJmdR5wwf9Zz97rVWve3/AA+jf6C9f+G1S/U77/hX/g3/AKFLQv8AwWw//E0f8K/8G/8AQpaF/wCC2H/4mvNfhv4m1vxf4vtNI1bV2WPw1BJ5jW9w6/2w4kMSyn+/GoUZ9WOe+K6v4l23iFgl3pE9zFZW9jOTJb34thb3GVMc0uXXfEoDZX5uv3TS00fR/l/X/BBXba6/qb//AAr/AMG/9CloX/gth/8AiaP+Ff8Ag3/oUtC/8FsP/wATXO+FvF8Os+KfP1XUp7eWYfZdP07ypUixtD75W2hDM6gOEJ3KhHGSa9DptWEnc57/AIV/4N/6FLQv/BbD/wDE0f8ACv8Awb/0KWhf+C2H/wCJroaKQznv+Ff+Df8AoUtC/wDBbD/8TR/wr/wb/wBCloX/AILYf/ia6GigDnv+Ff8Ag3/oUtC/8FsP/wATR/wr/wAG/wDQpaF/4LYf/ia6GigDnv8AhX/g3/oUtC/8FsP/AMTR/wAK/wDBv/QpaF/4LYf/AImuhooA57/hX/g3/oUtC/8ABbD/APE1hXfgfwmvxC0i2Xwxowgk0u+keIafFtZlltArEbcEgMwB7bj6mu+rnr3/AJKXov8A2CNQ/wDR1nQAf8K/8G/9CloX/gth/wDiaP8AhX/g3/oUtC/8FsP/AMTXQ0UDOe/4V/4N/wChS0L/AMFsP/xNH/Cv/Bv/AEKWhf8Agth/+JroaKAOe/4V/wCDf+hS0L/wWw//ABNH/Cv/AAb/ANCloX/gth/+JroaKAOe/wCFf+Df+hS0L/wWw/8AxNH/AAr/AMG/9CloX/gth/8Aia6GigDnv+Ff+Df+hS0L/wAFsP8A8TR/wr/wb/0KWhf+C2H/AOJroaKAOe/4V/4N/wChS0L/AMFsP/xNH/Cv/Bv/AEKWhf8Agth/+JroaKAOe/4V/wCDf+hS0L/wWw//ABNH/Cv/AAb/ANCloX/gth/+JroaKAOe/wCFf+Df+hS0L/wWw/8AxNH/AAr/AMG/9CloX/gth/8Aia6GigDnv+Ff+Df+hS0L/wAFsP8A8TR/wr/wb/0KWhf+C2H/AOJroaKAOe/4V/4N/wChS0L/AMFsP/xNH/Cv/Bv/AEKWhf8Agth/+Jrm9Xudc0Pxg2ozRX0sT3bJbj7aPs9zE0GEgWHedriQF2kKcKrEtjiuh8F6rbajpkipqc2o3oImuZJYZYlJk5BiWRR+6wMIVyCFzknJItVcHo7D/wDhX/g3/oUtC/8ABbD/APE0f8K/8G/9CloX/gth/wDiazb/AOIEeneK4NJuE00LLeJaeWNVQ3ql+Ff7MFPyEkc787TkjtSy+OL2Fp7qTRFXSbbUv7PmujeDzdxl8oOsQTldzLnLAjnAOASLXb+tv80D0/r1/wAmaP8Awr/wb/0KWhf+C2H/AOJo/wCFf+Df+hS0L/wWw/8AxNZ8Hi3Xf7T1i2vdD06KPSIBNcSRao8hYNGzqFUwLn7uDkjGe9SweO4LrxJpWj21m0j3tuZbiYSDZbP5XmCPp8zY5I4wCpP3gKV1r/Xf/IHp/X9dy3/wr/wb/wBCloX/AILYf/iaP+Ff+Df+hS0L/wAFsP8A8TWJp/xJk1rQTqOh6Ql+YdOa8u44rwYgkB4t9wQgyEBjg4IwMj5hWu3jO2aa7a1hE1paaSupy3Pm7QAwJRMY7qrHOeOOOab0V3/W/wDkx21t/XT/ADRJ/wAK/wDBv/QpaF/4LYf/AImj/hX/AIN/6FLQv/BbD/8AE1j23xBu1tb06tokdvdQx2Zt7e2vTN5z3RKxoWaNNh3YBPIGe+KmvvHN5o9rrCazpNtb3+m28V0qR35e3mikcoG80xqVwytkFOAARnPA9L3JTvqjS/4V/wCDf+hS0L/wWw//ABNH/Cv/AAb/ANCloX/gth/+JqPwl4uHieW/i2WDGzKA3GmX32y3k3AnAk2J8wxyuOMrzzWV4h+JA0HxBeac1vpri0EJMc2qeVdXG8ZxDB5Z8wjpjcMn0o6pD6XNn/hX/g3/AKFLQv8AwWw//E0f8K/8G/8AQpaF/wCC2H/4mneM9Uu9J8Kz3GnOIbqWWG3imZQwhMsqx7yDwdu/ODxkc0W+jWHhvOpz6zqCRQxH7TJqGpvJC44+dhIxVMHn5No5x04o8wG/8K/8G/8AQpaF/wCC2H/4mj/hX/g3/oUtC/8ABbD/APE1maprcHiTXdF0fRNZB06+juLm4utNuAWmWEovlLKh+XLPklSGwuARmq0fiXSvD2l6rc6K2t6i9rJapLp2pPcK6GWTy1ZGuhu5z03bfkH3ckk/r9ANz/hX/g3/AKFLQv8AwWw//E0f8K/8G/8AQpaF/wCC2H/4ms/xB40vvDdlC+qWmh2ly8byFLvXRCj7T9yJmi3O+MZBRQMj5jTbvxjc6nH5Hh3SVvVfSk1C4ae68ho45QdiKNrBnIV+CVXj73NJuybX9f1YaV2l/XT/ADNL/hX/AIN/6FLQv/BbD/8AE0f8K/8ABv8A0KWhf+C2H/4muN0bx/B4f8IeGtKjOlrcroVtcudV1RbFCpQKqoSrF2JVuMADjJ5rtn8TW8/gGTxNY7jbnT2vYw45ACFsHHfjFVP3OZ9v6/QUPesu5H/wr/wb/wBCloX/AILYf/iaP+Ff+Df+hS0L/wAFsP8A8TXI38M9loXgaxiTVLpbnc11Dpd6bWW5c27SMxfzI/4yWOWGas6J4wk0HQ2j1SK+uJU1xrBrWZpLi6so3BeNWKh2mO3BBUtkNjcdpoatJxf9apfqJO6TX9bv9Dpf+Ff+Df8AoUtC/wDBbD/8TR/wr/wb/wBCloX/AILYf/iaIfGFje32nQacGnW8nmgk8xXhkt3jjLlXjdQwJAHBA4IPIIrgPDux49I8a+JvDyX76hcJGmoXWoNNLaGWb935duymOONWKgMrBsHJGcikvit/Wuw+jZ3/APwr/wAG/wDQpaF/4LYf/iaP+Ff+Df8AoUtC/wDBbD/8TWXrXxGg0fTbuY6e1xdQ30lrHaxyjLpGV3yscfKo3DseSo5LCrreItdHjQaENG04xGE3Quf7Tfd5AkCZ2eR9/nO3dj/aoTvbz/yv+QPS/l/nb8yf/hX/AIN/6FLQv/BbD/8AE0f8K/8ABv8A0KWhf+C2H/4mqOi/ETTdX0qKd4bi0vJYZZI7eeCVElKZJWOZkVJDgZ+Uk4yccGqWp/E2CzaxhjTS4Lm506PUHXVdWWzQLJ91EYoxdshuwAwMnnFH9fn/AJMP6/L/ADNv/hX/AIN/6FLQv/BbD/8AE0f8K/8ABv8A0KWhf+C2H/4mr+ma1BrHhu31qwjklgubYXEceVDkFc7eTtz264965bT/AIlQ3kupwlNLuJbPTpNQT+y9VF2rKnVJCEXy25X+8OTzxyPRtPoC1V0bX/Cv/Bv/AEKWhf8Agth/+Jo/4V/4N/6FLQv/AAWw/wDxNUoPFmszXtvZyaDbW9zqFq11p6y6iSrqhTespWI+WwWRT8vmA8jPeo9I8a6je6PYalqOj2trBf3q2kIhv2lZfmdWZsxKBgpwATnPbFD0dn/WtvzFdWuaP/Cv/Bv/AEKWhf8Agth/+Jo/4V/4N/6FLQv/AAWw/wDxNYz/ABOtfsOtX0VifsOmTWqJcSzhFuI5pNhlHB2oOWBP3gAeAQavReNmmuLWZNODaReaj9hg1AXGRICnyyhdvKNICgIPPDDg0b6f10/zH0v/AFoW/wDhX/g3/oUtC/8ABbD/APE0f8K/8G/9CloX/gth/wDiapzeNJ30xbnTdMine41ZtNs0muzGs+0lWkLBGIAKPwA3C578V7b4iobbRpdQ0ueM6k90jrZrLdmFoH28LHHuYHHXaMUdL/13DZ2/r+tDU/4V/wCDf+hS0L/wWw//ABNH/Cv/AAb/ANCloX/gth/+JpIte03xJdLpMCJd2GoadLM0pJGQHEbRshGQfmIIOCCCCM0vgS8lvPA+mvcuZJoYzbSORyzRMYyfx2Zo6Xf9bp/kGl7B/wAK/wDBv/QpaF/4LYf/AImj/hX/AIN/6FLQv/BbD/8AE1l6Z441K6n0aTUNGs7Ww1jzTDNFqDyyRhI2f5kMKjkL2Y1Np3jW7u5dHuLvR0t9J1x9lhcpd+ZLkoXj82LYAgZFJ+VnwcA4zwbhsXv+Ff8Ag3/oUtC/8FsP/wATR/wr/wAG/wDQpaF/4LYf/iaj8WeLx4WuNMV7L7THdzETuJdpt4Vxvlxg7gu4EjjjmmWXjQX3izU9Hi09mjsoXkinWYZuWQqHVVIAGGYLkt1BzjrSv/XoBP8A8K/8G/8AQpaF/wCC2H/4mj/hX/g3/oUtC/8ABbD/APE1k6N4/m1zUrnTNOh0S7vkthcwiz1rz4iocKyyusWY2G4EAKwPPPGaSy8c6xc6DY6lJ4etc6jd/ZLWGHUi5LfvAWctEoVQY+244JOMgKX/AF+gd/L/AIc1/wDhX/g3/oUtC/8ABbD/APE0f8K/8G/9CloX/gth/wDiaqQeNJQ7Wuo6alvfQ6nHp9zHHc+ZGnmIJFkVygLDaRwVU5z9TUX4kQz2mt3dnpzyW2mSW6wytLtF2sr7PMXg4XOSDzuGCMAg0f1+X+Ybf16/5Gt/wr/wb/0KWhf+C2H/AOJo/wCFf+Df+hS0L/wWw/8AxNGpeLYNJ1bVLa8t2FvpulrqUkyNlmUtICoXHX93nOe/as3wv8QrfxDrUemSHSvOntjcwjTdVW82hSAyygKuxhuXGNwPzc8ci12/rf8AyYPTf+tv80aX/Cv/AAb/ANCloX/gth/+Jo/4V/4N/wChS0L/AMFsP/xNdDRQBz3/AAr/AMG/9CloX/gth/8AiaP+Ff8Ag3/oUtC/8FsP/wATXQ0UAc9/wr/wb/0KWhf+C2H/AOJo/wCFf+Df+hS0L/wWw/8AxNdDRQBz3/Cv/Bv/AEKWhf8Agth/+Jo/4V/4N/6FLQv/AAWw/wDxNdDRQBz3/Cv/AAb/ANCloX/gth/+Jo/4V/4N/wChS0L/AMFsP/xNdDRQBz3/AAr/AMG/9CloX/gth/8AiaP+Ff8Ag3/oUtC/8FsP/wATXQ0UAc9/wr/wb/0KWhf+C2H/AOJo/wCFf+Df+hS0L/wWw/8AxNdDRQBz3/Cv/Bv/AEKWhf8Agth/+Jo/4V/4N/6FLQv/AAWw/wDxNdDRQBz3/Cv/AAb/ANCloX/gth/+Jo/4V/4N/wChS0L/AMFsP/xNdDRQBxfwMt4bTTfGltawxwQQ+Lr6OOKNQqooEYCgDgADjFeoV5n8FP8Aj38cf9jjqH8o69MoEFFFFABRRRQAUUUUAebftB/8kJ8Q/wDbt/6UxV1tcl+0H/yQnxD/ANu3/pTFVz/hG9V/6HXXf+/Nj/8AI1AHQ0Vz3/CN6r/0Ouu/9+bH/wCRqP8AhG9V/wCh113/AL82P/yNQB0NFc9/wjeq/wDQ667/AN+bH/5Go/4RvVf+h113/vzY/wDyNQB0NFc9/wAI3qv/AEOuu/8Afmx/+RqP+Eb1X/oddd/782P/AMjUAdDRXPf8I3qv/Q667/35sf8A5Go/4RvVf+h113/vzY//ACNQB0NUdY0ew1/R7jS9Xt1ubO5TZLE3cdeo5BBAII6EVmf8I3qv/Q667/35sf8A5Go/4RvVf+h113/vzY//ACNSavoxptO6MfQvhTpOha7Zaour65qD6eHWyt7++82G1DKVIRdowMHHXsKmHww0ZPDmnaRHc3yLpt//AGha3KunnJLvLddmNuWIxjpitL/hG9V/6HXXf+/Nj/8AI1H/AAjeq/8AQ667/wB+bH/5Gqrvf+u/5i6WM2P4VeE/sGoQXumQ6hPqEs0s19eQxyXIaUkkrJtG3GeMdKqXvwl067OlvD4h8RWM+l2IsIriyvEikeIHOHYJz26YHA4rd/4RvVf+h113/vzY/wDyNR/wjeq/9Drrv/fmx/8AkalsBk3Hwp8Py+D4fDtrNf2MEd2t6bq2nAuJJx/y0aRgct747DGMVueGPDf/AAjNhLa/2zq+r+ZJ5nnatdefInAG0HAwOM49Sah/4RvVf+h113/vzY//ACNR/wAI3qv/AEOuu/8Afmx/+RqdwMbUvhLomoa5ealBqOtaaNQfffWmn3xhgu27l1Ayc5OcEdT610PiHwzZeJbWyt76SeNLK8ivI/JYAl4zlQcg8evf3qv/AMI3qv8A0Ouu/wDfmx/+RqP+Eb1X/oddd/782P8A8jUlokuwbu5RX4Z6CmseI9SjNylx4it2t7rDriNWXDGP5eCepznkUifDbS4mie3v9Sgki0MaGkkcqBlgznfnZ/rOOvT2q/8A8I3qv/Q667/35sf/AJGo/wCEb1X/AKHXXf8AvzY//I1HS39df82O7vf+un+SKtv8OtFsrrw/c6c11ZzaDEYLd4HUedGR8yS5U7gTk8YOSSMVsa1oVtr8dtBqDytawzrO9spHl3BXlVkBBJUNhsAjJAzkcVR/4RvVf+h113/vzY//ACNR/wAI3qv/AEOuu/8Afmx/+Rqd3+pNkRnwPpx8Vf259pu932n7YbTcnkmfyvK8z7u/OzjG7b3xmulrnv8AhG9V/wCh113/AL82P/yNR/wjeq/9Drrv/fmx/wDkal0sPrc6Giue/wCEb1X/AKHXXf8AvzY//I1H/CN6r/0Ouu/9+bH/AORqAOhornv+Eb1X/oddd/782P8A8jUf8I3qv/Q667/35sf/AJGoA6Giue/4RvVf+h113/vzY/8AyNR/wjeq/wDQ667/AN+bH/5GoA6Giue/4RvVf+h113/vzY//ACNR/wAI3qv/AEOuu/8Afmx/+RqAOhrnr3/kpei/9gjUP/R1nR/wjeq/9Drrv/fmx/8AkasK78P6kPiFpER8Xayztpd8wmMNluQCW0yo/wBHxg5BOQT8owRzkA76iue/4RvVf+h113/vzY//ACNR/wAI3qv/AEOuu/8Afmx/+RqBnQ0Vz3/CN6r/ANDrrv8A35sf/kaj/hG9V/6HXXf+/Nj/API1AHQ0Vz3/AAjeq/8AQ667/wB+bH/5Go/4RvVf+h113/vzY/8AyNQB0NFc9/wjeq/9Drrv/fmx/wDkaj/hG9V/6HXXf+/Nj/8AI1AHQ0Vz3/CN6r/0Ouu/9+bH/wCRqP8AhG9V/wCh113/AL82P/yNQB0NFc9/wjeq/wDQ667/AN+bH/5Go/4RvVf+h113/vzY/wDyNQB0NFc9/wAI3qv/AEOuu/8Afmx/+RqP+Eb1X/oddd/782P/AMjUAdDRXPf8I3qv/Q667/35sf8A5Go/4RvVf+h113/vzY//ACNQB0NFc9/wjeq/9Drrv/fmx/8Akaj/AIRvVf8Aoddd/wC/Nj/8jUAX5tEtbrWDqF2ZJ3FubeKKQjZCrffKjGdzDAJJPCgDHOavh7wvbeHfMMV5d3sjxRW6yXRQskMYIjjGxVGBubkgsc8k1F/wjeq/9Drrv/fmx/8Akaj/AIRvVf8Aoddd/wC/Nj/8jUbBuVf+Ff2X2oMuqamtouoDUksVeIRLPv3k58veQWz8rMRzxjAxU03wRJPcXcur3l/Hbtq8l8NPWaMwTES74nPylx0U7VZQSORyc6v/AAjeq/8AQ667/wB+bH/5Go/4RvVf+h113/vzY/8AyNQtHp/W3+SB67/1v/my23h20e61icyTb9YhSGcbhhVVCg28cHDHrmqun+C9K0tdHWy86MaSJPK+cEytIu13kJGWY9c8c/lSf8I3qv8A0Ouu/wDfmx/+RqP+Eb1X/oddd/782P8A8jUrLXzAXSPB9hokmmPYz3QOnWTWS7mU+fESCPM+XkqRkEYxlvWsTwv4AS18HXWmak11arqF7JPcWyzKx8jdhLctg4TywoIUjuARW1/wjeq/9Drrv/fmx/8Akaj/AIRvVf8Aoddd/wC/Nj/8jU/6/G/5h/X6DtR8Habqk2pS3D3CvqCQAtFIFMDQktG8ZAyGDHPORwOMZBgk8EW1zZahHf6nqF5d6gkccl/KYhMiI25FQLGI1AbJ+5ySc5qX/hG9V/6HXXf+/Nj/API1H/CN6r/0Ouu/9+bH/wCRqALGj+HE0rUbrUJ9RvdTvrqNInuLvywRGhYqoWNEUDLMc4zz16VS1bwTDq95qEr6xqVtb6nGkd7ZweT5cyqu3BLRl1yODtYH0xUv/CN6r/0Ouu/9+bH/AORqP+Eb1X/oddd/782P/wAjUAat9pdnqWky6Zew+baSx+W8e4jK/UHIPuDkVR0zw/Pp9zHLca/q2pJCu2KG7kiCrxjJ8uNS5x/fLevXmoP+Eb1X/oddd/782P8A8jUf8I3qv/Q667/35sf/AJGo63DpYt654etddFtJLLPa3dnJ5treWrhZYGxg4yCCCOCrAqR1FZp8C2s0F8uo6pqF/PfSW7y3MxhV8QOHjUBI1UDIOflycnnpif8A4RvVf+h113/vzY//ACNR/wAI3qv/AEOuu/8Afmx/+RqADV/CEGq6tLqCalqFhLcWotLkWjRgTxAkhSXRiv3m5QqeevAxA3gOyVbVbPUtSsvJsY9PmNvKgN1An3VclCQeW+ZNjfMeemJ/+Eb1X/oddd/782P/AMjUf8I3qv8A0Ouu/wDfmx/+RqVtLf11/wA394763/rp/kvuIYvA9vZQ2I0fVdR0yazso7Dz7cws08KfcDiSNlJHJyFB+Y9uK25tPFzosmnXc8lwstuYJJpAoaQFdpYhQFyfYAe1ZX/CN6r/ANDrrv8A35sf/kaj/hG9V/6HXXf+/Nj/API1OXvJp9RLR3RStfC11qHh7w+mo3t5peqaMmxZrRoXLMEMRb50dSGXkcZGecGppPAlm9j5Y1LUEvTfLfvqQMRnkmVdoJBjMeAvyhQgAA6VP/wjeq/9Drrv/fmx/wDkaj/hG9V/6HXXf+/Nj/8AI1Nu7uxJJKwun+DrKwu7e8+03dzeRXMt1JcTMm64kkj8slwqhRhQAAoUDaKht/A1lbzW6f2hfy6ba3H2m30uR4zbxSBiykEIJCFYlgrOVBxxwMS/8I3qv/Q667/35sf/AJGo/wCEb1X/AKHXXf8AvzY//I1LrcfQhl8A6PLBrSMbgSa1L5lzPvBdQGDBEJGFUEE4x1JrXOj258RDWt8n2kWhtNmRs2Fw+cYznI9azv8AhG9V/wCh113/AL82P/yNR/wjeq/9Drrv/fmx/wDkajt5f8MHfzKlj8PrKzW3il1TUry2s1lWzt52iCWxkVlZl2RqzHazAby2MmrLeDoYmtJdL1XUNLuLazSyM9t5LNNEn3Q4kjdSQcnIAPzHtxTv+Eb1X/oddd/782P/AMjUf8I3qv8A0Ouu/wDfmx/+RqP6/r7wNK80mHUfD82kalLLdQ3FubeeRyFeQFdpJ2gAE+wA9q5u78DNDp+oTxanqOq6g2kTadbrdvCqhGAKqAiIoOVHzHnnknAxpf8ACN6r/wBDrrv/AH5sf/kaj/hG9V/6HXXf+/Nj/wDI1KSun5/1+rGna3l/X6DPD/hJNLuLW/vL+/vbqC0+zQJdyIy2qHaWVSqgtkqo3OWbCjnrlJvAmk3Phi00G5e5lsbW4+0AGQBpDuZirEAZU7yCBjI4qT/hG9V/6HXXf+/Nj/8AI1H/AAjeq/8AQ667/wB+bH/5GqpPmd3/AF1JSsrBe+DNNvn1AvJcRi/e1eRY2UBPs7BkCjbwOBnrx0xVHxN4SM3hTxHa6OJ5bjVnE8cPmqiwT/KBIh424ZRIeTyCRyavf8I3qv8A0Ouu/wDfmx/+RqP+Eb1X/oddd/782P8A8jVNr/1/XYa02JLDwpZ2P9j4muJI9Ht/KtoWYbA+3aZTxkuVLDJOPmPGTmqh8C20UGnrp+q6jYTafJcSQzw+SznzmLOCJI2UjJ44z71P/wAI3qv/AEOuu/8Afmx/+RqP+Eb1X/oddd/782P/AMjU3ruJKwln4XtfD0Qu9Jjubm5tbOaKOJpVzcM7+azEnA3s/fIX5jwB0s+E9HfQfCWnabM26aGAec2c5kPzOf8Avomq/wDwjeq/9Drrv/fmx/8Akaj/AIRvVf8Aoddd/wC/Nj/8jUdLf11/zH5j7fwjp9vDo0SyXDpo+/yA7Kd+9GQ7+OeGPTFQaZ4Is9MuLL/iYahd2mmszafY3MiNFaEggbSEDttUlV3s2AePWpP+Eb1X/oddd/782P8A8jUf8I3qv/Q667/35sf/AJGoAt6p4dsdYvo7m/DybLSe08vI2lJtu/PGc4QAc9zWYnw90YabbWUj3c0cGn3Gns0koLzxzFTIzsBksSucjHJPFWP+Eb1X/oddd/782P8A8jUf8I3qv/Q667/35sf/AJGotpb+uv8Amx3YaR4Rj0vWI9Tm1bUdRuYrQ2cZuzEFWIsrYCxxoMgr16nPJOBjP1PwcyaHoekaRLdrDZ6l9oe4WZVliUiVi4OADhnHGCCOCCM1of8ACN6r/wBDrrv/AH5sf/kaj/hG9V/6HXXf+/Nj/wDI1D1t5f53/MSVr/10sVpvh9pd3pclnqVze3xuL5b66nmkVXuXVQoVtiqoTaAu1QvA9zmxqPgvT9Rj1VDPc2/9qLbrIYCg8ryeU2AqQPfIIpf+Eb1X/oddd/782P8A8jUf8I3qv/Q667/35sf/AJGo6WDrcyZ/BV3/AMJNDc3OqahrNnf2sljqiXgtlUwbHKACONDne55HPPNb+j6Hc6TIPM1/U9QgWPy0t7tYCqAYwdyRK5IAxksc55yearf8I3qv/Q667/35sf8A5Go/4RvVf+h113/vzY//ACNQB0NFc9/wjeq/9Drrv/fmx/8Akaj/AIRvVf8Aoddd/wC/Nj/8jUAdDRXPf8I3qv8A0Ouu/wDfmx/+RqP+Eb1X/oddd/782P8A8jUAdDRXPf8ACN6r/wBDrrv/AH5sf/kaj/hG9V/6HXXf+/Nj/wDI1AHQ0Vz3/CN6r/0Ouu/9+bH/AORqP+Eb1X/oddd/782P/wAjUAdDRXPf8I3qv/Q667/35sf/AJGo/wCEb1X/AKHXXf8AvzY//I1AHQ0Vz3/CN6r/ANDrrv8A35sf/kaj/hG9V/6HXXf+/Nj/API1AHQ0Vz3/AAjeq/8AQ667/wB+bH/5Go/4RvVf+h113/vzY/8AyNQB0NFc9/wjeq/9Drrv/fmx/wDkaj/hG9V/6HXXf+/Nj/8AI1AHQ0Vz3/CN6r/0Ouu/9+bH/wCRqP8AhG9V/wCh113/AL82P/yNQBQ+Cn/Hv44/7HHUP5R16ZXl/wADI3h03xpFJPJcOni6+VppAoaQgR/MdoAyevAA9AK9QoEFFFFABRRRQAUUUUAebftB/wDJCfEP/bt/6UxV1tcl+0H/AMkJ8Q/9u3/pTFXW0AFFFFABRRRQAUUUUAFFFFABRRRQBg+M/FMHg3wpd6zcQtcGEBYoEODLIx2que2SevpXLeH/ABb4vk8XWul+JpPCMf2gN5mn2V+ft1r8hcbkZvm6DO31z0rqfGnhaLxj4UutGluGtWlKvFOq7jFIrBlbHfkcj0zXF6R4B8WzfELSvEXimTw3u00ShrrTbd0ub7dH5YMxIAyBg8cDkCiO7v8A1p/n+nmEvh0/p/1+tzE0H4w+Jb3VdL+2r4burbUNS+w/YLCWQX8I3lfMZCxAUBc59x0rpvFXxH1DQ/HUWn2dpayaLZyW0er3UgbzIWuGITbg4GAATnP3hWZpXwm1LQ9N0W90p9Nt/Een6jJNcXEbMiXds7sWidgm5jtKgZBxjim33wWu9ettfudb8SahBf6tcSzfZbG7IsyB/qRIhTL7QFz9OPWknZK/T8dtPzHJJtpdfw1ev5G74r8S+L4vH9n4a8Gx6IXm09r131VZsDa+3AMZ9x29eaw9T+K+tW3g2WdbLTdP16y1iPSr6O9dmtYywP70MpBCd8npg9at3XhLx/Brmh65pFx4fk1Kz0cadd/bpJ2R23ZLrsUE5wOuO/FVdT+FGtXPg2WBb3TdQ1691iPVb6S9RltZCoP7oKoJKdsHrk9OlFrf1/e/+RC99f6+H/M7bwRqmraxoT3WuX2gX0pnZYptAmeSAoAOCzE/NnOfbFczD408a+JNV1KbwTo+ky6Npd21o51CaRJr10+/5RX5VHYFs/zA6XwPpesaPoslrrtj4fsXExaKHQIXjgCkDkqwHzZz09q5i38GeOPDOrapD4L1bRk0bVLt7sjUIZGms3f73lhflb1G7jjp1zf2/l+On/BJ+z8/w1/4BtfErxje+DPDdreafb2xmuruO2M96W+z2u4H55NnzbeMcev4HE1L4g6/ongSw1nVF0J5Z9VitWurOdpbSW3frKh3ArjkfMeNpPSus8XWPiO90uKPwvPpZmDEXFvq0LPBcxkYKtt5HPPHWuBh+EWrJ4V+xtcaVHc3Guw6pPa2yvHZwInDJEpBPPuADwOMVCvr6r81/wAEb2Xo/wAn/wAAval8StcHgXxB4w0qys00i2eOPSftUUhe6HmKjzNhhhDk7RweMn36TV/FV9YeMvCGkwxW7Qa2Lg3LOrbk8uIONhzgcnnIPFYTfDC8/wCEb8SeEor6FPDmofvtNGWMtjKW3mPbjBj3AEcg9R3zUmh+DvF934v0jWfHGo6TImhwSR2UWmJIDKzrsLyFwMHHYcfSqja9n/Wn+f8AwNAf+f6WPRqKKKQBRRRQAUUUUAFFFFABRRRQAVz17/yUvRf+wRqH/o6zroa569/5KXov/YI1D/0dZ0AdDRRRQMKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooA4zVfHa6V4g1rSn+zy3dvawSabZIf8ASLyWQPlQucsAVXJA+UEknHI1bvxRZ6DbW0PiG4Lagbbzp0sLOacKAAHfYgdkjznBbj3qnqHg/wDtbUPEn28xNZ6vZwQRgE743j3/AD9OCCykEHqO1U7bRPFmnXy6pAdJvtQu9MgtL8XFxJEizRbsSoyxsWU+Y2VIXoMNS1s/67/0/kH9fl/wTc1LxboulWdndXN08sN8pa2a0t5LnzVC7iwESsdu3nPTFadlewajp9ve2cnmW9zGssT7SNysMg4PI4PeuR0/wTd2cNnaPcwyWulaVJZWZ3NullkVQ8jjGFA24ABbhjz2rU0PwrHp+n6Qbye6N7YWcUDCDUJ1t2KIFJ8oMEbvyVz0qtLv+u//AAPvFrp/Xb/gkmm+MtE1a+itbOe58ybeIWmsZ4Y5iv3gkjoFcjBOFJ4BPalsvGOh6jqcdhaXjtNMXEDvbypFcFPvCKVlCSEc8Ix4BPQGuS0LwBrFlqOnG8+zww2bzs8y6rcXRlWRXG1IJEEcJ+YEshz8uOjGtHSPCmuRQ+HtM1VtPXT/AA84eC5tpXaW72RtFHujZAI/lbLYZ+RgYpR1Sv8A13+7t1G+p0ur+INP0N7dL83JkuiwhjtrOa4d9oyfliVjwO+KS08SaTfGwFrd7zqKyNbDy2Bby/vggj5SOhDYOeMZFZHjLw9qGtXuk3OnRxy/YmlMkbanPYMwdQBiWFWbt06GsKT4f6h/Zugx3On6JrP9nSXTSWN/K3kgTHKgOYnLlem9lDN1PJpAdpq3iCx0eO6+0yHzbaykvmiCnJij+8c4x1wMda5Lwd4gvdX1i2n1rxM3m3sAlt9Kt9LMFq2EywSeRSZyMg5jcDgnGKm03wDdRWIstQu4ngk0i5sJBEWPk+dLuCRg/wDLNF+ReRwo4Ha5ZaDr13qGhnXhp8MGhkvHJZzPI93J5RiBKsiiJcMxKgvyQM4HNR31/rV/pb9BPy/rRW/G/wCprt4r0RLfTpnv0VNUn+z2YKNumkyRgLjPY8kYFU4fHmhTXNzAG1FJLSMy3Hm6TdRiFQpbLFowFyFJGTz2zWBp/wAOr+3tdMlvbyC41Cz1COUNlhHBbLIXMcfGdzHDMTjJA7KuNu58M3c934rkEsITWrSOCDk5RlidCW44GWHTNRd8jfX/AIC/r+rlK3Ml0/4c27jV7G10Y6tPPsshEJTLsY/IcYOAM9x2qtN4n0i3uLm3mu9s9tPFbyReU+/fLjywq4ywOeq5HDc/KccPbfDjUV026hhstF0RpNMFkYNOlYx3cm5T50p8pOVCkD5WPztzWxqnhDVb7xtH4pjmslu7CSOKxgYfI9tgiXzG2bg53ttxkLtA/iatGlzJLb+v6/4axCbs7nValqlppFr9ovpGVCwRFjjaR5GPRVRAWY8E4AJwCe1ZzeM9BTSU1GS9eK3e4NqBJbypIJhn92Yyu8OccKRk5GM5GU8W6Zq2qadbxaLcCMpcK9xCbqS1+0RgHKedGC8fODlRzjHQmuMbw7rHhyxsk32j3t34lF3Akl1NcIAbdhseV/nJ+Ujfz2O3+GoW+vdfmv8AN/cW9tPP8n/kvvOtn8feH7bTGv5Z7wW6SNFKV025ZoHXGVlUR7oz8y43gZyCM1oWviLTbttqyywP9nNyUu7aS3ZYgxUswkVSoyD1xxz05rm7jwhq2o+HfEa3j2UOp65cJL5ccrvDCqLGirvKAtxHnO0cnGOM1e1vwlNrni2G7ublF0j7H5F1agHfckSbgjdvLP8AEOrYx0Jy+qX9bf5i6P8Arr/kaNl4t0PUIbGazv1kiv4ZZ7Z/LYCRIiA7ZI4AyOuM9s0WPi3RNRhnltb3KW9ol7IZIXj2wuCVfDKMghW/KuVX4b3N1aaJa6ncp5VjBfRzm3nkUs07hk4wA64B3K/ynoQwqt4n0TVLu48K2NxLaJqGoxNpurrbhvLmtVAkkKcDb9zA4480ilv/AF6/8C4dE3/X9anV6j450DSo7eS9urhVuLYXaGOxnk2wkgb32odgyR97FS6l4x0PSLx7a/vHR4whmdLaWSO3Dn5TLIqlIgevzkcc9KyNc8I6hrUHiBme1imvbNLCwjEjFIolYtuY7eGYtyADgKvJqLUfCuulvENhprae+neITumnuJXWa0LRLDJtQKRJ8qArlk5JBzT/AK/yX3At9f67/ibd/wCM9E0zUJbO8nuVkg2GaRLGd4YQ/wB0vKqFEHuWGO9aWp6naaPpk2oahI0dtCAXZY2c8nAwqgk8kcAVwWv+ANWvtS1H7ALdre8gghiml1a4i8ny027ntkQxz+u1zg9DxXWeK9Gutb8H3ml2rxm5mjVVaSRolJDAn5lBK5x1A4pPZ2BXurlnSdf0/W2nSxecS25USw3NrLbyJuGQSkiq2Dg4OMHB9DQviHS38RS6Et0P7ShtxcvAUYYjJxu3EbTyRwDmsbwh4c1HR9U1K9vxFAl2kSLbrqE1++U3Zdp5lD87gAnQYyOWNZ+veBtT1LUtR1Gxvbe3vLi8j8mRix2WptxDKnA4Y5dgORkJk+je+n9f1v6AvM37bxloV5ov9rWl409oZjAjR28jPI4/hSMLvc45G0HI5HHND+M9ETR11Nri48hrn7IEFlMZhNnHlmEJ5gb2K+h7isCfwZrFlaX1roFzDDZzaml0lol3Lal4BCiNEZo1Lxneu7K5yBg9TUel+BdVtdPWO4mthIfEEeqkG7mn2xKqgp5kg3uwwRk9evy9ALV/d+l/zf3Cd0vv/W36fedJeeMNIsLaKa6a9AkiM3lpp1w8scY/ikjVC0Y4PLgdD6Uah4w0TS9hu7mUxtEs5ngtZZoo42+67yIpVFOCcsQMAnoKyPF/hvXtb1NjY3KvYSWhhWE6ncWf2eUk5lIhH74EEfIzKBt4I3E1R1TwZrl34X0zRYhZv9m0+K2M51K4hSKRVAZjAqmO5XIBCybRxg8E0LXf+t/+B943vb+un/BOuuvEOlWMWoy3d6kMemIsl27ggRKy7gc45yPTPp1qS01qwvp4YbWfzJJ7VbyMbGG6JjgNyP06+1cvqPga81TW9Wury9iktLiCM21sAVDXKxlVll46KeVAzgnd1VcS2/gZpb3TJNSuZljstHisW+w6hcWzNIpGTmNlLLxxk/hSW+v9aP8AyX3/AHLp/Xdfpf8ArfYn8W6NBY210bmWVLqR44I7e1lmllKEh9saKXIBU5OMD8RWhp2o2uq6fFfafMJreUZVsEH0IIOCCCCCCAQQQRmuEk+HuoQ6fohtpVnudLF1E0I1S5tBLHNJvB+0Rgybhhcggg5OeQDXXeGdJ/sfQ0tTaJaSNJJLJGl9LeDezFi3mygOxOcnI6k/Wn0Y+xV0/wAcaFql9a2tpNeeZeFhbPLp1xFHNtBY7ZHjCngE8GpbLxjoeo6nHYWl47TTFxA728qRXBT7wilZQkhHPCMeAT0BrJtPB17FY+Freea3/wCJQJhclGb5g8ToNmV55YdcVDpHhTXIofD2maq2nrp/h5w8FzbSu0t3sjaKPdGyAR/K2Wwz8jAxQt/6+f3fiD/r+v6sdNqviDTNEuLGHVLryJNQnFtbAozB5D0XIBA+pwKYniXSH1e+0wXqC60+ITXSsrKsSYByXI29CCRnIBGazPFfhOTxPe2++VI7aGyuoup3LNJsEbgYx8u1jnPXHHplWXgrXbR47+LUrWDWLjTruK9uo1LL9pldHR0VhyqFSOccAcGlr+f/AAPxX4of9f5m/B4z0e4Fx5Jvy9vGsrQnTLkSOhbaHRDHukXPdAQO9QQ/EHw5Ppwv1urqO1aUQxyzafcRCVzuwiboxvbKMMLk5wOpAOV4W8I6xpvitNX1Ro1RdPa0aP8Ata6v3Zy6NvDTAbQdp+VQMYHJzxVvNH1PQPC/hfTontJL+HWCy7i3lMWE7gE4BGQcZwcHnBxgt6W83+tvyJWt/wCulzrLTxVo97bRzQXTgPdCz2SwSRyJMRkIyMoZDjn5gOCD0IpJPFuhxNqStqCE6XJHFebEZvJeQ4VTgcnJ7Zx3xXNXPg3X76C6uzeWVhql7q8N67Qs0yW0ccYiAQsq73wNwyqjJwcgcpd/D65g03X7TRTbLHfC0Nqs8z5LRPvcyNtJyzEnd8xJJJo6Xf8AWi/4I3vZf1v/AMA7GTWNPi1CexmuVjnt7YXcwcFVSIlgHLHjGUbvxiqukeKdJ1y4MGnzTeb5QmVbi0lg8yMnG9PMVd69PmXI5HqK43VdN1vUvFc1rrtpYWUPiPSn0pXs757hoCiyybyGhTIO/GM9q1/C3ha803VobrVbGMS29s0Md0PEF5ennbuAhmXagbaDwxIwBz1oj5/1v/wAfl/W3/BOzooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooA4/4Kf8e/jj/scdQ/lHXpleZ/BT/j38cf8AY46h/KOvTKBBRRRQAUUUUAFFFFAHJfFLwpfeN/hrqnh7SpbeG7vPJ8t7lmWMbJkc5Kgnop7da5n+zvjV/e8Bfnef4V6nRQB5Z/Z3xq/veAvzvP8ACj+zvjV/e8Bfnef4V6nRQB5Z/Z3xq/veAvzvP8KP7O+NX97wF+d5/hXqdFAHln9nfGr+94C/O8/wo/s741f3vAX53n+Fep0UAeWf2d8av73gL87z/Cj+zvjV/e8Bfnef4V6nRQB5Z/Z3xq/veAvzvP8ACj+zvjV/e8Bfnef4V6nRQB5Z/Z3xq/veAvzvP8KP7O+NX97wF+d5/hXqdFAHln9nfGr+94C/O8/wo/s741f3vAX53n+Fep0UAeWf2d8av73gL87z/Cj+zvjV/e8Bfnef4V6nRQB5Z/Z3xq/veAvzvP8ACj+zvjV/e8Bfnef4V6nRQB5Z/Z3xq/veAvzvP8KP7O+NX97wF+d5/hXqdFAHln9nfGr+94C/O8/wo/s741f3vAX53n+Fep0UAeWf2d8av73gL87z/Cj+zvjV/e8Bfnef4V6nRQB5Z/Z3xq/veAvzvP8ACj+zvjV/e8Bfnef4V6nRQB5Z/Z3xq/veAvzvP8KP7O+NX97wF+d5/hXqdFAHln9nfGr+94C/O8/wo/s741f3vAX53n+Fep0UAeWf2d8av73gL87z/Cj+zvjV/e8Bfnef4V6nRQB5Z/Z3xq/veAvzvP8ACqUvhv4xy65a6q0ngYT2ttNbIoa82lZWiZiRjOcwrjnuevGPYKKAPLP7O+NX97wF+d5/hR/Z3xq/veAvzvP8K9TooA8s/s741f3vAX53n+FH9nfGr+94C/O8/wAK9TooA8s/s741f3vAX53n+FH9nfGr+94C/O8/wr1OigDyz+zvjV/e8Bfnef4Uf2d8av73gL87z/CvU6KAPLP7O+NX97wF+d5/hR/Z3xq/veAvzvP8K9TooA8s/s741f3vAX53n+FH9nfGr+94C/O8/wAK9TooA8s/s741f3vAX53n+FH9nfGr+94C/O8/wr1OigDyz+zvjV/e8Bfnef4Uf2d8av73gL87z/CvU6KAPLP7O+NX97wF+d5/hR/Z3xq/veAvzvP8K9TooA8s/s741f3vAX53n+FH9nfGr+94C/O8/wAK9TooA8s/s741f3vAX53n+FH9nfGr+94C/O8/wr1OigDyz+zvjV/e8Bfnef4Uf2d8av73gL87z/CvU6KAPLP7O+NX97wF+d5/hR/Z3xq/veAvzvP8K9TooA8s/s741f3vAX53n+FH9nfGr+94C/O8/wAK9TooA8s/s741f3vAX53n+FH9nfGr+94C/O8/wr1OigDyz+zvjV/e8Bfnef4Uf2d8av73gL87z/CvU6KAPLP7O+NX97wF+d5/hR/Z3xq/veAvzvP8K9TooA8s/s741f3vAX53n+FH9nfGr+94C/O8/wAK9TooA8s/s741f3vAX53n+FH9nfGr+94C/O8/wr1OigDyz+zvjV/e8Bfnef4Uf2d8av73gL87z/CvU6KAPLP7O+NX97wF+d5/hR/Z3xq/veAvzvP8K9TooA8s/s741f3vAX53n+FH9nfGr+94C/O8/wAK9TooA8s/s741f3vAX53n+FH9nfGr+94C/O8/wr1OigDyz+zvjV/e8Bfnef4Uf2d8av73gL87z/CvU6KAPLP7O+NX97wF+d5/hR/Z3xq/veAvzvP8K9TooA8s/s741f3vAX53n+FH9nfGr+94C/O8/wAK9TooA8s/s741f3vAX53n+FH9nfGr+94C/O8/wr1OigDyz+zvjV/e8Bfnef4Uf2d8av73gL87z/CvU6KAPLP7O+NX97wF+d5/hR/Z3xq/veAvzvP8K9TooA8s/s741f3vAX53n+FH9nfGr+94C/O8/wAK9TooA8s/s741f3vAX53n+FH9nfGr+94C/O8/wr1OigDyz+zvjV/e8Bfnef4Uf2d8av73gL87z/CvU6KAPLP7O+NX97wF+d5/hR/Z3xq/veAvzvP8K9TooA8s/s741f3vAX53n+FH9nfGr+94C/O8/wAK9TooA8s/s741f3vAX53n+FH9nfGr+94C/O8/wr1OigDyz+zvjV/e8Bfnef4Uf2d8av73gL87z/CvU6KAPLP7O+NX97wF+d5/hR/Z3xq/veAvzvP8K9TooA8s/s741f3vAX53n+FH9nfGr+94C/O8/wAK9TooA8s/s741f3vAX53n+FH9nfGr+94C/O8/wr1OigDyz+zvjV/e8Bfnef4Uf2d8av73gL87z/CvU6KAPLP7O+NX97wF+d5/hR/Z3xq/veAvzvP8K9TooA8s/s741f3vAX53n+FH9nfGr+94C/O8/wAK9TooA4f4WeEtb8JaPrS+JpdPlv8AVdZn1Jv7PZzEvmqmQN4BHKtxzxjk13FFFABRRRQAUUUUAFFFFABRXm37Qf8AyQnxD/27f+lMVct/wpX4f/8AQA/8nLj/AOLoA9yorw3/AIUr8P8A/oAf+Tlx/wDF0f8AClfh/wD9AD/ycuP/AIugD3KivDf+FK/D/wD6AH/k5cf/ABdH/Clfh/8A9AD/AMnLj/4ugD3KivDf+FK/D/8A6AH/AJOXH/xdH/Clfh//ANAD/wAnLj/4ugD3KivDf+FK/D//AKAH/k5cf/F0f8KV+H//AEAP/Jy4/wDi6APcqK8N/wCFK/D/AP6AH/k5cf8AxdH/AApX4f8A/QA/8nLj/wCLoA9yorw3/hSvw/8A+gB/5OXH/wAXR/wpX4f/APQA/wDJy4/+LoA9yorw3/hSvw//AOgB/wCTlx/8XR/wpX4f/wDQA/8AJy4/+LoA9yorw3/hSvw//wCgB/5OXH/xdH/Clfh//wBAD/ycuP8A4ugD3KivDf8AhSvw/wD+gB/5OXH/AMXR/wAKV+H/AP0AP/Jy4/8Ai6APcqK8N/4Ur8P/APoAf+Tlx/8AF0f8KV+H/wD0AP8AycuP/i6APcqK8N/4Ur8P/wDoAf8Ak5cf/F0f8KV+H/8A0AP/ACcuP/i6APcqK8N/4Ur8P/8AoAf+Tlx/8XR/wpX4f/8AQA/8nLj/AOLoA9yorw3/AIUr8P8A/oAf+Tlx/wDF0f8AClfh/wD9AD/ycuP/AIugD3KivDf+FK/D/wD6AH/k5cf/ABdH/Clfh/8A9AD/AMnLj/4ugD3KivDf+FK/D/8A6AH/AJOXH/xdH/Clfh//ANAD/wAnLj/4ugD3KivDf+FK/D//AKAH/k5cf/F0f8KV+H//AEAP/Jy4/wDi6APcqK8N/wCFK/D/AP6AH/k5cf8AxdH/AApX4f8A/QA/8nLj/wCLoA9yorw3/hSvw/8A+gB/5OXH/wAXR/wpX4f/APQA/wDJy4/+LoA9yorw3/hSvw//AOgB/wCTlx/8XR/wpX4f/wDQA/8AJy4/+LoA9yorw3/hSvw//wCgB/5OXH/xdH/Clfh//wBAD/ycuP8A4ugD3KivDf8AhSvw/wD+gB/5OXH/AMXR/wAKV+H/AP0AP/Jy4/8Ai6APcqK8N/4Ur8P/APoAf+Tlx/8AF0f8KV+H/wD0AP8AycuP/i6APcqK8N/4Ur8P/wDoAf8Ak5cf/F0f8KV+H/8A0AP/ACcuP/i6APcqK8N/4Ur8P/8AoAf+Tlx/8XR/wpX4f/8AQA/8nLj/AOLoA9yorw3/AIUr8P8A/oAf+Tlx/wDF0f8AClfh/wD9AD/ycuP/AIugD3KivAr/AOFfwu0pA+qWFrZK3RrjU5Ywf++pBVsfBb4fkZGgZH/X7P8A/HKAPcqK8N/4Ur8P/wDoAf8Ak5cf/F0f8KV+H/8A0AP/ACcuP/i6APcqK8N/4Ur8P/8AoAf+Tlx/8XR/wpX4f/8AQA/8nLj/AOLoA9yorw3/AIUr8P8A/oAf+Tlx/wDF0f8AClfh/wD9AD/ycuP/AIugD3KivDf+FK/D/wD6AH/k5cf/ABdH/Clfh/8A9AD/AMnLj/4ugD3KivDf+FK/D/8A6AH/AJOXH/xdH/Clfh//ANAD/wAnLj/4ugD3KivDf+FK/D//AKAH/k5cf/F0f8KV+H//AEAP/Jy4/wDi6APcqK8N/wCFK/D/AP6AH/k5cf8AxdH/AApX4f8A/QA/8nLj/wCLoA9yorw3/hSvw/8A+gB/5OXH/wAXR/wpX4f/APQA/wDJy4/+LoA9yorw3/hSvw//AOgB/wCTlx/8XR/wpX4f/wDQA/8AJy4/+LoA9yorw3/hSvw//wCgB/5OXH/xdH/Clfh//wBAD/ycuP8A4ugD3KivDf8AhSvw/wD+gB/5OXH/AMXR/wAKV+H/AP0AP/Jy4/8Ai6APcqK8N/4Ur8P/APoAf+Tlx/8AF0f8KV+H/wD0AP8AycuP/i6APcqK8N/4Ur8P/wDoAf8Ak5cf/F0f8KV+H/8A0AP/ACcuP/i6APcqK8N/4Ur8P/8AoAf+Tlx/8XR/wpX4f/8AQA/8nLj/AOLoA9yorw3/AIUr8P8A/oAf+Tlx/wDF0f8AClfh/wD9AD/ycuP/AIugD3KivDf+FK/D/wD6AH/k5cf/ABdH/Clfh/8A9AD/AMnLj/4ugD3KivDf+FK/D/8A6AH/AJOXH/xdH/Clfh//ANAD/wAnLj/4ugD3KivDf+FK/D//AKAH/k5cf/F0f8KV+H//AEAP/Jy4/wDi6APcqK8N/wCFK/D/AP6AH/k5cf8AxdH/AApX4f8A/QA/8nLj/wCLoA9yorw3/hSvw/8A+gB/5OXH/wAXR/wpX4f/APQA/wDJy4/+LoA9yorw3/hSvw//AOgB/wCTlx/8XR/wpX4f/wDQA/8AJy4/+LoA9yorw3/hSvw//wCgB/5OXH/xdH/Clfh//wBAD/ycuP8A4ugD3KivDf8AhSvw/wD+gB/5OXH/AMXR/wAKV+H/AP0AP/Jy4/8Ai6APcqK8N/4Ur8P/APoAf+Tlx/8AF0f8KV+H/wD0AP8AycuP/i6APcqK8N/4Ur8P/wDoAf8Ak5cf/F0f8KV+H/8A0AP/ACcuP/i6APcqK8N/4Ur8P/8AoAf+Tlx/8XR/wpX4f/8AQA/8nLj/AOLoA9yorw3/AIUr8P8A/oAf+Tlx/wDF0f8AClfh/wD9AD/ycuP/AIugD3KivDf+FK/D/wD6AH/k5cf/ABdH/Clfh/8A9AD/AMnLj/4ugD3KivDf+FK/D/8A6AH/AJOXH/xdH/Clfh//ANAD/wAnLj/4ugD3KivDf+FK/D//AKAH/k5cf/F0f8KV+H//AEAP/Jy4/wDi6APcqK8N/wCFK/D/AP6AH/k5cf8AxdH/AApX4f8A/QA/8nLj/wCLoA9yorw3/hSvw/8A+gB/5OXH/wAXR/wpX4f/APQA/wDJy4/+LoA9yorw3/hSvw//AOgB/wCTlx/8XR/wpX4f/wDQA/8AJy4/+LoA9yoryj9n+yt9N8P+LLGyj8q2tfFN5DCm4naipEFGTyeAOter0AFFFFABRRRQAUUUUAebftB/8kJ8Q/8Abt/6UxVpVm/tB/8AJCfEP/bt/wClMVVP+E58Jf8AQ0aL/wCDCL/4qgZu0Vhf8Jz4S/6GjRf/AAYRf/FUf8Jz4S/6GjRf/BhF/wDFUAbtFYX/AAnPhL/oaNF/8GEX/wAVR/wnPhL/AKGjRf8AwYRf/FUAbtFYX/Cc+Ev+ho0X/wAGEX/xVH/Cc+Ev+ho0X/wYRf8AxVAG7RWF/wAJz4S/6GjRf/BhF/8AFUf8Jz4S/wCho0X/AMGEX/xVAG7RWF/wnPhL/oaNF/8ABhF/8VR/wnPhL/oaNF/8GEX/AMVQBu0Vhf8ACc+Ev+ho0X/wYRf/ABVH/Cc+Ev8AoaNF/wDBhF/8VQBu0Vhf8Jz4S/6GjRf/AAYRf/FUf8Jz4S/6GjRf/BhF/wDFUAbtFYX/AAnPhL/oaNF/8GEX/wAVR/wnPhL/AKGjRf8AwYRf/FUAbtFYX/Cc+Ev+ho0X/wAGEX/xVH/Cc+Ev+ho0X/wYRf8AxVAG7RWF/wAJz4S/6GjRf/BhF/8AFUf8Jz4S/wCho0X/AMGEX/xVAG7RWF/wnPhL/oaNF/8ABhF/8VR/wnPhL/oaNF/8GEX/AMVQBu0Vhf8ACc+Ev+ho0X/wYRf/ABVH/Cc+Ev8AoaNF/wDBhF/8VQBu0Vhf8Jz4S/6GjRf/AAYRf/FUf8Jz4S/6GjRf/BhF/wDFUAbtFYX/AAnPhL/oaNF/8GEX/wAVR/wnPhL/AKGjRf8AwYRf/FUAbtFYX/Cc+Ev+ho0X/wAGEX/xVH/Cc+Ev+ho0X/wYRf8AxVAG7RWF/wAJz4S/6GjRf/BhF/8AFUf8Jz4S/wCho0X/AMGEX/xVAG7RWF/wnPhL/oaNF/8ABhF/8VR/wnPhL/oaNF/8GEX/AMVQBu0Vhf8ACc+Ev+ho0X/wYRf/ABVH/Cc+Ev8AoaNF/wDBhF/8VQBu0Vhf8Jz4S/6GjRf/AAYRf/FUf8Jz4S/6GjRf/BhF/wDFUAbtFYX/AAnPhL/oaNF/8GEX/wAVR/wnPhL/AKGjRf8AwYRf/FUAbtFYX/Cc+Ev+ho0X/wAGEX/xVH/Cc+Ev+ho0X/wYRf8AxVAG7RWF/wAJz4S/6GjRf/BhF/8AFUf8Jz4S/wCho0X/AMGEX/xVAG7RWF/wnPhL/oaNF/8ABhF/8VR/wnPhL/oaNF/8GEX/AMVQBu0Vhf8ACc+Ev+ho0X/wYRf/ABVH/Cc+Ev8AoaNF/wDBhF/8VQBhfFi/vLbw7p1jY3clkuq6nBYz3MZIaON87sHsePyzXNeJ/CWmfDvVPDeq+DvtFld3OqQ2dxD9od1u0fO7cGJ547cc9Oldd4i1jwD4p0WXStZ8RaNLbSkEhdSiVlYchgQ3BFYOj6Z8PNL1e21K78cprNzZ/wDHodV1yKZbf3QZAH60R0d/P8NNP67hLVfL+n/XY4+abU/tHijxjd+HdD1e1stVkhnOqbnm8tGVFSFSNqYBHJyTnpxXb6l458T3uratD4O07TGtNEt45rs6i7h5SyeZtjCnAOOMnjNVL/Q/hpqOtXF9N4xt0t7ucXF1psetxLa3Eg53Omckk89ak17S/h1rurT3/wDwm0WnPdxrFeRafrcUUd0qjAEi5ORjjjHFJX5Uv6vYbtzN/wBblHxL8WtW06x0bVdN/sWOz1S1SaOyvRObh23YdQ6gRqBkcsR3PtV/W/i7B4f17xHpmqy2tvLZ2sUmlp5MkhnlaLeVdlyMbioz8vB696brGkfDjV/JjHjWGws0gjt5LGy1yOOCeNPuq6knPHGeD+PNaCt8Pkm114/FmnINctY7WdBqcGI0SMxrs9DtPfPNN7O3n/wP61FHpfy/T/gmJ4n+K2raNouiXsFx4fhlvtMjvJbe6W4aSR2GSsax5CjsC5/Hipr/AOMLaW8j6rDBZQ3eiRX2l74JX86d0z5ZZeCoPH8P1pLzQfhveG0x44S2+z2CadILbW4YxcwqMAS4+9+GAfSujTWPA6eDx4bHi3S/sYsvsO/+0oPM2bNmc5xux7Yz2ols7d9PTX/gBHdX/rb/AIJyOu/GW90+y0OKA6TaXt9psd9cz30c7QLu6IixBmycE5PGKvr8YootO8KapqS29lp2qm5S/kMckhiaLhSm3nBbHVTwfxp13pXw8uLbTEtfHSabc6baizjvbDW4YZpIh0V2HBGeegq/by+B4rrQrmfx1b3txofneRNd6vBI8vmjDeYx5bA6Yx+NVpd+v4a/8AXRen42/wAzNg+LFzdaONVg+wGxfxMumJM8bqPshG7zDlgQ+OcnA9qYnxevbjT/ABXqNppSG00sWxsFlDI0iykjzZDn7vRgABwfxqe90r4a6hZXNpeeLbGWC61c6vKh1S3w0pGCn+4R26+9T39v8Pr59aI8Z2dqutJBHcpbapboAkI2hE9FI4Pt0xU9P67L/glaX/ru/wBC58PPGWr+JdX1qw1ibRbn+zlgMdxozO8UnmBifmZjnGAO2DmoNb8Z+KZfEGt2fhGw0uS20CJXvH1B3DzEpv2xhcAHAPLcZqfQJvh14Y1XUb3RfEWjWw1BYle3S/gWKPy1IG0AggnJJyTk1m6/pvw81/WLjUW8bxafJeRrHex2GtxRR3agYAkXJzxx24olq1bt+Io6b/13Gaj478YXK+Hb3w5baGlj4g2R26XwmaSKUqSwcqQNoIIBAz7VT134v3/huLXtP1iOxh12zkiFhALaYx3KnbvbOenLY5Xt1rpLq8+H9x/Yip4n0q3i0OUSWkUOpQheF2gNkkkY+h96n8S6z4H8VeHbrRtQ8WaXHb3IXe0GpQBxtYMMEkjqB2o6u3f8NP8AghHpfyOS8YfGW70XxHPpmmnSoPsUUbTf2gk7NcOyhikXlghcAgZfjJ9q0tY8beMXfw7deHbfQlsfECxLbLfCZpI5Gj3sHKkDaOgIBPtRq9j4C1PVm1K08f8A9jXUsaRzvpWuxQeeFGFL9ckDitS71DwPfHRGuvGdjLJosqywyNqkBaVgm3MhJ+bI5OMc0aW+a+7qLX8PxKGo+M/GEuq6rZ+HrDR5P7At431J7p5B50hj3ssIGMDg4LVh+JvjNqNl/ZU2kjSbOC+0pb7GpRzyMXLMvlqYu/y8EgD3Fa2v6b8PNf1i41FvG8WnyXkax3sdhrcUUd2oGAJFyc8cduKbrGl/DzVbq1mt/HMeki2slsFj03WoYlaAEkI3Ukc+vNLW39ef62sVp/Xy/wCCdTpWt6/q0nh67g0+z/su+smmv5knDmGTaCioQ3zAnPY/Ud+nrgLRvh5Y6jot3Z+KdNh/sW2ktrWJdViKFXAB3ZOSePWui/4Tnwl/0NGi/wDgwi/+Kqnbp/WpKv1N2isL/hOfCX/Q0aL/AODCL/4qj/hOfCX/AENGi/8Agwi/+KpDN2isL/hOfCX/AENGi/8Agwi/+Ko/4Tnwl/0NGi/+DCL/AOKoA3aKwv8AhOfCX/Q0aL/4MIv/AIqj/hOfCX/Q0aL/AODCL/4qgDdorC/4Tnwl/wBDRov/AIMIv/iqP+E58Jf9DRov/gwi/wDiqAN2isL/AITnwl/0NGi/+DCL/wCKo/4Tnwl/0NGi/wDgwi/+KoA3aKwv+E58Jf8AQ0aL/wCDCL/4qj/hOfCX/Q0aL/4MIv8A4qgDdorC/wCE58Jf9DRov/gwi/8AiqP+E58Jf9DRov8A4MIv/iqAN2isL/hOfCX/AENGi/8Agwi/+Ko/4Tnwl/0NGi/+DCL/AOKoA3aKwv8AhOfCX/Q0aL/4MIv/AIqj/hOfCX/Q0aL/AODCL/4qgDdorC/4Tnwl/wBDRov/AIMIv/iqP+E58Jf9DRov/gwi/wDiqAN2isL/AITnwl/0NGi/+DCL/wCKo/4Tnwl/0NGi/wDgwi/+KoA3aKwv+E58Jf8AQ0aL/wCDCL/4qj/hOfCX/Q0aL/4MIv8A4qgDdorC/wCE58Jf9DRov/gwi/8AiqP+E58Jf9DRov8A4MIv/iqAN2isL/hOfCX/AENGi/8Agwi/+Ko/4Tnwl/0NGi/+DCL/AOKoA3aKwv8AhOfCX/Q0aL/4MIv/AIqj/hOfCX/Q0aL/AODCL/4qgDdorC/4Tnwl/wBDRov/AIMIv/iqP+E58Jf9DRov/gwi/wDiqAN2isL/AITnwl/0NGi/+DCL/wCKo/4Tnwl/0NGi/wDgwi/+KoA3aKwv+E58Jf8AQ0aL/wCDCL/4qj/hOfCX/Q0aL/4MIv8A4qgDdorC/wCE58Jf9DRov/gwi/8AiqP+E58Jf9DRov8A4MIv/iqAN2isL/hOfCX/AENGi/8Agwi/+Ko/4Tnwl/0NGi/+DCL/AOKoA3aKwv8AhOfCX/Q0aL/4MIv/AIqj/hOfCX/Q0aL/AODCL/4qgDdorC/4Tnwl/wBDRov/AIMIv/iqP+E58Jf9DRov/gwi/wDiqAN2isL/AITnwl/0NGi/+DCL/wCKo/4Tnwl/0NGi/wDgwi/+KoA3aKwv+E58Jf8AQ0aL/wCDCL/4qj/hOfCX/Q0aL/4MIv8A4qgCT4Hf8g/xr/2N19/KOvUK8s+A08N1o/jC4tpUmhl8WXrxyRsGV1KxEEEcEEd69ToEFFFFABRRRQAUUUUAebftB/8AJCfEP/bt/wClMVXP+Ff+Df8AoUtC/wDBbD/8TVP9oP8A5IT4h/7dv/SmKutoA57/AIV/4N/6FLQv/BbD/wDE0f8ACv8Awb/0KWhf+C2H/wCJroaKAOe/4V/4N/6FLQv/AAWw/wDxNH/Cv/Bv/QpaF/4LYf8A4muhooA57/hX/g3/AKFLQv8AwWw//E0f8K/8G/8AQpaF/wCC2H/4muhooA57/hX/AIN/6FLQv/BbD/8AE0f8K/8ABv8A0KWhf+C2H/4muhooA57/AIV/4N/6FLQv/BbD/wDE0f8ACv8Awb/0KWhf+C2H/wCJroaKAOe/4V/4N/6FLQv/AAWw/wDxNH/Cv/Bv/QpaF/4LYf8A4mugPQ182eEPEmtJr+hXs+t+Ko0n1Z7e8uNTd5NLkjLsFjjOD85wBzgA55GKI6y5QekXI9z/AOFf+Df+hS0L/wAFsP8A8TR/wr/wb/0KWhf+C2H/AOJrzxj4nXx4/wAPRqWo/Zpb4asup/an81dP6mHfnd/rAE69K6v4n6zqthY6LpOhXf8AZ9zrmpR2Jvtu426HJYqD/EQMD8enWjdJrr/wP10+QbNp9P6/LX5mx/wr/wAG/wDQpaF/4LYf/iaP+Ff+Df8AoUtC/wDBbD/8TXm2k37aPrXiXRoNa8bSXVto11NjXypjcoQqzwPncBnOMDB9eKr/AA9ubyfwfquqy3/jprxdDkcy6zMTZO5TO+3PUkEcHOcGk3o35X/P/IdndLzt+X+Z6j/wr/wb/wBCloX/AILYf/iaP+Ff+Df+hS0L/wAFsP8A8TXj0PirxDpHwpvNL1fVr19Qns7PVNM1I3D+bLDLJF5ke/OcozEdfusO1dTdaLqHi34seJLH/hK9f0mHT7W0e2j0++McYZ0OSyHIIyAcDGeappp/f+H9WJTur/10/wAzuP8AhX/g3/oUtC/8FsP/AMTR/wAK/wDBv/QpaF/4LYf/AImvG9V8X65rXhjwgb+/18yvfXtpeP4bYx3N4IuFZVHBPQnt97FaXjO6u9N0DwRa2+oeOkt7uS5NwkcxGrSDG4KwHBKk9D0UVN9L/wBalW1t6/hf/I9S/wCFf+Df+hS0L/wWw/8AxNH/AAr/AMG/9CloX/gth/8Aia8s06fxvrXwgF1o2papfQNqzMpiu0/tJtPXjb5gyBLkcj73b2rvvhdqVtf+HLiK21fVtRa1umSSPW023locA+VIf4j1Ib3x2qrb/wBdv8yb7f13/wAjV/4V/wCDf+hS0L/wWw//ABNH/Cv/AAb/ANCloX/gth/+JroaKQznv+Ff+Df+hS0L/wAFsP8A8TR/wr/wb/0KWhf+C2H/AOJroaKAOe/4V/4N/wChS0L/AMFsP/xNH/Cv/Bv/AEKWhf8Agth/+JroaKAOe/4V/wCDf+hS0L/wWw//ABNH/Cv/AAb/ANCloX/gth/+JroaKAOe/wCFf+Df+hS0L/wWw/8AxNH/AAr/AMG/9CloX/gth/8Aia6GigDnv+Ff+Df+hS0L/wAFsP8A8TWFd+B/Ca/ELSLZfDGjCCTS76R4hp8W1mWW0CsRtwSAzAHtuPqa76uevf8Akpei/wDYI1D/ANHWdAB/wr/wb/0KWhf+C2H/AOJo/wCFf+Df+hS0L/wWw/8AxNdDRQM57/hX/g3/AKFLQv8AwWw//E0f8K/8G/8AQpaF/wCC2H/4muhooA57/hX/AIN/6FLQv/BbD/8AE0f8K/8ABv8A0KWhf+C2H/4muhooA57/AIV/4N/6FLQv/BbD/wDE0f8ACv8Awb/0KWhf+C2H/wCJroaKAOe/4V/4N/6FLQv/AAWw/wDxNH/Cv/Bv/QpaF/4LYf8A4muhooA57/hX/g3/AKFLQv8AwWw//E0f8K/8G/8AQpaF/wCC2H/4muhooA57/hX/AIN/6FLQv/BbD/8AE0f8K/8ABv8A0KWhf+C2H/4muhooA57/AIV/4N/6FLQv/BbD/wDE0f8ACv8Awb/0KWhf+C2H/wCJroaKAOe/4V/4N/6FLQv/AAWw/wDxNH/Cv/Bv/QpaF/4LYf8A4muhooA57/hX/g3/AKFLQv8AwWw//E0f8K/8G/8AQpaF/wCC2H/4muhooA57/hX/AIN/6FLQv/BbD/8AE0f8K/8ABv8A0KWhf+C2H/4muhooA57/AIV/4N/6FLQv/BbD/wDE0f8ACv8Awb/0KWhf+C2H/wCJroaKAOe/4V/4N/6FLQv/AAWw/wDxNH/Cv/Bv/QpaF/4LYf8A4muhooA57/hX/g3/AKFLQv8AwWw//E0f8K/8G/8AQpaF/wCC2H/4muhooA57/hX/AIN/6FLQv/BbD/8AE0f8K/8ABv8A0KWhf+C2H/4muhrzDxH41tLHxy9zJ4ihtotGuYLV9M+2KjXIlH75zEW+faJIyDjgxv70LVpA9E2dd/wr/wAG/wDQpaF/4LYf/iaP+Ff+Df8AoUtC/wDBbD/8TVfUPH+i6Tquq2GrX1hYzWMaSRLc3qRtc7kLfKrYPXjjNVNa8fHStF0/UPJ0qD7ZZC7C6nq62gbKhvLj+RmdhkfwqORzzgK63/rr/kHW39f1qaf/AAr/AMG/9CloX/gth/8AiaP+Ff8Ag3/oUtC/8FsP/wATVTVPGc0Vjo8+iadFevqtq92iXV0bfy4kjDkkhHJPzKMYxk9aIvHlstnb3V9atBFNpMWpYR/MYs7BVhVcDcxJAGOpIGKezt/XX/JiTTSff/gf5ot/8K/8G/8AQpaF/wCC2H/4mj/hX/g3/oUtC/8ABbD/APE1jf8ACd6zNoOj6pZ+H7Mx6ncLaeVcaoyPDKZGTB2wsCvy5yD36HGTc1Lx0NHt9TGoWAN5YrCsdtbT7/tMskZfYpKrwMEliOFBYgYxSbSTbGtWki7/AMK/8G/9CloX/gth/wDiaP8AhX/g3/oUtC/8FsP/AMTWTcfEiGCWG2Fir311pMF/ZWguR5lzJKzAQqNuTjAJYA4BJIAFP8U/EBfC135d5FpapGkbyRT6skdzIrHBMEO0mQDn7xTJBA9aqzvb5CurXNP/AIV/4N/6FLQv/BbD/wDE0f8ACv8Awb/0KWhf+C2H/wCJq54j1iTQ9Am1CC2W6kRo0SJ5TGrF3VBltrYHzZ6GsGXxvqOnrrEeq6JALnTBasIrK/MomE7lQAzxx4Ix34PqOtIZpf8ACv8Awb/0KWhf+C2H/wCJo/4V/wCDf+hS0L/wWw//ABNZ8/jm50x7201vSEg1KFbdra3tbvzkuPPkMUY3sibTvGGyMAcgmrtl4ouUvNTsdfsIbC70+1W9JgujPDJCdw3ByiEEFGBBX0IJzwm7K47a2H/8K/8ABv8A0KWhf+C2H/4mj/hX/g3/AKFLQv8AwWw//E1S0HxfqepXn2fU9EhtHfS01KJba+85mViQEO+OMK3HqR71X0b4gtrOoXun2cGk3l7FZNd26abq4ukfBx5cjCMeW2SvZhyeeOW9P67X/wAmJWav/Wtv8zV/4V/4N/6FLQv/AAWw/wDxNH/Cv/Bv/QpaF/4LYf8A4msL/ha+mS3U9lZRR3GoLZwywWIuQJ5bh2ZTblMZVkKjcSDtByQAK6jxDrEuh+H5dQjtUuJkaNFhaYopZ3VOX2nABbrtPTpQ9A62Kn/Cv/Bv/QpaF/4LYf8A4mj/AIV/4N/6FLQv/BbD/wDE1mv44vbCTVLbWdHgjvLI2qQxWd6ZluJLhika7njTb8wGSQQAc+1auja/eXetXmj6zp0Vjf20Mdwv2a5NxFLE5ZQQxRCCGRgQVHYgnPAAz/hX/g3/AKFLQv8AwWw//E0f8K/8G/8AQpaF/wCC2H/4mhPEGoXHi6+0q1021Nnp6xNc3Ut4yyYkUt8sYiIbGO7isLQfinYa3q+n2ynTBBqTslssGqJNdIQCy+dAFHlghT0ZsEgHrwLV2QbK5u/8K/8ABv8A0KWhf+C2H/4mj/hX/g3/AKFLQv8AwWw//E1mWnxN0W8tdNEF1YPqN7eJavpyX6NNDukKFio+Y4xnGBT/ABB41vtI1G/jstJtry000W32qaS+aJw0zbQqoImBIGCcsOCKFqroHo7Gh/wr/wAG/wDQpaF/4LYf/iaP+Ff+Df8AoUtC/wDBbD/8TWJ4h+KNloWs6hZn+zdml7PtS3eqLb3EmVDkQQlT5hCkdWXJ4HrVvUvG17ayatLYaIl3YaPGk11cNeiNnjMSyHy02HcwUnhio4GG5IBdWuO2tjQ/4V/4N/6FLQv/AAWw/wDxNH/Cv/Bv/QpaF/4LYf8A4mqc/jpYbfVP+JfuurS5t4bWDzv+PtZ9vlODt+UEswIwcbD1rrKCbpnP/wDCv/Bv/QpaF/4LYf8A4mj/AIV/4N/6FLQv/BbD/wDE10NFAznv+Ff+Df8AoUtC/wDBbD/8TR/wr/wb/wBCloX/AILYf/ia6GigDnv+Ff8Ag3/oUtC/8FsP/wATR/wr/wAG/wDQpaF/4LYf/ia6GigDnv8AhX/g3/oUtC/8FsP/AMTR/wAK/wDBv/QpaF/4LYf/AImuhooA57/hX/g3/oUtC/8ABbD/APE0f8K/8G/9CloX/gth/wDia6GigDnv+Ff+Df8AoUtC/wDBbD/8TR/wr/wb/wBCloX/AILYf/ia6GigDnv+Ff8Ag3/oUtC/8FsP/wATR/wr/wAG/wDQpaF/4LYf/ia6GigDnv8AhX/g3/oUtC/8FsP/AMTR/wAK/wDBv/QpaF/4LYf/AImuhooA57/hX/g3/oUtC/8ABbD/APE0f8K/8G/9CloX/gth/wDia6GigDnv+Ff+Df8AoUtC/wDBbD/8TR/wr/wb/wBCloX/AILYf/ia6GigDnv+Ff8Ag3/oUtC/8FsP/wATR/wr/wAG/wDQpaF/4LYf/ia6GigDnv8AhX/g3/oUtC/8FsP/AMTR/wAK/wDBv/QpaF/4LYf/AImuhooA57/hX/g3/oUtC/8ABbD/APE0f8K/8G/9CloX/gth/wDia6GigDnv+Ff+Df8AoUtC/wDBbD/8TR/wr/wb/wBCloX/AILYf/ia6GigDi/gZbw2mm+NLa1hjggh8XX0ccUahVRQIwFAHAAHGK9QrzP4Kf8AHv44/wCxx1D+UdemUCCiiigAooooAKKKKAPNv2g/+SE+If8At2/9KYq62uS/aD/5IT4h/wC3b/0piq5/wjeq/wDQ667/AN+bH/5GoA6Giue/4RvVf+h113/vzY//ACNR/wAI3qv/AEOuu/8Afmx/+RqAOhornv8AhG9V/wCh113/AL82P/yNR/wjeq/9Drrv/fmx/wDkagDoaK57/hG9V/6HXXf+/Nj/API1H/CN6r/0Ouu/9+bH/wCRqAOhornv+Eb1X/oddd/782P/AMjUf8I3qv8A0Ouu/wDfmx/+RqAOhornv+Eb1X/oddd/782P/wAjUf8ACN6r/wBDrrv/AH5sf/kagDoK89034M6Hp15bySavr17aW1z9qi066vgbVZd24N5aqBkEk/jzmui/4RvVf+h113/vzY//ACNR/wAI3qv/AEOuu/8Afmx/+RqFo7hurFg+GbM+NV8T+ZP9tWwNgI9w8vy9+/OMZ3Z98Y7U7xN4Y0rxdor6Xrlv51uzB1KsVeNx0ZWHQjNVf+Eb1X/oddd/782P/wAjUf8ACN6r/wBDrrv/AH5sf/kajpb+u47u9zI0j4V6Xpdxe3E+sa5qtzeWL6eZ9SvRM8ULdVT5QBzzzmk0L4W2eg2s9pF4k8SXlnNZvZC0vL8SQxIwxlE2AAgdOw9K2P8AhG9V/wCh113/AL82P/yNR/wjeq/9Drrv/fmx/wDkajf+v67sX9f19xna38MNC17wtpGh3kl4kWjqiW1zFIqzbVULtLbSCGAGRjkgelQa78K9P1zxFd6wde8QadNexpFcw6feiGOVUXaAwC5Ixnqe5rY/4RvVf+h113/vzY//ACNR/wAI3qv/AEOuu/8Afmx/+RqHq7sFpsZeq/CzQ9Q0rRtPsLrUtEi0UubN9LuBFIpcYYlyrHJ556nJzVu18BWcEmhS3OravqE+hyzSwT3tyJZJTICCJGK5IAPGMYqz/wAI3qv/AEOuu/8Afmx/+RqP+Eb1X/oddd/782P/AMjU763DpYyJ/hVpDxXiWmqazpxub9tQR7G7ELW0rjDiMheFYdQc9OMVt+FfCOn+EbGeDT5Lq5lupfOubu9mMs1w+ANzsevA9h+dR/8ACN6r/wBDrrv/AH5sf/kaj/hG9V/6HXXf+/Nj/wDI1Jabf1/Vgeu50NFc9/wjeq/9Drrv/fmx/wDkaj/hG9V/6HXXf+/Nj/8AI1AHQ0Vz3/CN6r/0Ouu/9+bH/wCRqP8AhG9V/wCh113/AL82P/yNQB0NFc9/wjeq/wDQ667/AN+bH/5Go/4RvVf+h113/vzY/wDyNQB0NFc9/wAI3qv/AEOuu/8Afmx/+RqP+Eb1X/oddd/782P/AMjUAdDRXPf8I3qv/Q667/35sf8A5Go/4RvVf+h113/vzY//ACNQB0Nc9e/8lL0X/sEah/6Os6P+Eb1X/oddd/782P8A8jVhXfh/Uh8QtIiPi7WWdtLvmExhstyAS2mVH+j4wcgnIJ+UYI5yAd9RXPf8I3qv/Q667/35sf8A5Go/4RvVf+h113/vzY//ACNQM6Giue/4RvVf+h113/vzY/8AyNR/wjeq/wDQ667/AN+bH/5GoA6Giue/4RvVf+h113/vzY//ACNR/wAI3qv/AEOuu/8Afmx/+RqAOhornv8AhG9V/wCh113/AL82P/yNR/wjeq/9Drrv/fmx/wDkagDoaK57/hG9V/6HXXf+/Nj/API1H/CN6r/0Ouu/9+bH/wCRqAOhornv+Eb1X/oddd/782P/AMjUf8I3qv8A0Ouu/wDfmx/+RqAOhornv+Eb1X/oddd/782P/wAjUf8ACN6r/wBDrrv/AH5sf/kagDoaK57/AIRvVf8Aoddd/wC/Nj/8jUf8I3qv/Q667/35sf8A5GoA6Giue/4RvVf+h113/vzY/wDyNR/wjeq/9Drrv/fmx/8AkagDoaK57/hG9V/6HXXf+/Nj/wDI1H/CN6r/ANDrrv8A35sf/kagDoaK57/hG9V/6HXXf+/Nj/8AI1H/AAjeq/8AQ667/wB+bH/5GoA6Giue/wCEb1X/AKHXXf8AvzY//I1H/CN6r/0Ouu/9+bH/AORqAOhornv+Eb1X/oddd/782P8A8jUf8I3qv/Q667/35sf/AJGoA6Giue/4RvVf+h113/vzY/8AyNR/wjeq/wDQ667/AN+bH/5GoA6Gsa28MWFv4cu9FbzZ7a8M5uHlILyGZmZySABnLHHHHFV/+Eb1X/oddd/782P/AMjUf8I3qv8A0Ouu/wDfmx/+RqTVx3aLFh4ZtrGG8T7VdXDXtvHBNLMyliEj2BuFAyRyeMZ7Cs+fwHZu8TWmqalZbdPj06b7O8WbiBM7VYshKnlvmQqeevTFj/hG9V/6HXXf+/Nj/wDI1H/CN6r/ANDrrv8A35sf/kam9Xd/1v8A5sS02/r+rIWx8H2NkqD7TdTiLThpsHmsv7iHADbcKPmbapJOeQMYHFNtPBOk2uo6Tenzp5dJsls7USuCqhRgOQAMvjIz2ycAUv8Awjeq/wDQ667/AN+bH/5Go/4RvVf+h113/vzY/wDyNTvrf+uv+b+8Vla39dP8kOh8H2EOjadpizXJh068F5ExZdzOHZ8N8uMZY9AOO9LN4O0u41rUtVlEzXeoW32VnLgiFNu0+WMfKSMZPOcDtxTP+Eb1X/oddd/782P/AMjUf8I3qv8A0Ouu/wDfmx/+Rqmyat/Xb8hrR3IpvAmlz2s0Ekt0Vl0uLS8h1BSOMsUdTt4kBbOemQOKg1L4e2mpNqIfWNVhg1QJ9tgheILO6qFDkmMsDhVyFYKccjBINz/hG9V/6HXXf+/Nj/8AI1H/AAjeq/8AQ667/wB+bH/5Gqr63/ruHkaeraVBrGmNY3LSJEzxuTGQGyjhx1B7qKwfFXhP+0LHVprATy3mp/ZI5IxMECpFKDlTwVO0sc5zwMc1b/4RvVf+h113/vzY/wDyNR/wjeq/9Drrv/fmx/8AkapsBA3gOxuLe+GpahqN/dXgiH22aRFmh8pi0Xl+WiqCrEsDgknrkcVna74Hubyza3i1TUbubVJo7fUr+RoBMLNVc+Wo8sIF3EZATJ3HOa2P+Eb1X/oddd/782P/AMjUf8I3qv8A0Ouu/wDfmx/+Rqf9f169Q/r+vToYt/4Eu5dat3m1fUtUtL23k0/UluBbRhbYxuVC+XEhB3leRzz6Vow+BY45ZZpte1e4uXsH09J3eFWhiYg/IEiVQwK8MQTzznAxZ/4RvVf+h113/vzY/wDyNR/wjeq/9Drrv/fmx/8Akaj+vz/zf3h/X5f5L7iK68BaNc293b7ZoYLnT4dPEcTBRCkJZo2TjIdS2QeeVHFa+p6RDq2k/wBn3csvllo2LqQGJR1YdsclRnis3/hG9V/6HXXf+/Nj/wDI1H/CN6r/ANDrrv8A35sf/kai99wHal4O07VZ9SmuZLlZNQSAM0cgUwNCS0ckZAyGDHPORwOMZBsaR4fj0u8ub2e+u9Sv7lVjku7wx7/LXO1AI1VVUEseF5JOc1V/4RvVf+h113/vzY//ACNR/wAI3qv/AEOuu/8Afmx/+RqANG10a3tdY1HUkaRpdQWJZkcgqBGpAwMehOck1R0jwu2hyQx2Ot6kNOgyItNcQNCinOFDGLzcDPHz9gOnFM/4RvVf+h113/vzY/8AyNR/wjeq/wDQ667/AN+bH/5GoAmj8LWUWi2GmrLcGGwuUuYmLLuLK5cA8Yxk9gK5a1+H2o33hq6Gr+INXhvdScXV7bxizKtMMbRu8knA2IAN2MCuj/4RvVf+h113/vzY/wDyNR/wjeq/9Drrv/fmx/8AkalbTT+v6svuH1/r+upU07wtqD2sN/LrWo6Rqt5bwtqaWgtmSadUClyHicA8Y+TAIAqtceCpdX17xA+oX2oWmn6g0SPDbzR7LyIRKrKwKsU5DDK7GIPXGMan/CN6r/0Ouu/9+bH/AORqP+Eb1X/oddd/782P/wAjVT1dxLRFO/8ACpvviZpOs+S8dpp1i6llkAWWXOI1KZydgaQgkcFhjvXW1z3/AAjeq/8AQ667/wB+bH/5Go/4RvVf+h113/vzY/8AyNS6W/ruHW50NFc9/wAI3qv/AEOuu/8Afmx/+RqP+Eb1X/oddd/782P/AMjUAdDRXPf8I3qv/Q667/35sf8A5Go/4RvVf+h113/vzY//ACNQB0NFc9/wjeq/9Drrv/fmx/8Akaj/AIRvVf8Aoddd/wC/Nj/8jUAdDRXPf8I3qv8A0Ouu/wDfmx/+RqP+Eb1X/oddd/782P8A8jUAdDRXPf8ACN6r/wBDrrv/AH5sf/kaj/hG9V/6HXXf+/Nj/wDI1AHQ0Vz3/CN6r/0Ouu/9+bH/AORqP+Eb1X/oddd/782P/wAjUAdDRXPf8I3qv/Q667/35sf/AJGo/wCEb1X/AKHXXf8AvzY//I1AHQ0Vz3/CN6r/ANDrrv8A35sf/kaj/hG9V/6HXXf+/Nj/API1AHQ0Vz3/AAjeq/8AQ667/wB+bH/5Go/4RvVf+h113/vzY/8AyNQB0NFc9/wjeq/9Drrv/fmx/wDkaj/hG9V/6HXXf+/Nj/8AI1AHQ0Vz3/CN6r/0Ouu/9+bH/wCRqP8AhG9V/wCh113/AL82P/yNQB0NFc9/wjeq/wDQ667/AN+bH/5Go/4RvVf+h113/vzY/wDyNQB0NFc9/wAI3qv/AEOuu/8Afmx/+RqP+Eb1X/oddd/782P/AMjUAdDRXPf8I3qv/Q667/35sf8A5Go/4RvVf+h113/vzY//ACNQBQ+Cn/Hv44/7HHUP5R16ZXl/wMjeHTfGkUk8lw6eLr5WmkChpCBH8x2gDJ68AD0Ar1CgQUUUUAFFFFABRRRQB5t+0H/yQnxD/wBu3/pTFXW1yX7Qf/JCfEP/AG7f+lMVdbQAUUUUAFFFFAHA/Evxnq/hW80K10SbRbZtTllSS51pnSCIIoYEsrDGenftWTafEzxA3gax8T3unWK2cOqG01OSEOyPb7gn2iAlh8oY992a1viX4M1fxVeaFdaJDoty2mSyvJba0rvBKHUKAVVTnHXt2qDw/wDDvUNM+H3iTSLyXThea557rb2cbR2dqzx7QqAgkKCM5x+HFJNpN/100+eo2k3Ff11/4BueCPEl94rh1LU5IrePSDdvDpbRq2+aJDtMrEnBDMDjAHA71z0PjTxr4k1XUpvBOj6TLo2l3bWjnUJpEmvXT7/lFflUdgWz/MDs/Cmky6D4P0jSbgxGays4oJDDnYWVQCRkA4Jz2FcVb+DPHHhnVtUh8F6toyaNql292RqEMjTWbv8Ae8sL8reo3ccdOua0U7dP10/4JO8b/wBW1/4BJ4o+JGo6J44hsLS0tX0aze1j1e5k3GSBrhiECkEAYABOc9RS/ELxN478NatZNokfh2TTNRvYLC2+2LOZllkB5faQu3IPTJx2rJvPgrea9a69c654k1CHUNWuJJvs1jd4smx/qRIhTLbcLn6cdM10er+Edd1rwv4StLy4sjqGkajaXd7J5j7JRECG2Hbkk5zyB9aUdUr919z3+4fV+j+9bfeYHiLx3410HXNL0O6u/Bthez2DXVzc6hLNFa7hIVCoxYHO3BwR1BrR1zx34hgvrLQdDh0SXWF01dQ1TULqZ00+1TgFgfvFSc454GDzzhvj7wJruveNbLXNFtPDV/FBYm1e21+J5U3F924KqnntnPc0az4F8SzXtpr2iz6HHq8mmrp+p6ddQO+n3MY5wBjcAM4AxyABxzlLVa93+tvlsPZ6dl+l/wBSP/hZerWfg1bm4h0TWNautTXTbFdGvvMtZ5GUEEsSSmMnIPPA6A5q1pvi7xho/jDStD8e2Oj7NZWQWl1pDybUkRdxRxJzyO4/XnGPZfCPV4vBslv9v03T9bTXP7atDYwN9lgfaAIwp52cHtxx1rZ0zwj4t1fxhp2vePr/AEkjSFk+xWWkJJ5Zdxgu5k5zjsPbpzmuv9dl+N7/APDEvb+t7v8AS3/DnK6D8YfEt7qul/bV8N3VtqGpfYfsFhLIL+EbyvmMhYgKAuc+46Vtn4ka+uqyeFjaWH/CU/2uLWNPLfyTaFd/2jbvzjYD/F1/Kq+lfCbUtD03Rb3Sn0238R6fqMk1xcRsyJd2zuxaJ2CbmO0qBkHGOK69vClwfi4nivNt9kXRzY7efN8zzd27GMY28Zzn2oj0v/Wif/A+bHLeVv61a/LX5Gn4s15PC/hLUdZkUSG0gLpGePMfoi/ixA/GuZ8NeN9Yv/CHiKXXbWzt9e0IyieCBX8o4i8yM4J3YIOOvY1ofEHwnfeNNO0/Sbe9+xWH21J7+WOQrMY0BKiP5SN27BycYx3rnrP4Waloeu6zPpeuXGpWms6TJa3L6xdGW48/BEbbgnKgHHPI569Kh3tL0dvuv/wCla8f68v+CaF5471O3+Bq+M0gtDqLWUdwYijeTuZgCMbs45/vV29jO1zp9vPIAGliV2C9ASAa8sg8CePbj4X3ngzVZ/DgtlsUt7KW2effuV1OZCy4xtB6L1xXceDoPFltp7weMjoxaIIlsdK83BUDB3+Z36dPetHbml+H4mavyxv8/wAP+CcZqPxI8R315qNx4a/4RrTdE0+8axF94huni+1zKMsseCAMc9evX1Ab4k+JHiKz1jRLHTLnwpp32/SVv5p9Yum8gOTgrHKjYYenHIBOai1z4XeJFTV9L8PT+H73QtVuJbr7PrVu7SWMsgIZ4WUHnk4J6ce5JrPwv8QG88PTaVB4Y1RdK0VNNli12GSSNnUj51RVPpwSe5qFsr+X5O/4mjtd/wBdVb8C54j+JWueF/Emh2t7a6ddae+nR3msXFosjeUpkEbSRHdygZlPIJxVjxD8RtU0uDxvLYw2Mq6BHaPZs6MRJ5ygnfhhkc8Yx+NaUHg6/vPFVpqmvR6Y1ufD7aXeWttv8syM6sQisP8AV4BHJz04rloPhLr9v4W8X6QdSsrg6qlvBp80sj7lihOEEvycEIFHy5zim9n8/wA/8thRtzK+2n6f8G5t6X4x8W6V4m0nS/HljpBh1sMtneaQ8m2OQLu2SLJzyO4//Vn/AA/8f+J/F2tRfbL7wilkZJlksYJpRqAVNwB8ssRjIBz6GtDS/B3i3VfEuk6p48vtI8nRAzWdnpCSbXkK7d8jSc8DsP0753gHwB4p8I6xD9psfB72YlmaW+hhlOoFHLEASFQOpAwewp9fv/4Hz/rcnXl+79b/AKfMyNB+MPiW91XS/tq+G7q21DUvsP2CwlkF/CN5XzGQsQFAXOfcdK3NI+IniPW/iDeaVaW+hRWdlqDWkun3Fw6ag0YODOoPyMuPmwMnHHoaraV8JtS0PTdFvdKfTbfxHp+oyTXFxGzIl3bO7FonYJuY7SoGQcY4qfWfh94t8S+JLSTXLvw99isb1biDU7e1dNR2I+5Y8/dHpkemeaI9L/1t/wAH8fIc/tW/rf8A4B6nRRRSAKKKKACuevf+Sl6L/wBgjUP/AEdZ10Nc9e/8lL0X/sEah/6Os6AOhooooGFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAVj+JdVuNK0lTpyRvf3UyW1osoJQyOcZYAglVGWODnCmtiud13w0/iHxBp0t7PJHpljHJIqW11LBM1w2FVt0ZUhQhccNzv6Ut9Bkmi+Jobzw7pt7qTJb3N1ILSWJAWC3QJV4x1wAysMn0q9ca7ptq96lxdBGsUR7gFW+UPnZjj5icEADJzgdSK5J/h9Ojz2FtcsNIfVYdRTdfz/aEO0iYeZnfksAwO/PzN07zT+C9Sso9eHh7UZIX1BbYQvc388sn7st5iGVyzoGU4DKSVzkAEU73Tf9bL9bi2aX9df+AdDYeJdL1K2vJ7eWaMWIzcpc2stvJENu7JSRVbBHIOMHBx0NVLLxzoGoWdzdW91OsVqkTymeynhIWQ4jYB0BYN2IBFc3Z+Cdfhh8QKJLa3Otww2xL6nc3j2sYDrIwklXc7YbKj5Rk44xlr+reC7+4XX10uW0hF9aWcFmJSxEZhZid4A6cjGDz7UPS4tf6/r1N+78UaTZ6lcadJcSS31tAtzLbW1vJPIsZYKDtjVieSOBzjnGOar6b410TVoIp7Oa68maZYIpJrCeFZJGLAKpdAG5Ug46Y5xVPRfB8mjeKhqa3AuFksWiup5CfOuLhpFYyEYxjCgAZ4AVQMAVRPg3WF8EaTo9rf21re2d/wDaGuVBcIpkdiUBHLAPwCMZHPHVdF/XX/IfV/10/wAzfk8XaFFJqCNqCFtNmiguwiM3lSSkKinA5JJA46d8U+bxPpMC3Ze5djZ3AtpUjgkdjKVDbEVVJkbaQcIDjn0NcrefDmX7BrVhpskUVrfPYmHdPIJB5MoeVmcDO9juO4HJY5JHWrFz4U1+20ufTtIu4RZrqIuI4/tktvLcQMuXjkuEUyK3mEtvBZmAwx5JJ/X5f8H+txbHV6TrFlrdmbnTpHeNZGidZInieN1OCrI4DKfYgcEHvWY3jjQk1H7G014JPtX2PzP7OuPJ87dt2eb5ezOePvVD4H8O3vh2y1FNReNpLy+a6VUuZbgorIg2mSX5nIKkbj14OB0FabwnfSaaLcS2+8a+NTyWbHlef5mOn3sdume9P7SXTT9P+D9wteVvrr+tv0+80f8AhNtAOp/YBesZhcfZWYW8vlRzZ2+W0u3YrEjhSQTkYzkZe/jHQ49WGnPeOJjOLbzPs8vkCYjIiM23yw/bbuznAxniuSstI1rXbfUdOT7Amkt4gknlnaRxOgjufMKBNpVtxQfNuXAP3Tjm7/wiGtfYZPD7PYf2K+pm++2CV/tOwz/aPL8rZtzv+Xfv+7ztzxSjrFN9bfp/wfuHLRtL+t/+Ab+q+MtE0XUGstQnuUmRY2kMdjPKkYkYqhZ0QquSCOSKk1HxZo+k3ptb64lV1KiR47WWSOAsQF8yRVKR5yD85HBB6VwP2LxT4l8N6vqkWn6SE1qSK5R5dTlDQwwlSkewW5GfkYk7urmpdW8O+I/HWlS30M0S2ur2kE1qsmrXMS2YKKxjMEahJstn52Ofm6EKAXHX+u/9P7geh3lx4m0m1luo7i6Mb2c0MEymJ8q8pAjHTkMWAyMjrk8GrdnqVpfz3cNpL5j2c3kT4UgI+0NtyRg8MOmeuK4/xN4DvPE13dXNxcRxP59otqsFzLD+4ikV3MjIAWckvtByFwCpUljW94X0S48Pw31k8kUlkbtpbNgSZQjgEiQkZZg5b5ySzDBJzmhba/1t/wAH+twjbxxoSaj9jaa8En2r7H5n9nXHk+du27PN8vZnPH3qlfxjocerDTnvHExnFt5n2eXyBMRkRGbb5Yftt3ZzgYzxWXN4TvpNNFuJbfeNfGp5LNjyvP8AMx0+9jt0z3qoPCGtfYZPD7PYf2K+pm++2CV/tIQz/aPL8rZtzv8Al37/ALvO3PFEdUr/ANaL/N/cEtG7f1v/AMD7zsL3U7TT5bSO8l8trycW8A2k75CrNjgccKxyeOKz38XaMtmlyk886STSQxrb2k00kjRsVcrGilmUEYLAFenPIqHxb4bfxJ/ZEYlMUNnqC3M5S4khkKCORcI8eGDZcdxxnmsObwt4lTS9MsYJ7WS1sHnjNrb6hNpwmjz+4cyQJuDKvBQDaSc54FLX+vl/X/DD0/r5/wDANq58eaBa21lcSTXkkF8F+zyQabczK5YkBMpGcPkEbDhhjkVJc+NdCtJliuLi4Rtkckh+xTlbYP8Ad847MQ564k24HJxWNp3gvUbPwjoWlS3Fs8+naqt7NIHcq6CZ34LAsWww6nrnk9ar6z4EvLjXtXuoLdNRs9WKtNBJrt5p4QiMRspSFWWQEKOSAeSORin1+f8Al/wfuF/X5/18zqm8TaYNfbRla6kvU2GQRWU0kce4ZXdIqFFyAerCobLxjoeo6nHYWl47TTFxA728qRXBT7wilZQkhHPCMeAT0BpmneH5bTXtbupGjFrqENvFEqMS6CNGU5yPfjk+9Yuk+FNcig8PaZqraeun+HnDwXNtK7S3eyNoo90bIBH8rZbDPyMDFH9f16fiLW1/6/p/gbem+NdA1a9gtbC9aR7kN5Dm3lSOYqMsqSMoRmAzlQdwwcjg4mbxXoiW+nTPfoqapP8AZ7PKsGmkyRgLjPUdSMCuP8H6RrWraJ4Ve9+wR6XpshvI5YpHM0x2OioYyuFx5hJYOc7R8ozxLp/w6v7e10yW9vILjULPUI5Q2WEcFsshcxx8Z3McMxOMkDsq4Oq/rt/wfu+Q5aXt2/H+v8jpX8aaHHqi2BuLgytci0EiWU7QmYnHl+cE8vdngjdwQQeRU0fivRJJtXiW/UPoozfhkZfJG0tnJHzDAPIz0rmm8A3c1/HqUtyqXQ10agbeK6mW2jhVuixD5DIQAzMVyXZucVHJ8Pr6XUIrhrq2C3N/cvqa5Y+favMJY4wcDkbEU54w79e5HVK/9bf8H7vvJaN2/rf/ACVvU7bS9UtNZ0uDUNOkMtrOu6N2RkJGcfdYAjp0IrJ0/wAcaFql9a2tpNeeZeFhbPLp1xFHNtBY7ZHjCngE8Gp/C2jz6DobafcSRuEurh4TGTgRvK7oDkDkBgPw71j2ng69isfC1vPNb/8AEoEwuSjN8weJ0GzK88sOuKTv0D1Nay8Y6HqOpx2FpeO00xcQO9vKkVwU+8IpWUJIRzwjHgE9Aas6v4g0/Q3t0vzcmS6LCGO2s5rh32jJ+WJWPA74rmtI8Ka5FD4e0zVW09dP8POHgubaV2lu9kbRR7o2QCP5Wy2GfkYGKu+MvD2oa1e6Tc6dHHL9iaUyRtqc9gzB1AGJYVZu3ToactNgW5oSeL9Ej02zvRdSzR3pYW8cFrLLNIVzuAiRS/y4O75fl74pt34z0Ozht5HuZphcQfaES1tJrhxF/fZY0ZkXPGWA5yOoNc/pvhDXNDj0a8sTp91e2K3UMlpNcSRxCKdxJhZtjMzKVUb2TL5YnBp2seENYvdci1oeTc3M1iltdW8Or3emojIzMGV4QxcfOwww7AjGSKGCOlbxPoy6tp2m/bka61OJprNUVmWZAMkhwNvTnrz2qTS9f0zWrm+g0y58+Swm8m4ARgEfngEgBuQRkZGQRXI3ngG+aFZNK+x2E9jp1rFpcTTyTJbzxStI2XZQxQgqmepG7gVseGPCcnhvVriWKWN7WextonGTvaeMyb5Dx/FvB69c0/6/yFr+X/B/P8GaTeJdNXX20VWupL1NnmLFZTPHHuGV3SKhRcgHqwqKw8XaLqWorZWd1I8khcRSNbSpDOU+8I5WUJIRg8Kx4BPY0WGiz2/ifXdQmeMwaklusaoTuXYjK2eMd+Otcz4Y8B3eiXWmQXttHd22mMTBeHX7xiMKyq4tGUxKcNggNgZOPSkt9f6/r8RvY69Nf0yTT7W+S5zbXcywQP5bfO7NtAxjI5GMniqmq+MtE0XUGstQnuUmRY2kMdjPKkYkYqhZ0QquSCOSK5+z+Hb2mmaTi6na9s7+O5mDalctblVlLELEW2A4PHyjn061i/YvFPiXw3q+qRafpITWpIrlHl1OUNDDCVKR7BbkZ+RiTu6ualPS7/paf8H7gs27L+t/+Ad7qPi7RdK1BrO9upFljCGZo7aWSO3DfdMsiqViB6/ORxz05qPUPGugaXfTWl7eus1sV+0bLaWRbcMAVaRlUrGpB+8xC8Hng448eFrzxD5+uwWSXdn4it4bqa0k8QXliIS0Kq0ZWFSsoIA5IB6jkYqe70rWtS1Txho2jCwW0vVhtJZbmWQPbhrZFLqAreZ8pPykpyPvHPFWa0e/9f1cE09eh1uo+LNG0q8+zXtxKrKUEkkdrLJFCWI2+ZIqlI85B+cjgg9KnXxDpb+IpdCW6H9pQ24uXgKMMRk43biNp5I4BzXFeKfAviHWf7QtLa8iks5oo47N5dUuYFtlVQCjW8a7JckE7mORu6EKAbeueBdU1G/1DULK9t7e8uLyPyZCWOy1NuIZU4HDHLsByMhMn0PT+v66/MF5/wBf10Os0TXtN8R6eb7Rrn7TbeYY/M8tkyR1wGAJHPXoe1aNYPhnw+3h6bVoojEtlc3YntYo85iXyY0Knj+8hPGeD+Fb1PQFfqFFFFIAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKAOP+Cn/AB7+OP8AscdQ/lHXpleZ/BT/AI9/HH/Y46h/KOvTKBBRRRQAUUUUAFFFFAHm37Qf/JCfEP8A27f+lMVXPtvjL/oA6F/4O5v/AJEqn+0H/wAkJ8Q/9u3/AKUxV1tAHPfbfGX/AEAdC/8AB3N/8iUfbfGX/QB0L/wdzf8AyJXQ0UAc99t8Zf8AQB0L/wAHc3/yJR9t8Zf9AHQv/B3N/wDIldDRQBz323xl/wBAHQv/AAdzf/IlH23xl/0AdC/8Hc3/AMiV0NFAHPfbfGX/AEAdC/8AB3N/8iUfbfGX/QB0L/wdzf8AyJXQ0UAc99t8Zf8AQB0L/wAHc3/yJR9t8Zf9AHQv/B3N/wDIlYviP4s6V4a1+90u60fXLs2EaS3d1ZWiywwI4yGdt4Kj6jsa0v8AhYeiLqk1nMZ4Uj0satHcyIBFPb4yWTnJI7ggGlfS47a2/r+tUWPtvjL/AKAOhf8Ag7m/+RKPtvjL/oA6F/4O5v8A5Eq3pPiG11TwrBr7xzafZzW/2ki9Co0ceM7mwSAMc9elYHh74o6R4k1iCysdN1qKC7Li01C5sGS2uioJOx8+gJ5A6etVZ3sTdWuan23xl/0AdC/8Hc3/AMiUfbfGX/QB0L/wdzf/ACJVfQviDo/iHxVqWgWCXS3On7iZZYwsU4R9jmM5y21uDwKwm+Mlmut/2T/wh3i83u3zBCNLG4x7tvmbd+dmf4sYpLW1uo3pfyOl+2+Mv+gDoX/g7m/+RKPtvjL/AKAOhf8Ag7m/+RKyIfijZ3XiifRLLw54jumt737FNeW9iHtonyASzh+FGcnIzjtRrHxV0jTNbutLstK1vXLiyIF4dIsTOlseuHbIwfpnoe4pX0T7ga/23xl/0AdC/wDB3N/8iUfbfGX/AEAdC/8AB3N/8iVQ1r4maJo1rpbpBqOpXWqwie0sLC1Mtw8ZAO4pxjGe57H0NQw/FbQZvCura2bfUIjo5Vb7T5rcR3UJYgAFGYDnPr2NPa/kG9vM1ftvjL/oA6F/4O5v/kSj7b4y/wCgDoX/AIO5v/kSsOy+LmlXcOoeZomvWV3Y2ZvjY3lkIp5oAcF4wWwwH1HQ4zWzYeOdK1TWtL03TkuLmXUrD+0FkjVSkMPQGQ7uCTwAAeR2p2/r7/8AJ/cK/wDX3f5of9t8Zf8AQB0L/wAHc3/yJR9t8Zf9AHQv/B3N/wDIlU/EXxH0bwv4t0zw/qkV2LjUgvlzxxqYo9z7BvO4EfN7HrS+IviLo3hrxVpfh++ju5bzU3RUMEaskW99ilyWGMnPQHoaS1tbroN6Xv01Lf23xl/0AdC/8Hc3/wAiUfbfGX/QB0L/AMHc3/yJWRF8ULO58Uz6HZeHPEV21ve/Ypr23sQ9tE+QCWcPwozkkjOOcVe0P4haPr3i7VfDdql1Df6WWEnnooSXacMUIY5wSM5A6ijdX+YPTcs/bfGX/QB0L/wdzf8AyJR9t8Zf9AHQv/B3N/8AIlW/DPiG08VeHbbWdOjmjt7ndsWdQHG1ipyASOoPetam9AOe+2+Mv+gDoX/g7m/+RKPtvjL/AKAOhf8Ag7m/+RK6GikBz323xl/0AdC/8Hc3/wAiUfbfGX/QB0L/AMHc3/yJXQ0UAc99t8Zf9AHQv/B3N/8AIlH23xl/0AdC/wDB3N/8iV0NFAHPfbfGX/QB0L/wdzf/ACJWFd3fiz/hYWkM2i6MJxpd8EQaxKVZfNtNxLfZsgg7cDBzk8jAB76uevf+Sl6L/wBgjUP/AEdZ0AH23xl/0AdC/wDB3N/8iUfbfGX/AEAdC/8AB3N/8iV0NFAznvtvjL/oA6F/4O5v/kSj7b4y/wCgDoX/AIO5v/kSuhooA577b4y/6AOhf+Dub/5Eo+2+Mv8AoA6F/wCDub/5EroaKAOe+2+Mv+gDoX/g7m/+RKPtvjL/AKAOhf8Ag7m/+RK6GigDnvtvjL/oA6F/4O5v/kSj7b4y/wCgDoX/AIO5v/kSuhooA577b4y/6AOhf+Dub/5Eo+2+Mv8AoA6F/wCDub/5EroaKAOe+2+Mv+gDoX/g7m/+RKPtvjL/AKAOhf8Ag7m/+RK6GigDnvtvjL/oA6F/4O5v/kSj7b4y/wCgDoX/AIO5v/kSuhooA577b4y/6AOhf+Dub/5Eo+2+Mv8AoA6F/wCDub/5EroaKAOe+2+Mv+gDoX/g7m/+RKPtvjL/AKAOhf8Ag7m/+RK6GigDnvtvjL/oA6F/4O5v/kSj7b4y/wCgDoX/AIO5v/kSuhooA577b4y/6AOhf+Dub/5Eo+2+Mv8AoA6F/wCDub/5Eroar317Bpun3F7eOI7e3jaWRz/CqjJP6UN21Gld2RjfbfGX/QB0L/wdzf8AyJR9t8Zf9AHQv/B3N/8AIlXtA1yDxDo6X9tBcWwLvG8F0gWWJ0YqysASAcj1PGK06NiU7nPfbfGX/QB0L/wdzf8AyJR9t8Zf9AHQv/B3N/8AIldDRQM577b4y/6AOhf+Dub/AORKPtvjL/oA6F/4O5v/AJEroaKAOe+2+Mv+gDoX/g7m/wDkSj7b4y/6AOhf+Dub/wCRK6GigDnvtvjL/oA6F/4O5v8A5Eo+2+Mv+gDoX/g7m/8AkSuhooA577b4y/6AOhf+Dub/AORKPtvjL/oA6F/4O5v/AJEroaKAOe+2+Mv+gDoX/g7m/wDkSj7b4y/6AOhf+Dub/wCRK6GigDnvtvjL/oA6F/4O5v8A5Eo+2+Mv+gDoX/g7m/8AkSuhooA577b4y/6AOhf+Dub/AORKPtvjL/oA6F/4O5v/AJEroaKAOe+2+Mv+gDoX/g7m/wDkSj7b4y/6AOhf+Dub/wCRK6GigDnvtvjL/oA6F/4O5v8A5Eo+2+Mv+gDoX/g7m/8AkSuhooA577b4y/6AOhf+Dub/AORKPtvjL/oA6F/4O5v/AJEroaKAOe+2+Mv+gDoX/g7m/wDkSj7b4y/6AOhf+Dub/wCRK6GigDnvtvjL/oA6F/4O5v8A5Eo+2+Mv+gDoX/g7m/8AkSuhooA577b4y/6AOhf+Dub/AORKPtvjL/oA6F/4O5v/AJEroaKAOe+2+Mv+gDoX/g7m/wDkSj7b4y/6AOhf+Dub/wCRK6GigDnvtvjL/oA6F/4O5v8A5Eo+2+Mv+gDoX/g7m/8AkSuhooA577b4y/6AOhf+Dub/AORKPtvjL/oA6F/4O5v/AJEroaKAOe+2+Mv+gDoX/g7m/wDkSj7b4y/6AOhf+Dub/wCRK6GigDnvtvjL/oA6F/4O5v8A5Eo+2+Mv+gDoX/g7m/8AkSuhooA577b4y/6AOhf+Dub/AORKPtvjL/oA6F/4O5v/AJEroaKAOe+2+Mv+gDoX/g7m/wDkSj7b4y/6AOhf+Dub/wCRK6GigDnvtvjL/oA6F/4O5v8A5Eo+2+Mv+gDoX/g7m/8AkSuhooA577b4y/6AOhf+Dub/AORKPtvjL/oA6F/4O5v/AJEroaKAOe+2+Mv+gDoX/g7m/wDkSj7b4y/6AOhf+Dub/wCRK6GigDnvtvjL/oA6F/4O5v8A5Eo+2+Mv+gDoX/g7m/8AkSuhooA577b4y/6AOhf+Dub/AORKPtvjL/oA6F/4O5v/AJEroaKAOe+2+Mv+gDoX/g7m/wDkSj7b4y/6AOhf+Dub/wCRK6GigDnvtvjL/oA6F/4O5v8A5Eo+2+Mv+gDoX/g7m/8AkSuhooA577b4y/6AOhf+Dub/AORKPtvjL/oA6F/4O5v/AJEroaKAOL+BjTNpvjRrqOOOc+Lr4yJG5dVbEeQGIBIz3wM+g6V6hXmfwU/49/HH/Y46h/KOvTKBBRRRQAUUUUAFFFFAHm37Qf8AyQnxD/27f+lMVdbXJftB/wDJCfEP/bt/6UxVc/4TbSv+fXXf/Cfvv/jNAHQ0Vz3/AAm2lf8APrrv/hP33/xmj/hNtK/59dd/8J++/wDjNAHQ0Vz3/CbaV/z667/4T99/8Zo/4TbSv+fXXf8Awn77/wCM0AdDRXPf8JtpX/Prrv8A4T99/wDGaP8AhNtK/wCfXXf/AAn77/4zQB0NFc9/wm2lf8+uu/8AhP33/wAZo/4TbSv+fXXf/Cfvv/jNAHkPxE0S+uviP4kLab4ylgvrOCK2bQ4M207iPG2ckbWQHHHb5q6Hxn4S1HXfB3gVdV0yVtTiu7a11FLCMgR27riZWCcKnyrn+EfSu9/4TbSv+fXXf/Cfvv8A4zR/wm2lf8+uu/8AhP33/wAZojokvNf18xvV38rfh/wCTxhokmueBdW0WwKxS3Vk8MI6KDtwo9h0H0rhtF8da9pvg+HSB4B1+HUtM08xSP8AZP8AR98cRCeWRkybmCjAHG4nJArtf+E20r/n113/AMJ++/8AjNH/AAm2lf8APrrv/hP33/xmk9b+f/B/zF28v+B/keT6N4W8feEr7whq19YafcW1jIbe4TTEnku2iuDukaYEYO1uSV6H2r0B9PvP+F+R6h9kn+xDw4YTc+WfL8z7RnZuxjdjnHXFbH/CbaV/z667/wCE/ff/ABmj/hNtK/59dd/8J++/+M1V9V8/xVhdH52/B3PLdGgvNI+LGrXF7p/jtVuNcaSEabARpsqMQoebONw9SOMAVW1XTvEPhrTdd8PLpPioS3Opz6jp2reGjkTtICFScjlVBxkdTjjpk+t/8JtpX/Prrv8A4T99/wDGaP8AhNtK/wCfXXf/AAn77/4zUpWio+Vvy/yKv7zfnf8AP/M89iTxH4Q8TaD4p1PQdW1xJvDkOn3ws1+0XUE4IYkqTlsnqc9c88c52saJ4g8ReHfH3iR9BvrFtahtoLHTXiJuZFiK5do1yQT6deD9T6n/AMJtpX/Prrv/AIT99/8AGaP+E20r/n113/wn77/4zTl734/i7ij7r+78P+GOM8G+F7zwr8TJ4dQTU9attQ0pfs+r35kne2wfntnf7qgn5gMDsOaufCTwr/wj1x4oeSxubYnVpba0NyrDNonMYTd/BlmwRwa6f/hNtK/59dd/8J++/wDjNH/CbaV/z667/wCE/ff/ABmnfX+u9/8AgCtpb0/K3/BOJ+IXg+78V+PpYEtbjyH8OSpFdrGdkdwsyvGN+MBsqDjOcVzVtoXiXWrPSPE+u6TfLq954l0/zbdoH3W1tbqy7ypGVUsWYk8cg163/wAJtpX/AD667/4T99/8Zo/4TbSv+fXXf/Cfvv8A4zSj7tv663/4HoVLX+vK3/B9Ty3RoLzSPixq1xe6f47VbjXGkhGmwEabKjEKHmzjcPUjjAFaK+FdVX/hIfEOn2E8es6X4kuL6wV4ihvIGSMSRrkfMrqCARxuAr0H/hNtK/59dd/8J++/+M0f8JtpX/Prrv8A4T99/wDGaSVopdlb8v8AIG7tt9X/AJ/5mb8JbO60/wCF+k22oWs9pcIJd8NxEY5EzK5GVPI4Irs657/hNtK/59dd/wDCfvv/AIzR/wAJtpX/AD667/4T99/8ZqpO7uSjoaK57/hNtK/59dd/8J++/wDjNH/CbaV/z667/wCE/ff/ABmkM6Giue/4TbSv+fXXf/Cfvv8A4zR/wm2lf8+uu/8AhP33/wAZoA6Giue/4TbSv+fXXf8Awn77/wCM0f8ACbaV/wA+uu/+E/ff/GaAOhrnr3/kpei/9gjUP/R1nR/wm2lf8+uu/wDhP33/AMZrCu/F+mt8QtInFtrOxNLvkIOh3oYlpbQjC+Vkj5TkgYHGcZGQDvqK57/hNtK/59dd/wDCfvv/AIzR/wAJtpX/AD667/4T99/8ZoGdDRXPf8JtpX/Prrv/AIT99/8AGaP+E20r/n113/wn77/4zQB0NFc9/wAJtpX/AD667/4T99/8Zo/4TbSv+fXXf/Cfvv8A4zQB0NFc9/wm2lf8+uu/+E/ff/GaP+E20r/n113/AMJ++/8AjNAHQ0Vz3/CbaV/z667/AOE/ff8Axmj/AITbSv8An113/wAJ++/+M0AdDRXPf8JtpX/Prrv/AIT99/8AGaP+E20r/n113/wn77/4zQB0NFc9/wAJtpX/AD667/4T99/8Zo/4TbSv+fXXf/Cfvv8A4zQB0NFc9/wm2lf8+uu/+E/ff/GaP+E20r/n113/AMJ++/8AjNAHQ0Vz3/CbaV/z667/AOE/ff8Axmj/AITbSv8An113/wAJ++/+M0AdDRXPf8JtpX/Prrv/AIT99/8AGaP+E20r/n113/wn77/4zQB0NFc9/wAJtpX/AD667/4T99/8Zo/4TbSv+fXXf/Cfvv8A4zQB0Ncx43t9Q1SxsdF0tNpv7pRPcSQNLFDFH+8beAVyGKqmNwzvPPFTf8JtpX/Prrv/AIT99/8AGaP+E20r/n113/wn77/4zQByOraV4is4vEunTBb9tUjgvreay0+VIUmWREkUpvfnCo2Nwz8x4wTWndWviW18SXl5fJDrDroU6wLp9tJZB33qRHvMr4Y44IIIrb/4TbSv+fXXf/Cfvv8A4zR/wm2lf8+uu/8AhP33/wAZpW/K34NfqH/A/NP9Dh/CX2jRvE0+pRaPJDYnSWMyad4cuLHzZxIm1GR2ZpXAZsPgDBbk4bD9N8Hz6JKCmkhLy58NXQvpreD/AFt07q2xnH3myWAyScDiu1/4TbSv+fXXf/Cfvv8A4zR/wm2lf8+uu/8AhP33/wAZokuZW9fxv/n+CBaO/p+Fv8vxOR03Q9W1DXPCt/4gsZfs5tZrZtPdC8drD9n2/vR93fITznphVHQkw/8ACJW+l+FfFs2meGUivG1JxbLa2KpLLAHiYLHgAlMqSAOOK7T/AITbSv8An113/wAJ++/+M0f8JtpX/Prrv/hP33/xmqbvJvurf1/XUlRskv62scZquh69LfeIL7UILi4vNR8MXKeVArSRQOThLaMjgsBye7MWPTAEjWmq6dp2sm/0mbVNSmsbNVmit5UhaDO0xiNSXJjO5ni3kyBuwO0df/wm2lf8+uu/+E/ff/GaP+E20r/n113/AMJ++/8AjNTbS39bt/r6ldb/ANdP8jn/AIb2dzZazryrZLaadKLd7YQaRJpsDthw7LDIxIbhQScE4BxjBNLW7LXbLxpq/ibRtPuZbnzI9LjRIz+9heBSJMd1SZlJYdAH9K63/hNtK/59dd/8J++/+M0f8JtpX/Prrv8A4T99/wDGab1ev9f0tPmC0OHGhTeDvDmoXcdtO/8Awi+q/braQrg3Vu0KefgnhiQ0nr8yirtroupSQ6LeWltJBrl611qVxeTQF4rdJVGYZFBG84MSBQynMe7OFIPQ6l4k0DV9PlsdR0/XZraYASR/2DqC7gCDgkRA446d6tf8JtpX/Pprv/hP33/xmk1dW/ra36L+mGz/AK/rq/6RwWg6J4nt/DtrDLBMNSbwxJBpk8cLQLYyYXdFICSVlb5CHLAHYQFXBJt32m6fceCLmHwf4bvtNvGaw83zdMlhDOtwhyyHaZWUBizjPGfnrsv+E20r/n113/wn77/4zR/wm2lf8+uu/wDhP33/AMZqm7u/9bt/qH9fl/kcldWerWdrO0Wj3N/rMfiKK4mlWMpFeZj+SRWIISJQVUjLFNpyWPJhm8P39rB4vi1K1vtWvb/7G0E8Mbrvuju2tG2CI0jYrz0VVBOTnPZ/8JtpX/Prrv8A4T99/wDGaP8AhNtK/wCfXXf/AAn77/4zU20t/WyX6B1v/XX/ADKvgK1vrKxv4NdhlOsi7Zr29ZDsvCQNkkbYA2hNq7R93aQeeTzVx4ThIGproEZ1T/hKhL9rFkPP8n7Tndvxu2be+cYrr/8AhNtK/wCfXXf/AAn77/4zR/wm2lf8+uu/+E/ff/Gaf2lLt/mn+gre64/1s1+pwQsoLy+vBYaPeN4gHiNmttSFs7LDCtzmTE/Kxps8wGMldxJ+U7smd9JlluHR9GvP+EwXW/NTVjaPtFv5+4EXWNnl/Z/k8vd1yuzNdbZeJtB09JVs7DXY1mmeeQf2DfnLucseYu57dKs/8JtpX/Pprv8A4T99/wDGaUfdil2t+n+Q5at+f/B/zPNvEN1pfiX+3da/sO+vLlpbWLS7j+wrmQiGFwzyJL5RCglpOhGQoqbxq9zr897faRo3nSmGCbS7v+xri7mmXariSG43BLbHPyY3EqTglgK7iz8R+H9P0uPTrTT9djtI08tY/wCwdQOF9MmLP61JZeKtD07T7eys7HXY7e2jWKJP7BvztVRgDJhyeB3px0+X9P8Ar18gf9foct4u0jWb3UNVm8P2z20T32nC4E1m8oupUkQmWNQVIVFKhmywYKR8u0seq8GWt1af2zHqkEo1BtQZ57pk2x3eUXY8fogXau3LFSpBJPJm/wCE20r/AJ9dd/8ACfvv/jNH/CbaV/z667/4T99/8ZoWit/XT/INzkLjwnCQNTXQIzqn/CVCX7WLIef5P2nO7fjds2984xUD6RLLcPG+jXn/AAmC635qasbR9ot/P3Ai6xs8v7P8nl7uuV2Zrtv+E20r/n113/wn77/4zR/wm2lf8+uu/wDhP33/AMZoj7qS7f5L/IJatvv/AMH/ADKnjmy1K8k8O/2MAs8OrpIZnt2njhXyZRudVZTt5A+8OSK5S5tJIvD2ladc+HnaNbm7N7NqGlT6mhnD8ubeLZv8wksspGFHAxmu2/4TbSv+fXXf/Cfvv/jNH/CbaV/z667/AOE/ff8Axmlb+vu/yHf+vv8A8zhbfwiNR8D+Fv7b8Ox3F/b6okMouLAGSK1E8mEIO4rEFxxkqBjkjmo/EXhyZfEuqxXEEVpblYV0i5i8N3OoPZxrGAPIeBwICrhjt2jnB5HTvv8AhNtK/wCfXXf/AAn77/4zR/wm2lf8+uu/+E/ff/GafX53/L/L8WIy9P8ADkc/j3XdTvtMhmu44bQWOoXFoMhxGwYxsQcc4zg8VgeG9JIvPDbWmiXtj4htZGOvX81o8Xnr5bCUPORtnDybGUKX6Ajbiuz/AOE20r/n113/AMJ++/8AjNH/AAm2lf8APprv/hP33/xmj+v6/XuK2lv6/rt2OC8G2UEzeFJtH0e8ttTild9S1GS2cLJbeW42mc/LIpYx7UDErgfKu3h9jouv3em+G5r6zura303V4lhsgrbmHmsXuJQOgA4UHgAljyw29jp/ifQdL0+GysLDXYreBdsaf2DfttH1MRNWf+E20r/n113/AMJ++/8AjNHVPt/wP8v1HLW/mrf195ws3he/uPEkOtppcPl/8JMrJLcaaW1AxB8M7TbhthBBCqV+4E5px0TW01XUpLWzu44/FV9cWd46xsPs8aS7Y5z0KgwiUA9yY/XNdx/wm2lf8+uu/wDhP33/AMZo/wCE20r/AJ9dd/8ACfvv/jNEfdSX9dP8glq2/wCuv+f4DPANnPpvhGLTrm2e3NlcXEEaMm3MazOEYD0K7SDXSVz3/CbaV/z667/4T99/8Zo/4TbSv+fXXf8Awn77/wCM0BotjoaK57/hNtK/59dd/wDCfvv/AIzR/wAJtpX/AD667/4T99/8ZoA6Giue/wCE20r/AJ9dd/8ACfvv/jNH/CbaV/z667/4T99/8ZoA6Giue/4TbSv+fXXf/Cfvv/jNH/CbaV/z667/AOE/ff8AxmgDoaK57/hNtK/59dd/8J++/wDjNH/CbaV/z667/wCE/ff/ABmgDoaK57/hNtK/59dd/wDCfvv/AIzR/wAJtpX/AD667/4T99/8ZoA6Giue/wCE20r/AJ9dd/8ACfvv/jNH/CbaV/z667/4T99/8ZoA6Giue/4TbSv+fXXf/Cfvv/jNH/CbaV/z667/AOE/ff8AxmgDoaK57/hNtK/59dd/8J++/wDjNH/CbaV/z667/wCE/ff/ABmgDoaK57/hNtK/59dd/wDCfvv/AIzR/wAJtpX/AD667/4T99/8ZoA6Giue/wCE20r/AJ9dd/8ACfvv/jNH/CbaV/z667/4T99/8ZoA6Giue/4TbSv+fXXf/Cfvv/jNH/CbaV/z667/AOE/ff8AxmgCh8FP+Pfxx/2OOofyjr0yvL/gZOtzpvjSeMSKkvi6+dRJG0bAERnlWAKn2IBHevUKBBRRRQAUUUUAFFFFAHm37Qf/ACQnxD/27f8ApTFXW1yX7Qf/ACQnxD/27f8ApTFXW0AFFFFABRRRQAUUUUAU9S1bTtGtftWr39rYW+4L5t1MsSbj0GWIGeKrp4n0GXT0v4tb017N5RClwt3GY2kPRA2cFvbrXD/Hb/kStN/48/8AkMW3/H9/qOrf6z/Y9fbNcp4D0Gw8SQ+O/DdwNJaW8EE/2rQJN9hE20+X5QwNrKwyeTn2xyk9JPt/wH+o2rW8/wDgo9uGo2Tak2nLeW5vVj85rYSr5gTON23OdueM9Kh1PXdI0Xyv7Z1Wy0/zjiP7VcJFvPoNxGa4T4L29xqPhy48W6xMtxqusybJJAMbY4cxKo/FSx9c1hL/AMIo3xj8Xr8STp/neXbjTv7WKeULfZz5e/jO7rjnOcd6pq0rf1/X/BF0b+X9f12PWr3WNN01YDqOo2loLlxHAZ51TzWPRVyfmJ9BUGqeJtC0SdIda1rTtOlkXciXd2kTMvTIDEZFeF+Or3TfEWqvpnh7RdX1bTNI0NIdLfSbJp0triUK6OxJyoCKg7nk1v8Ajq80zxn+zyfFVxp9pJqX2aFPtDwq0sLiZVkVWIyozu4HrS327/m2l/n80NK8lHv/AMD/AD/BnpzeNPCyWaXbeJdHW2kcxpMb+LYzAAlQ27BIBHHuKuJrukSaR/aseq2T6dgn7Ytwhh4OD8+dvUY615H8VtJ07Rr3wZb6RYeG7CBrm4cxapCsVgWMS5MoUAdhz64qv4gbSTceAl8RNof/AAi4+0m4Gkf8gv7Zj5Accbck9f8Aazxmjfbvb+v0Etk/K/8AX6/M9l03W9K1m3efR9Ts7+GM4eS1uFlVT6EqSBUVh4l0LVbx7TTNa068uY874be7SR1x1yoJIrwG51O4k8F/EC30+y8N27Wsdis9z4UVhDPC7sX5yQcKSCQB/FnNbniFfAv2jwbF8Nl0w61/alu0R0sr5ohA/eecV+bG3rv56+9NK7Xy/Hr/AF5g9L/P8D14+LPDo1Q6adf0sX4fyza/bY/ND/3dmc59sVYGuaSY72QanZlLAkXjfaExbEckSHPyY98V84+JNKnuL7xbeXdjpY0P/hJPJvdUFqZNQswWQ7o2yAE6A85+Y8V3Pjrwz53xM0jTbK68rTPGChNUi5Pmi1AkBB9WXCk+1TG8lF9/8kxy0b8r/gz1ifV9NtdPjv7nULWGzl2+XcyTqsb7vu4YnBznj1pz6nYRanFp0t7bJfTIZI7VpVErqOrBM5I4POK574j6ENb+GesadAm11tTJAqgDDx/OgHpyoFeQN4ifVte074oGUi10u7sdNm+Y7VjkhzOTj0ebH4U1Zu39Wei/HcTuo39fw/4B7+uq6e8l2i39sz2WPtSiZcwZGRv5+XjnnHFQ6X4h0bW9/wDYur2Go+X9/wCyXKS7frtJxXhuqIJPhpp2ua0XXS/Efihb7VsAjFqzEIrY524RT+IxW648KN8YvCS/DhdO82OO4OpNpGzyvs+zA8wx/KTu6Z5zjPahX6+nzsmwel7ev4tfjY9Y03WtL1lZTpGpWd+IW2Sm1nWXy29DtJwfY1CvibQWhvJl1vTjFYNtu3F3HttznGJDn5TkEc4r548MaxdfDzShr9jEZI/EMF5ZhApP+mxzP5JPsQ2PwNTzaAPDHhb4l6QSGlt9P0vznH8cpXc7fixJpfZv5f1/n80Vy+9y+f6pfr+DPfLfxd4bu7O5u7XxBpU9taAG4mjvY2SEE4Bdg2Fz2zVs6xpotbW5Oo2nkXjKltL567Z2blQhzhiewHWvErw2/wDwpLxUoPgv7QYYNw8LY+5vGPO77s5x+NP1OKbwrrvh/wAGTlmsk8Q2uoaO7f8APuxcPFn1R2HvhxV299R7tf8AB/ryIv7nN6/gv8z3eiiipGFFFFABRRRQAVz17/yUvRf+wRqH/o6zroa569/5KXov/YI1D/0dZ0AdDRRRQMKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiisXxbq8mieFb28tlL3ZQQ2kY6yTuQkaj6uy0m7IaV3Y0rO/s9Qjkewu4LpIpGikaCQOEdfvKcdCO46irFeXaLc3XhW61HT00q90iO50c3Ns14YHaW6t4wkj/u5HBJXyyd3JKnrWxp/izV7vUfDMN3pd/p8N5E73E1z9mZLjEBb5RHIzDkbui/0p6a+X/B/yZN9vP/gf5nc0V5tovi3U7nxbof8ApWo3Ona355ja6htIoJFVC6vAqMZ1HAGJc8NzziptN1vWrnxXpt0dXnk0zUtUvbaKzMMPleTCjhWDBN+SyE53cjHFA27HodFeXWfjfXNStdBaymXyP7TjtdSvGhX987SEeSgxjheWYDg7QOd2NGKXXLXWvFCSeJ9RuYtHtElgilgtQHZ4Xb5isIJwQCMEdOc1PMlDn6f8C/6jteXL1/r/ACPQKK870nxhq+seIfDZt5FXRryGRHkaIbr2VIdzOv8AdRWwARjcd38IGa3hnxtql5pNtf69enT44NDkvJPPt0f7YwIzOFj/AIEGPlBViX5UDBNS91tPp/wf8hR95XXl+J6bRXA+E/EGrTeNDpWpSam8Nxpn21Bqa2YdSJAoKC2JwhDHh+fl4PWl8feJNX8PSag2kSyXJ/saacW0Uce6zdD8twS+AUOcFSSflG1T82B6W+f4X/yHH3nZeX42/wAzvaK80v8AxtrUWka7ehXtbm1Wyhi0+VImlgErAG4Y52HduO0byg8v5iDuAnn1jxZpHh/Wri6g1QRwpDJZ3GoiyM7OZNrx4gbyyuNuCwByxyeBgelyU7q/9f1/Wx6JRXBap4z1q0v9ScaLeWS2ehz3sdpeGBvOlRlwcxSOcAEgjI603WdS1fQPCMl/b+JX1e6lFnIkZhtw+JJ0VjHhVGxgxA35x/eo7f11a/QfW39dP80d/RXnlx4wvbHTpNU1G+Nsi66ttPZmJWezh2f6lsA7nbhsqWyXAUkYJhPibxEbPxbc6jex6TJp8dvdWcDwq4gVgzCGTglmcBQ2OQWIXoCVfS/9bJ/qHW39dV+h6TRXM+B9ZvfEGk3Oo6m3k3D3Txtp23BsNvy+UxwCW43Enj5uOMZ5+fU9dRhqS+ILwRnxINP+xeRb+T5Pn7MZ8rfnHffT+0o9/wDNL9RX91y/rq/0PRqK82m8Q6zHHe6rHr4lNnr401dLWCLY6NcCMK5xv37XyCGUYC5B5JV/Eesvpz+IYtXKmPW/7O/sUQxGNkFx5Gwnb5vmFf3md2Ony46kdUn3/W3+aG9L/wBd/wDI9IorzrxLrWsm413UNJ1q5tLPSZrW1jhjhgaOaVnXzdxeNmOBIo4YYINReNvF2pabcardaPd6i0ejtEsyQw2q2qO21tkxmbzXLBhzFjAYAZYGha2A9KorznxZ4s1vRdS1CHTDNqEYuLAjyEhBs/MkVWhYvtDeYOVILEFvm2jaa6Twjq13rEOp3F/LtlS/eEWRUBrIKFAjYgfMx++SCw+f5SRg0LVf15f5/wBaA9DoqK85n1PXUYakviC8EZ8SDT/sXkW/k+T5+zGfK35x3301/Eesvpz+IYtXKmPW/wCzv7FEMRjZBceRsJ2+b5hX95ndjp8uOpH3kn3/AFt/mgeja/rr/kz0iiuZ8Z61qGitoTaZDNcG51RYJbeAR75kMUjbQZCFHKg5yOnWsFfEWpXWi6TDHqt9c6nqD3MzRaTbW4lRY3w0Ya5CxqsZIQ7lLseeOaVx2t/Xr/keiUV5fDreu6v4P8N6tD4gvbKW+v00+dYIrVlkXzXQycxuA5Cj7p2Z6DFS3+s+Lpde1iw0Qatdy6P5McAhWwEdyxiV91x5pV8OSR+6CgAHHPR/1+X+aF/X9fcel0Vx9pd6tfeNdYEmp3cFtpkNtImnRJAUkZ42ZlZjGznkfwsKytG8QaxLF4U1eTWvty+IZCs+m+TEI7cGJpCYiqh/3ZUK29mzk5wcYP6/yC+lz0WivN9A8Q6zLH4W1GfXxqX9s3T2s9ksESxxhY5GLKVG8OpjG7LEHJ+VeMVrPxvrmpWugNZTKYP7TjtdSvGhX987SEeSgxjheWYDg7QOd2Dql3/4H+YPS77K/wCf+R6jRXl8/iXxB/wlSeXe37Wi+IE0+RoI7U2Plk/6sFh55kAIDEfKH3AHinN4z1y31TWIDcLKuo3M1noSvEo8meKURMpwBuGW385OI37UR95K3X/gf5oHo7P+t/8AJnp1Fc/4I1K71TwpBLqU5uL2KWa3uJGVVLPHKyE4UAD7vYCugoAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigDj/AIKf8e/jj/scdQ/lHXpleZ/BT/j38cf9jjqH8o69MoEFFFFABRRRQAUUUUAebftB/wDJCfEP/bt/6UxV1tcl+0H/AMkJ8Q/9u3/pTFVz/hX/AIN/6FLQv/BbD/8AE0AdDRXPf8K/8G/9CloX/gth/wDiaP8AhX/g3/oUtC/8FsP/AMTQB0NFc9/wr/wb/wBCloX/AILYf/iaP+Ff+Df+hS0L/wAFsP8A8TQB0NFc9/wr/wAG/wDQpaF/4LYf/iaP+Ff+Df8AoUtC/wDBbD/8TQBq6lpOnaza/ZdXsLW/t9wbyrqFZU3DocMCM80abpGm6Pam20jT7WwgJ3GK1hWJc+uFAFZX/Cv/AAb/ANCloX/gth/+Jo/4V/4N/wChS0L/AMFsP/xNAGzY2FnplmlpptpBZ2yElYbeMRouTk4UcDJJP41X1PQNH1pom1jSbHUGh/1ZurZJSn03A4rO/wCFf+Df+hS0L/wWw/8AxNH/AAr/AMG/9CloX/gth/8AiaANe002x09pmsLO3tWnffKYYlTzGxjLYHJwAMmoP7A0f+y5dN/smx+wzOXktfsyeU7E5JKYwTkA5x1rP/4V/wCDf+hS0L/wWw//ABNH/Cv/AAb/ANCloX/gth/+JoA0dU0HR9bjiTWtKsdQSEkxrd2yShM9cbgcdKE0DR49HOkx6TYpppzmzW2QQnJyfkxt689Kzv8AhX/g3/oUtC/8FsP/AMTR/wAK/wDBv/QpaF/4LYf/AImgDS07Q9J0i3e30nS7Oxhk+/HbW6Rq31CgA9aj07w3oekXMlxpOjafYzyDDy21qkbN9SoBNUf+Ff8Ag3/oUtC/8FsP/wATR/wr/wAG/wDQpaF/4LYf/iaANJtD0l7e7t30yzaG+cyXUZt0K3DHqzjGGPA5OelSHStPM1nKbC1MlipW0fyVzbgjaQhx8oIGOMcVk/8ACv8Awb/0KWhf+C2H/wCJo/4V/wCDf+hS0L/wWw//ABNAHQEAggjIPUGs1PDehx6RJpUejaemnStuks1tUELnIOSmME5A7dhVH/hX/g3/AKFLQv8AwWw//E0f8K/8G/8AQpaF/wCC2H/4mgDYGn2Q04aeLSAWSxiIW3lDywgGAu3GMY7VBpeg6PoayLoulWOnCQ5cWlskW/67QM1nf8K/8G/9CloX/gth/wDiaP8AhX/g3/oUtC/8FsP/AMTQBof8I9ootYLUaRYfZ7ebz4YvsybIpck71GMBsknI55pZ9C0i6N4bnSrKY3wUXZkt0b7QF+6HyPmx2znFZ3/Cv/Bv/QpaF/4LYf8A4mj/AIV/4N/6FLQv/BbD/wDE0AWLfwh4atLW4trXw9pUEF0AtxFHZRqswByAwC4bB9avXelaffzW019YWtzLaPvt3mhV2hb+8hI+U8DkelZP/Cv/AAb/ANCloX/gth/+Jo/4V/4N/wChS0L/AMFsP/xNAHQ0Vz3/AAr/AMG/9CloX/gth/8AiaP+Ff8Ag3/oUtC/8FsP/wATQB0NFc9/wr/wb/0KWhf+C2H/AOJo/wCFf+Df+hS0L/wWw/8AxNAHQ0Vz3/Cv/Bv/AEKWhf8Agth/+Jo/4V/4N/6FLQv/AAWw/wDxNAHQ1z17/wAlL0X/ALBGof8Ao6zo/wCFf+Df+hS0L/wWw/8AxNYV34H8Jr8QtItl8MaMIJNLvpHiGnxbWZZbQKxG3BIDMAe24+poA76iue/4V/4N/wChS0L/AMFsP/xNH/Cv/Bv/AEKWhf8Agth/+JoGdDRXPf8ACv8Awb/0KWhf+C2H/wCJo/4V/wCDf+hS0L/wWw//ABNAHQ0Vz3/Cv/Bv/QpaF/4LYf8A4mj/AIV/4N/6FLQv/BbD/wDE0AdDRXPf8K/8G/8AQpaF/wCC2H/4mj/hX/g3/oUtC/8ABbD/APE0AdDRXPf8K/8ABv8A0KWhf+C2H/4mj/hX/g3/AKFLQv8AwWw//E0AdDRXPf8ACv8Awb/0KWhf+C2H/wCJo/4V/wCDf+hS0L/wWw//ABNAHQ0Vz3/Cv/Bv/QpaF/4LYf8A4mj/AIV/4N/6FLQv/BbD/wDE0AdDRXPf8K/8G/8AQpaF/wCC2H/4mj/hX/g3/oUtC/8ABbD/APE0AdDRXPf8K/8ABv8A0KWhf+C2H/4mj/hX/g3/AKFLQv8AwWw//E0AdDRXPf8ACv8Awb/0KWhf+C2H/wCJo/4V/wCDf+hS0L/wWw//ABNAHQ0Vz3/Cv/Bv/QpaF/4LYf8A4mj/AIV/4N/6FLQv/BbD/wDE0AdDUU9rb3Xl/aYI5vKkEkfmIG2OOjDPQj1rD/4V/wCDf+hS0L/wWw//ABNH/Cv/AAb/ANCloX/gth/+JoA2LrT7O+aNr20guDFu8syxB9m5SrYyOMqSD6gkU77Fa7rc/Zoc2wxAfLH7rjb8v93jjjtWL/wr/wAG/wDQpaF/4LYf/iaP+Ff+Df8AoUtC/wDBbD/8TQBah8KeHbeaWaDQdMilmLGV0s4w0hIIJYgc5DMDnsx9avLp1kgtQlnbqLMYtgIlHkDbt+Tj5fl447cVj/8ACv8Awb/0KWhf+C2H/wCJo/4V/wCDf+hS0L/wWw//ABNAGsul2CW8NutjbLDBJ5sUYhULG+SdyjGAcknI7mnmxtC9w5tYS90oWdvLGZlAwA394YJHPrWN/wAK/wDBv/QpaF/4LYf/AImj/hX/AIN/6FLQv/BbD/8AE0AbIsLNTbFbSAG0UrbkRj9yCNuE/ujHHHaok0fTI0t1TTrRVto2igAgUCJGGGVePlBAGQOuKy/+Ff8Ag3/oUtC/8FsP/wATR/wr/wAG/wDQpaF/4LYf/iaA22L+m+HdE0Vt2j6PYWDEEZtbVIjg4z90DrtX8h6VYm02xuGuDPZW8puohDcF4lPnIM4Rsj5lG5uDxyfWsj/hX/g3/oUtC/8ABbD/APE0f8K/8G/9CloX/gth/wDiaANh9OsZHkeSzt2aWH7PIzRKS8XPyHjleTx05NU7Lwt4f02GeHTtC020iuNvnJBZxosu05XcAOcHpnpVP/hX/g3/AKFLQv8AwWw//E0f8K/8G/8AQpaF/wCC2H/4mgDcNtAboXJhjM4QxiXYNwUnJXPXGQDj2qhaeGdBsLeW3sdE062hmdZJY4bSNFkZTlWYAYJB5BPQ1S/4V/4N/wChS0L/AMFsP/xNH/Cv/Bv/AEKWhf8Agth/+JoA1m0rT3uHnewtWmeVJnkMKlmkQYVyccsBwD1FEuladPM0s9haySO8cjO8KksycoxJHJXse3asn/hX/g3/AKFLQv8AwWw//E0f8K/8G/8AQpaF/wCC2H/4mgDbitLaC4nnht4o5rggzSIgDSkDALHqcAY57VGdNsWj2GytynnfaNpiXHm53eZ0+9nnPXNZH/Cv/Bv/AEKWhf8Agth/+Jo/4V/4N/6FLQv/AAWw/wDxNADtL8IaZYX8t/cWlpd35upp4bx7VfNhEjFtiuckAbiOCM5PHNX/AOwdI/tg6v8A2VY/2mRj7b9mTzsY2/fxu6cdelZ3/Cv/AAb/ANCloX/gth/+Jo/4V/4N/wChS0L/AMFsP/xNHSwbtsoaf8MfC9rocdnd6HpF7dLGVe9l02LfIxz8xyCc8+tX7DwRoUGn2EWoaVp2oXdnZx2n2yeyQyOqpt6kEgEZ4z3o/wCFf+Df+hS0L/wWw/8AxNH/AAr/AMG/9CloX/gth/8AiaFp/X9dweu5rNpWnusqvY2zCaVZ5QYVO+RcbXPHLDauCeRtHpUsVrbwTTTQwRxy3DBpnRAGkIAALHuQABz2FYn/AAr/AMG/9CloX/gth/8AiaP+Ff8Ag3/oUtC/8FsP/wATQBrnTbFo9hsrcp532jaYlx5ud3mdPvZ5z1zUP9g6R/bP9r/2VY/2njH237MnnYxt+/jd0469Kzv+Ff8Ag3/oUtC/8FsP/wATR/wr/wAG/wDQpaF/4LYf/iaANua1t7lomuII5WgfzIjIgYxvgjcuehwSMj1NUbvwzoOoQeRf6Jp1zF5zT+XNaRuvmN958EfePc9TVL/hX/g3/oUtC/8ABbD/APE0f8K/8G/9CloX/gth/wDiaANZdL09LeKBLG2WGGXzooxCoVJMk7wMYDZJORzk1W1Pw1oWtzpNrOi6dqEsa7Uku7RJWUZzgFgcCqX/AAr/AMG/9CloX/gth/8AiaP+Ff8Ag3/oUtC/8FsP/wATQBtx2tvDcSzwwRRzTBRLIqAM+0YXJ6nA6Z6VVtdB0iw1GfULHSrG2vbnPnXMNsiSS5OTuYDJyeeazv8AhX/g3/oUtC/8FsP/AMTR/wAK/wDBv/QpaF/4LYf/AImgPIf4c8IaZ4etrdo7S0k1GKAQyagtqqTSqOxbk44HGT0Faa6XYJbw262NssMEnmxRiFQsb5J3KMYByScjuayf+Ff+Df8AoUtC/wDBbD/8TR/wr/wb/wBCloX/AILYf/iaANZdL09YUhWxthFHMZ0QQrtWUsW3gY4bcSc9ckmgaXp6mErY2wMErTRYhX93I2dzrxwx3Nkjk7j61k/8K/8ABv8A0KWhf+C2H/4mj/hX/g3/AKFLQv8AwWw//E0AbkFtBaoy20McKs7SMI0CgsxyzHHckkk9yalrnv8AhX/g3/oUtC/8FsP/AMTR/wAK/wDBv/QpaF/4LYf/AImgDoaK57/hX/g3/oUtC/8ABbD/APE0f8K/8G/9CloX/gth/wDiaAOhornv+Ff+Df8AoUtC/wDBbD/8TR/wr/wb/wBCloX/AILYf/iaAOhornv+Ff8Ag3/oUtC/8FsP/wATR/wr/wAG/wDQpaF/4LYf/iaAOhornv8AhX/g3/oUtC/8FsP/AMTR/wAK/wDBv/QpaF/4LYf/AImgDoaK57/hX/g3/oUtC/8ABbD/APE0f8K/8G/9CloX/gth/wDiaAOhornv+Ff+Df8AoUtC/wDBbD/8TR/wr/wb/wBCloX/AILYf/iaAOhornv+Ff8Ag3/oUtC/8FsP/wATR/wr/wAG/wDQpaF/4LYf/iaAOhornv8AhX/g3/oUtC/8FsP/AMTR/wAK/wDBv/QpaF/4LYf/AImgDoaK57/hX/g3/oUtC/8ABbD/APE0f8K/8G/9CloX/gth/wDiaAOhornv+Ff+Df8AoUtC/wDBbD/8TR/wr/wb/wBCloX/AILYf/iaAOhornv+Ff8Ag3/oUtC/8FsP/wATR/wr/wAG/wDQpaF/4LYf/iaAKHwU/wCPfxx/2OOofyjr0yvL/gZbw2mm+NLa1hjggh8XX0ccUahVRQIwFAHAAHGK9QoEFFFFABRRRQAUUUUAebftB/8AJCfEP/bt/wClMVdbXJftB/8AJCfEP/bt/wClMVdbQAUUUUAFFFFABRRRQAV5n8W9cdJ9I8OWviEeH5L8y3E18LsWxSONDtXeSMbnKj3ANemVzd94C0DVvFEuu61Zx6pO9slskF9FHLDCqktlFK8EknJyfwqZK+n9f1cadtTzXxN42vNZ+A/h/V7C/wBQgu5723tbx9NlKXDMMrIqEdSxGQO+RWf9t8X6Z8PPGl6LvxPaaVHBD/ZkuvSbb9ZC4EhDD5lHb8RjvXo//CqdASxmsraW8trOTVU1ZLeFo1jhlX+FBs4Q/wB38iK6HxN4etPFfhu80TUZJo7a8ULI8DAOACDwSCO3pTlqpNbv/JfrcI2Tinsv83+ljzP4WnxNJ4t8xX8WHw81jm4Piggu1xkY8nPO3HORx1z2qH4sahqC/EaxsLa78WCBtJeUW3hmRvMMokIDOo429ievSvY7eBba1igjJKxIEUt1IAxXK+Kfh1Z+Kdet9YbW9b0m8gtzbLJpV2ICULbiCdpPX3xwKc9ZK3S/6/5ihonfy/Q4H/hJ9c0r4d+F/HrarcauLBHttYto5GVJgzFVLIcDzEfapJGTnqRzXong201TRfAqT+ILq5vtUlR7y5EspfY7fN5S5+6qjCgDjimTfDnQ5Ph9J4OiN1BpsmC8kcoMzN5gkLFmBySw54/KuqVQqBR0AxzTlqpW6/1+Ykrcvl/S/A8m8B6brvinQrLx3f8AjHVlu55WnOnW0i/YhErkGHysdSFI3ZyM9yMnK06y8QeKfhzefEC48b6xYX5iuLq3tLW4EdnAsbNtjaPGG+7gk+vOcc9rZfCTQ9N1lbzT9R1q2s1uRdf2TFfFbPzAwYHy8eoBxnHHpVab4KeHZJpo4tR1y20ueUyzaPBqBSzck5OUxnB9j2FJ6rTTt5f1+nmylo9ddfv/AK/rYzfDfijVNc+InhOa6uZo4r/wwbqe1R2WFpd4+fZnGfQ+lbWg6jezfGvxXYzXk8lpBZWjQ27SsY4yynJVc4BPfFWPEPwx0zXtVstQg1XWNEnsbT7HB/Y9ytvtiznbnaTj2zjgVBefCqyuvEH9sw+JfElldvDDDM1pfrH54iUAb/kyxOMnJ6k9KenMn6/jf/MnWzXkvwt/kziNEubzVfi1qsN7f+OpFttcZIf7OmJ02JFIYJNnOB2IHGCK1vD9hrnxGvtc1qXxhq2jmx1SWysbLT5QsUKxkYMsZH7wnOSD/LgdGnwts4PE9xrVl4k8SWbXV59tms7a/EdvI+QSGQJyDjByc470mpfCXRNQ1y81KDUda00ag+++tNPvjDBdt3LqBk5yc4I6n1pQ0UU+346a/gxy1ba7/hr/AMA5JvB97/wuBPDp8ceL/sbaSdRJGrEN5nnbNv3cbMdsZ96qzeKfECafq+m2Wr3ENxqXjaTSYr2VjKbOEhThAxwOmAOOpxg816x/wjFkPGi+JhJOLxbD+zxHuHl+Xv35xjO7PfOMdqx7j4YeH7zR9V028+1Tw6nqT6m7tKFeCdscxsoGMY4znqc5oWiSf9e8n+SsN9f6+y1+ZzS2mqfD/wCI3hrToPFGr61Y64Z4bi31a4890ZE3CRDgFRnr/XPHLeGvFXiDSfCOqHWtVvbq31yxv5dMvZbh2e1uYPNUxBicjKqGXB6qcV6d4d+GuleH9bGsTajq+takkZihutXvPtDwIeoTgAZ/Pk+tE/wy0O58BDwlNJdtZJK00c+9RPE7SM5ZW24B+Zh06HFKSfLb+tf8t/w2Gmk7+n4X/wCG/Hc8/wDEkviZ9O8N6pfX3iYeHf7Fhae48Pzjz47kqC0kwOWdMYJ9Pr19e8OXsWo+GdOu7fUP7SjltkYXmzZ5/wAoy5X+Ek9u3SuZ1H4VaZfrarFrev6ekNpHZypY3/lLdRoNoEgC4JxwcY611ulaXZ6JpNrpmmQiC0tYxFFGDnaoHqep9+9aNp39f8zNJq3p/kXKKKKgoKKKKACiiigArnr3/kpei/8AYI1D/wBHWddDXPXv/JS9F/7BGof+jrOgDoaKKKBhRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAVgeNtbHh/wjeXguYbWVtsEM0zhUjkkYIrMTjABbJ9ga36z9Q0e31LUNOu7l5M6dM08UakbGcoyAsMZOAzY5HJpNX0GnbU4rw/40stK8J62ItVTXo9BuQovGvll82GRgyM0vOSoZlJP9yuhs/G+laprkmn6HdWmrLFYvdvJY3kcmCrBRHwcAnPUsBx+NT6t4SsdYv57uea5ie4tUtplhZQrqkgkUnKk5ByB7MfbEuq+GbDWbi4lvvNYXFhJYSRq+FMbkFu2c8dc0O718vxs/1sxJW0/rdX/UyPDHjyHxBr8ulE6U8q232lH0vVBeqFDBSshCLsblePmB5545q6X8Qby+Z3uNGghtn02fUbWSO+MjSxxOFAYeWAu7IIILcVfh8CpFO1xJ4g1ia6+xGxSd2gVooSynChYgoPy/exnk88Li63hDTN8fk+dBHDpj6XHFGw2pC231BO4bRg5/A0SvbTz/AFt+n4gt9fL9L/qZo8eC513TdI03TxcXN5amWSR59kUEnleYsRYKSSR1wPlBUkfMAYLfxtrH9natfahodjDBplybRxBqTyM8oZBwDAoC4fOc54xjnNa2neDNK0oaOLLzoxpHmGLLgmVpF2u8hIyzHrnjn8qLjwdYXOi6tpjz3Sw6tctczukgV0ZipOw44HyD1PvVP4nba34/1clXsr/1p/mZt58Q4IdT1u2s7BrmLSNNmvDc+aFSeSLh4l4PAJwW6BgwwSDViz8bJqVhf6hp1rDcadZ28bi9F4iwySEZdd5AULGMbnyccjGRirFz4J0meKWKIS2sMmlPpIigKhUhY8kZB+b3OR7Go77wLpt+t0rXF5CLqG3jcROoAeBt0coBU/OOBzkEKARxU9P67v8AS3+e5fX+vL/g/wBWE8I+MYvFFxqFsP7PaaxMZaTTb8XkDq4JGJNi/MCrAjHHHJzVPXvGmqaTJrclnotndWWjCMzyS6i0Uj7kV/lQQsOA3dhWzovhqPR9RvdQfUb7ULy+WNZ5rto+RHu24VEVV4bHAA4z1JJbqHhSx1K21qCeW4VdZ2/aCjKCu1Ao25HHCjrmm9xLzMzVvGeoWFxrJtNDS5s9ERZbyd70RsyGMSHy02HcwBPDFRwMNyQG3/jm5jj1S80nSEvtM0cKb6d7vyZf9WsrCKMoQ5WNlPzMmScD1qO48Ey6vr2vtf3t/aafqDQo0NvNHsvIhEqsrAqxTkMMrsYg9emL994Gsry6vXjv9Qs7TUdv2+wt5EEN1tUL82ULrlAFOxlyAM+tJXt/X4+X4j7fj/Xch8QeMLzTZtmjabbagE02TUpmuLxrfZEuMAARvktk4zj7pqLX/HZ0XS7K88rSovtVp9pA1PV1tA/yg+XH8jM7DI/hUcjnnAqw+Bb7UbnWrjUdb1PTzqDvaeRbLalDaKWESruiYqNrHuDk5PNLpXgW5m0+OTVNV1Kzvfs76fObdoAbm1SV/KDHyztOxuqbG59ehrbT+t/+AvvEtHr/AFt/wfwJtZ+I1to2jrqtzaBLC50v7dZTTziMTy43fZzwQrkEEcnPzYHy1r+H/E8PiS5uW02NJtOhSMJfxy745pSCXRMDBC/KCwJ5JHUGqr+AtLl057OWe7eM6SNIjZnXdDDjDFfl4ZvlyTkfIvAxWnY6BaadrN1qVq8qyXkMUU0e4bHMYIV8Y+9tIUnPIVeOKvS7/rq/0t/W61sv67f8H+rWxdV8Z3lnJq82naOl7p+hkDUJnu/KkyEEjiKPYQ5VGB+ZkBJwD3p3iDxheabNs0bTbbUAmmyalM1xeNb7IlxgACN8lsnGcfdNT6h4JtNQvb6UahqFrbantOoWNvIghuyAFJbKF13KArbGXIAz61kw+Bb7UbnWrjUdb1PTzqDvaeRbLalDaKWESruiYqNrHuDk5PNZ62st7fj/AMPZryTK0/r+u17+bQ7WPiVBptxa2sa6XDczWCXzjVdVWyQK+dqIxRi7ZDdgBgZPOKXU/iZZ6boSa1JaqunXWlm9sp5rgRieUDP2cnBCuRjHJz82B8tSaL4Qv10+1nutW1HTdVgjeze4tvs7NPbpK3kh1aNkyFwchQfmOfStO/8AB1nqqXX9pXl5cy3WmnTWmYxhkjbO9lCoAHc4J4x8q4AAq31t5/rb9P8Agij05vL9L/qN0zxhbatDqN7ZJHJpdjAsn29Jt0cr7SzopAwQgAywJ5JHUGsyw8dak8N0+q6Hb2jRaMNXiSG/aUshzhGzEu1uO24UeJvBD35kTSrm8totWaC21XyHiG6CNHG/DqfmOUU4zlQBjimXfgm+GvW0/wDbWpajb3lvJp+oeeLVAlsY3K7QkSHO8ryM9eeKl3d+X+tH+rX3AtLX/rVf8H7y0fiJpr+H57+CG4F3DZrdmyuoJbZnUkAlDIg3qCQCygjkeora8R6vJoWgzX8Fst1KjRokTy+WrF3VBlgrYHzZ6Gsdfh9ZPayQ6hqmpagzWf2GKWdoVaCHKkqgjjVeSi5LAn5RzXQavpcGs6a1ldNIkbPG5MZAbKOHHUHuoqpW6f1/SJjfqcy/ji9sJNUttZ0eCO8sjapDFZ3pmW4kuGKRrueNNvzAZJBABz7Vq6Nr95d61eaPrOnRWN/bQx3C/Zrk3EUsTllBDFEIIZGBBUdiCc8JqXg7TtVn1Ka5kuVk1BIAzRyBTA0JLRyRkDIYMc85HA4xkGxpHh+PS7y5vZ7671K/uVWOS7vDHv8ALXO1AI1VVUEseF5JOc0l5/1/T/AoyZ/HUa+Jb3QLW0S41O3vIII7cXGHeN0V3mI2kqiBjzyCQBkFgKjk8c3KqdRTSEfQFv8A7A159rxOG83yS4h2YKCX5fv7sZO3sdG78HWF3c3twZ7qOe7vYL3zI2UNDLCqquzKnAITBBzkMw71APA1iLpv9Pv/AOzWu/tp0oun2bzt2/d9zzMb/n2b9u7tjiiPS/8AW3/B/rYfl/W//A/retqnjW7sfEj2EGlQT2UN5a2c9y16VdZJ8Y2xiMg7QQTlh1FGqeNbux8SPYQaVBPZQ3lrZz3LXpV1knxjbGIyDtBBOWHUVof8IfYmzEM1zdSyHUU1KW4dl8yaZCCu7ChdoCquABwB9aP+EPsTZiGa4uppDqKalLcOy+ZNMhBXdhQNuFVcADgD60R6X7/hp/wfwE7627fjr/wDAf4q6emuPak6YLWPUPsDB9UUXu/f5e8W23lN567wduWx2rR0vx3HrGsnS7CzSW6hv7m2u0S4ybWKJmUSvheC5ACqcZycE7TV+38LGx1GSfS9a1Kxtpbk3MlhEIGhZ2OX5eJnUMckhWHU4xSQeDrC2uLe4gnukmt9Qnv1cMuS027zIz8vMZ3dOvyqc5FJXsr/ANPT/gjfW39LX/gFa18Z/atG8PX/ANg2/wBtXn2bZ52fJ+WRt2dvzf6vpx19qp618RoNH027mOntcXUN9Jax2scoy6Rld8rHHyqNw7HkqOSwqpqfw+vbLQbdNB1/V5ptKl+06daSi02LJ8wwSYQSMOw5bvWzL4B0eWDWkY3Ak1qXzLmfeC6gMGCISMKoIJxjqTTW+vn+lv1CXl/W/wDwDL8VfEg+G9Uu7U2en4tfLwl7qf2ae6345gj8tvMUZxnI5Vh2rRn8cQWnjS70S9tfJtbe2837f5uQZAnmGMrjg+Xlgc8gGrV94O0/UY9ZFzNdM+sGMTyb13RpGBsROMBQQTg55dj3qLVfAmk6x9s+2Pc5vL2K9kZHCkMkax7AcfcKKVIOSQ7c88LXT+v6tuHX+v61JfB3iZ/FOkS3k1gdPlinaF7dpd7L8qsMnAwSrDjt6mugrP0/R7bTL7Ubq2Mm7UZxcSqxG1WEax/KMccIPXmtCq0BX6hRRRSAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKAOP+Cn/Hv44/7HHUP5R16ZXmfwU/49/HH/Y46h/KOvTKBBRRRQAUUUUAFFFFAHm37Qf/ACQnxD/27f8ApTFVz/hG9V/6HXXf+/Nj/wDI1U/2g/8AkhPiH/t2/wDSmKutoA57/hG9V/6HXXf+/Nj/API1H/CN6r/0Ouu/9+bH/wCRq6GigDnv+Eb1X/oddd/782P/AMjUf8I3qv8A0Ouu/wDfmx/+Rq6GigDnv+Eb1X/oddd/782P/wAjUf8ACN6r/wBDrrv/AH5sf/kauhooA57/AIRvVf8Aoddd/wC/Nj/8jUf8I3qv/Q667/35sf8A5Groa8p1r4h+JIvibqfhzTL7wlp9rYm32trU0kUs/mICQmGwxBJ4wOooWrsHRvsdr/wjeq/9Drrv/fmx/wDkaj/hG9V/6HXXf+/Nj/8AI1cU/ib4pDx8PDCx+EPOazN+JCt1t8nzNmM5zv8Awx70+++J2tWHhHxJM9lZya7pesf2ba2yRvsmDMvlsV3ZJKljwR0pX0v/AFvb8x2d7f1tf8jsv+Eb1X/oddd/782P/wAjUf8ACN6r/wBDrrv/AH5sf/kasGy+IF1qzeCItLjtWl8QRNcXm5WYQxRx5fbhuDv+UE5x6Gl+JfjPV/Ct5oVrok2i2zanLKklzrTOkEQRQwJZWGM9O/anL3XZ97Cj723a5u/8I3qv/Q667/35sf8A5Go/4RvVf+h113/vzY//ACNXGWnxM8QN4GsfE97p1itnDqhtNTkhDsj2+4J9ogJYfKGPfdmur8EeJL7xXDqWpyRW8ekG7eHS2jVt80SHaZWJOCGYHGAOB3p21/ry/wAxX/r7/wDIsf8ACN6r/wBDrrv/AH5sf/kaj/hG9V/6HXXf+/Nj/wDI1ctD408a+JNV1KbwTo+ky6Npd21o51CaRJr10+/5RX5VHYFs/wAwEPjHxx4l1TVf+EE0vRRpulXL2kkuqSyb7qVAN4jCcLg8Zbg8c9QF0v8AP5f0x9bHVf8ACN6r/wBDrrv/AH5sf/kaj/hG9V/6HXXf+/Nj/wDI1crp/wAUbrWP+EKls7KGBNeuZ7a9imBZ4WiByEIIH3h3B4xwK6C68UXsHxXsfDCRQGyuNMkvHkKt5gdX2gA5xjHt+NHW39aK/wCQf1+NvzLX/CN6r/0Ouu/9+bH/AORqP+Eb1X/oddd/782P/wAjVxniLx/4mt/iLqHh7Rr7wjYQ2kcDRnXZpYpJ2kXOE2thiD2x3FaOo+MPFureL9S0LwHp+lONGWP7dd6q8gR5HXcI4wnOcdzx9OMi1VwejOi/4RvVf+h113/vzY//ACNR/wAI3qv/AEOuu/8Afmx/+Rq4jVvFfxSsfE2jaSLLwpbya35pto5WuJDB5aB2WR1IBPOMqCD7VcuvibqOgy+LV8QWlpM2gW9l5aWQdfPnnTldzE/Lv6HGQOuTR0uOz/r7jq/+Eb1X/oddd/782P8A8jUf8I3qv/Q667/35sf/AJGrkm8Z+O/Dl7pNx430rRV0rVLuO0/4l0shmtHk+75m47WHY7fQ+wqXw98SdQvPiPqega1aW0FgLuez026iRgZJYgGaNyWI3FGBGMdDR/wfwt/mhdL/ANa/8MdR/wAI3qv/AEOuu/8Afmx/+RqP+Eb1X/oddd/782P/AMjV5/dfFrXl8JeF7uKLRbK81x51kvdRMsdlB5bEBTtJYFh3JwMfl6d4du9RvvD9pc6zDbQ3sikyC0l8yJuThkburDDDvzTtuD0dij/wjeq/9Drrv/fmx/8Akaj/AIRvVf8Aoddd/wC/Nj/8jV0NFIDnv+Eb1X/oddd/782P/wAjUf8ACN6r/wBDrrv/AH5sf/kauhooA57/AIRvVf8Aoddd/wC/Nj/8jUf8I3qv/Q667/35sf8A5GroaKAOe/4RvVf+h113/vzY/wDyNWFd+H9SHxC0iI+LtZZ20u+YTGGy3IBLaZUf6PjByCcgn5RgjnPfVz17/wAlL0X/ALBGof8Ao6zoAP8AhG9V/wCh113/AL82P/yNR/wjeq/9Drrv/fmx/wDkauhooGc9/wAI3qv/AEOuu/8Afmx/+RqP+Eb1X/oddd/782P/AMjV0NFAHPf8I3qv/Q667/35sf8A5Go/4RvVf+h113/vzY//ACNXQ0UAc9/wjeq/9Drrv/fmx/8Akaj/AIRvVf8Aoddd/wC/Nj/8jV0NFAHPf8I3qv8A0Ouu/wDfmx/+RqP+Eb1X/oddd/782P8A8jV0NFAHPf8ACN6r/wBDrrv/AH5sf/kaj/hG9V/6HXXf+/Nj/wDI1dDRQBz3/CN6r/0Ouu/9+bH/AORqP+Eb1X/oddd/782P/wAjV0NFAHPf8I3qv/Q667/35sf/AJGo/wCEb1X/AKHXXf8AvzY//I1dDRQBz3/CN6r/ANDrrv8A35sf/kaj/hG9V/6HXXf+/Nj/API1dDRQBz3/AAjeq/8AQ667/wB+bH/5Go/4RvVf+h113/vzY/8AyNXQ0UAc9/wjeq/9Drrv/fmx/wDkaj/hG9V/6HXXf+/Nj/8AI1dDRQBz3/CN6r/0Ouu/9+bH/wCRqP8AhG9V/wCh113/AL82P/yNXQ0UAc9/wjeq/wDQ667/AN+bH/5Go/4RvVf+h113/vzY/wDyNVnxLqtxpWkqdOSN7+6mS2tFlBKGRzjLAEEqoyxwc4U1DoviaG88O6be6kyW9zdSC0liQFgt0CVeMdcAMrDJ9KFr/X9f0w2Gf8I3qv8A0Ouu/wDfmx/+RqP+Eb1X/oddd/782P8A8jVo3Gu6bavepcXQRrFEe4BVvlD52Y4+YnBAAyc4HUiobDxLpepW15PbyzRixGblLm1lt5Iht3ZKSKrYI5Bxg4OOhpXQFT/hG9V/6HXXf+/Nj/8AI1H/AAjeq/8AQ667/wB+bH/5GosvHOgahZ3N1b3U6xWqRPKZ7KeEhZDiNgHQFg3YgEVau/FGk2epXGnSXEkt9bQLcy21tbyTyLGWCg7Y1Ynkjgc45xjmm9HZgtdir/wjeq/9Drrv/fmx/wDkaj/hG9V/6HXXf+/Nj/8AI1O03xromrQRT2c115M0ywRSTWE8KySMWAVS6ANypBx0xzipZPF2hRSagjaghbTZooLsIjN5UkpCopwOSSQOOnfFH9f196Ag/wCEb1X/AKHXXf8AvzY//I1H/CN6r/0Ouu/9+bH/AORqtTeJ9JgW7L3LsbO4FtKkcEjsZSobYiqpMjbSDhAcc+hqzpOsWWt2ZudOkd41kaJ1kieJ43U4KsjgMp9iBwQe9G4GZ/wjeq/9Drrv/fmx/wDkaj/hG9V/6HXXf+/Nj/8AI1DeONCTUfsbTXgk+1fY/M/s648nzt23Z5vl7M54+9Tv+E20A6n9gF6xmFx9lZhby+VHNnb5bS7disSOFJBORjORkWuwbbjf+Eb1X/oddd/782P/AMjUf8I3qv8A0Ouu/wDfmx/+RqlfxjocerDTnvHExnFt5n2eXyBMRkRGbb5Yftt3ZzgYzxSar4y0TRdQay1Ce5SZFjaQx2M8qRiRiqFnRCq5II5IoDYj/wCEb1X/AKHXXf8AvzY//I1H/CN6r/0Ouu/9+bH/AORqsaj4s0fSb02t9cSq6lRI8drLJHAWIC+ZIqlI85B+cjgg9KfceJtJtZbqO4ujG9nNDBMpifKvKQIx05DFgMjI65PBo3Aqf8I3qv8A0Ouu/wDfmx/+RqP+Eb1X/oddd/782P8A8jVrWepWl/Pdw2kvmPZzeRPhSAj7Q23JGDww6Z64rOfxjocerDTnvHExnFt5n2eXyBMRkRGbb5Yftt3ZzgYzxQBF/wAI3qv/AEOuu/8Afmx/+RqP+Eb1X/oddd/782P/AMjVyt14wuNS8R3YfxLJoWkaffvZt9k0szM7LhSZrh1eKAeYTgFQSuDnkGu1fxPpEVpqFxJeYj0ybyLs+W+Y3wpAxjLZ3rjAOc8ULVX/AK/rUHo7FT/hG9V/6HXXf+/Nj/8AI1H/AAjeq/8AQ667/wB+bH/5GqQeM9EOqnTzPcrKLj7KZGsZ1h87+55xTy89sbuTx1qW98V6Jp2m3F/fX6Q21tc/ZZXZW4lyBsAxljk9s0b7f1/V0G39f12K3/CN6r/0Ouu/9+bH/wCRqP8AhG9V/wCh113/AL82P/yNWrqmqWmjabLf6jI0dvFjcyRtI2SQoAVQWJJIGAKzbfxpoc9vfzG5ntl05Fe5F5ZzWzRhs7flkRSc4IGAcnigBn/CN6r/ANDrrv8A35sf/kaj/hG9V/6HXXf+/Nj/API1XtI8Q6brj3EdhLKJrYqJoLm2kt5Y9wypMciq2Dzg4wcHB4NMuPE2k2stzHNdEPa3MVrKoidiJZQpRQAOch16ZxnnGDR5AVP+Eb1X/oddd/782P8A8jUf8I3qv/Q667/35sf/AJGqV/GOhx6sNOe8cTGcW3mfZ5fIExGREZtvlh+23dnOBjPFF74w0XT9bXSbq4mW7LxRkJaTPGrSHEatIqFFLdgSKN7eYbEX/CN6r/0Ouu/9+bH/AORqP+Eb1X/oddd/782P/wAjVLe+MNF0/W10m6uJluy8UZCWkzxq0hxGrSKhRS3YEilPi7RRq/8AZ32qQzef9nMgtpTAJcf6szbfLD9tpbOSBjPFC12DYh/4RvVf+h113/vzY/8AyNR/wjeq/wDQ667/AN+bH/5Gq3H4m0iWWGKK6LPPdy2UaiJ8tNHu3r04A2t83TjryKWLxJpM9np11Fd7oNTm8i0by3HmPhjjGMjhG5OBxQBT/wCEb1X/AKHXXf8AvzY//I1H/CN6r/0Ouu/9+bH/AORqs3vivRNO024v76/SG2trn7LK7K3EuQNgGMscntmodV8aaHo11Nb39xcBrfb57wWU80cBb7od0QqhOQcMQcEHoRRuAz/hG9V/6HXXf+/Nj/8AI1H/AAjeq/8AQ667/wB+bH/5Gq8viHS38RS6Et0P7ShtxcvAUYYjJxu3EbTyRwDmnaJr2m+I9PN9o1z9ptvMMfmeWyZI64DAEjnr0PagDP8A+Eb1X/oddd/782P/AMjUf8I3qv8A0Ouu/wDfmx/+Rq6GigDnv+Eb1X/oddd/782P/wAjUf8ACN6r/wBDrrv/AH5sf/kauhooA57/AIRvVf8Aoddd/wC/Nj/8jUf8I3qv/Q667/35sf8A5GroaKAOe/4RvVf+h113/vzY/wDyNR/wjeq/9Drrv/fmx/8AkauhooA57/hG9V/6HXXf+/Nj/wDI1H/CN6r/ANDrrv8A35sf/kauhooA57/hG9V/6HXXf+/Nj/8AI1H/AAjeq/8AQ667/wB+bH/5GroaKAOe/wCEb1X/AKHXXf8AvzY//I1H/CN6r/0Ouu/9+bH/AORq6GigDnv+Eb1X/oddd/782P8A8jUf8I3qv/Q667/35sf/AJGroaKAOe/4RvVf+h113/vzY/8AyNR/wjeq/wDQ667/AN+bH/5GroaKAOe/4RvVf+h113/vzY//ACNR/wAI3qv/AEOuu/8Afmx/+Rq6GigDnv8AhG9V/wCh113/AL82P/yNR/wjeq/9Drrv/fmx/wDkauhooA57/hG9V/6HXXf+/Nj/API1H/CN6r/0Ouu/9+bH/wCRq6GigDi/gZG8Om+NIpJ5Lh08XXytNIFDSECP5jtAGT14AHoBXqFeZ/BT/j38cf8AY46h/KOvTKBBRRRQAUUUUAFFFFAHm37Qf/JCfEP/AG7f+lMVdbXJftB/8kJ8Q/8Abt/6UxVc+2+Mv+gDoX/g7m/+RKAOhornvtvjL/oA6F/4O5v/AJEo+2+Mv+gDoX/g7m/+RKAOhornvtvjL/oA6F/4O5v/AJEo+2+Mv+gDoX/g7m/+RKAOhornvtvjL/oA6F/4O5v/AJEo+2+Mv+gDoX/g7m/+RKAOhrhrT4eQS/EvX/Eeu2Ol6hbXy232JZoRLJA0aYY/MuFyQMEE9K2PtvjL/oA6F/4O5v8A5Eo+2+Mv+gDoX/g7m/8AkShaO4dLFdvDN4fiwnifzIPsS6MbAx7j5nmedvzjGNuPfOe1Yd98Or+5+L0fiOO5tRorvFdXVq5YyPcRRSRoQMbcYcHOe3Suk+2+Mv8AoA6F/wCDub/5Eo+2+Mv+gDoX/g7m/wDkSja3l/w/5g9b+Zy/w8+G2peEvE99e6neWtxYwxSW2kxQli0ULzNK28FQA3KjjPf0FW/iX4M1fxVeaFdaJDoty2mSyvJba0rvBKHUKAVVTnHXt2rd+2+Mv+gDoX/g7m/+RKPtvjL/AKAOhf8Ag7m/+RKOiXYd9W+5zfh/4d6hpnw+8SaReS6cLzXPPdbezjaOztWePaFQEEhQRnOPw4rrvCmky6D4P0jSbgxGays4oJDDnYWVQCRkA4Jz2FVftvjL/oA6F/4O5v8A5Eo+2+Mv+gDoX/g7m/8AkSnf9Pw2F/wfxOUt/Bnjjwzq2qQ+C9W0ZNG1S7e7I1CGRprN3+95YX5W9Ru446dctXwZ488OajrEfgnVtE/szVrt7thqUUnnWsj/AHzHs+U+o3eg9yet+2+Mv+gDoX/g7m/+RKPtvjL/AKAOhf8Ag7m/+RKm2lvl8u34B1v8/mcTd/C/XdI0nwlF4PvNOmvdBnmuJZdUMipPJKPmOEBPUnjI7cmrOqeF/iHP4p0nxPp8vhgarb6c9ndRztceQS0hbKADdjG3qeueK637b4y/6AOhf+Dub/5Eo+2+Mv8AoA6F/wCDub/5Ep/8P+FvyD+vxv8AmcNrHgDxfceOLrxDaWPgy/ku7e2Vl1eGaXyJY0AYxYX5QWzg5zgCtS98IeMdI8Y6jrvge/0cLrKRm+tNUSUokqLt3xlOeRng4/HjHS/bfGX/AEAdC/8AB3N/8iUfbfGX/QB0L/wdzf8AyJRtsG/9djPvvCur3/ijwZq1zeW07aIk4vpCCjTPJCE3IoBH3gTgkYHrWRrnwxufEGo+NWur2G3g19LP7JJHlpIXgXqykAY3AdCeM9K6f7b4y/6AOhf+Dub/AORKPtvjL/oA6F/4O5v/AJEo/r8bjTa/r5nJ/wDCGeOfEuoaTH471TRTpWlXKXQj0uOXzLuRPumTfgLzydvHJ46EWn+HN3caN4jhlubeK+vNafVtKuYySbaQBPLLZXg5UhgM/KTzXRfbfGX/AEAdC/8AB3N/8iUfbfGX/QB0L/wdzf8AyJQ9f69P8kL+vz/zZx1t4I8aaV4B0rQtPk8M3whjlS+stUhkltpC0hdWUgBsgHGCMV1nw/8ACkvgzwfb6RcXS3MqSSSsY1KxoXYtsQHkKM/zPepftvjL/oA6F/4O5v8A5Eo+2+Mv+gDoX/g7m/8AkSnffzF2OhornvtvjL/oA6F/4O5v/kSj7b4y/wCgDoX/AIO5v/kSkM6Giue+2+Mv+gDoX/g7m/8AkSj7b4y/6AOhf+Dub/5EoA6Giue+2+Mv+gDoX/g7m/8AkSj7b4y/6AOhf+Dub/5EoA6Guevf+Sl6L/2CNQ/9HWdH23xl/wBAHQv/AAdzf/IlYV3d+LP+FhaQzaLownGl3wRBrEpVl8203Et9myCDtwMHOTyMAEA76iue+2+Mv+gDoX/g7m/+RKPtvjL/AKAOhf8Ag7m/+RKBnQ0Vz323xl/0AdC/8Hc3/wAiUfbfGX/QB0L/AMHc3/yJQB0NFc99t8Zf9AHQv/B3N/8AIlH23xl/0AdC/wDB3N/8iUAdDRXPfbfGX/QB0L/wdzf/ACJR9t8Zf9AHQv8Awdzf/IlAHQ0Vz323xl/0AdC/8Hc3/wAiUfbfGX/QB0L/AMHc3/yJQB0NFc99t8Zf9AHQv/B3N/8AIlH23xl/0AdC/wDB3N/8iUAdDRXPfbfGX/QB0L/wdzf/ACJR9t8Zf9AHQv8Awdzf/IlAHQ0Vz323xl/0AdC/8Hc3/wAiUfbfGX/QB0L/AMHc3/yJQB0NFc99t8Zf9AHQv/B3N/8AIlH23xl/0AdC/wDB3N/8iUAdDRXPfbfGX/QB0L/wdzf/ACJR9t8Zf9AHQv8Awdzf/IlAHQ0Vz323xl/0AdC/8Hc3/wAiUfbfGX/QB0L/AMHc3/yJQB0NFc99t8Zf9AHQv/B3N/8AIlH23xl/0AdC/wDB3N/8iUAJrvhp/EPiDTpb2eSPTLGOSRUtrqWCZrhsKrboypChC44bnf0rEf4fTo89hbXLDSH1WHUU3X8/2hDtImHmZ35LAMDvz8zdO+59t8Zf9AHQv/B3N/8AIlH23xl/0AdC/wDB3N/8iUf1+Nwepkz+C9Sso9eHh7UZIX1BbYQvc388sn7st5iGVyzoGU4DKSVzkAEVRs/BOvww+IFEltbnW4YbYl9Tubx7WMB1kYSSrudsNlR8oyccYy3SfbfGX/QB0L/wdzf/ACJR9t8Zf9AHQv8Awdzf/IlHqG2xlat4Lv7hdfXS5bSEX1pZwWYlLERmFmJ3gDpyMYPPtVvRfB8mjeKhqa3AuFksWiup5CfOuLhpFYyEYxjCgAZ4AVQMAVa+2+Mv+gDoX/g7m/8AkSj7b4y/6AOhf+Dub/5Eo+1zdf6/zFZWt/WhjnwbrC+CNJ0e1v7a1vbO/wDtDXKguEUyOxKAjlgH4BGMjnjrXvPhzL9g1qw02SKK1vnsTDunkEg8mUPKzOBnex3HcDksckjrXQfbfGX/AEAdC/8AB3N/8iUfbfGX/QB0L/wdzf8AyJSSsredx9U+xj3PhTX7bS59O0i7hFmuoi4jj+2S28txAy5eOS4RTIreYS28FmYDDHkk6Xgfw7e+HbLUU1F42kvL5rpVS5luCisiDaZJfmcgqRuPXg4HQTfbfGX/AEAdC/8AB3N/8iUfbfGX/QB0L/wdzf8AyJTWn9en+QPX+vX/ADKE3hO+k00W4lt9418anks2PK8/zMdPvY7dM96xrLSNa1231HTk+wJpLeIJJ5Z2kcToI7nzCgTaVbcUHzblwD90456j7b4y/wCgDoX/AIO5v/kSj7b4y/6AOhf+Dub/AORKI+7by/8Atf8A5FA9f69f8zE/4RDWvsMnh9nsP7FfUzffbBK/2nYZ/tHl+Vs253/Lv3/d5254rE+xeKfEvhvV9Ui0/SQmtSRXKPLqcoaGGEqUj2C3Iz8jEnd1c12323xl/wBAHQv/AAdzf/IlH23xl/0AdC/8Hc3/AMiUrO2n9f1Zf0x6X1OO1bw74j8daVLfQzRLa6vaQTWqyatcxLZgorGMwRqEmy2fnY5+boQoB1/E3gO88TXd1c3FxHE/n2i2qwXMsP7iKRXcyMgBZyS+0HIXAKlSWNbX23xl/wBAHQv/AAdzf/IlH23xl/0AdC/8Hc3/AMiVWl9CVe2pJ4X0S48Pw31k8kUlkbtpbNgSZQjgEiQkZZg5b5ySzDBJzmsEeENa+wyeH2ew/sV9TN99sEr/AGkIZ/tHl+Vs253/AC79/wB3nbnitr7b4y/6AOhf+Dub/wCRKPtvjL/oA6F/4O5v/kSl2/rYZj3vhPW307WtAtDp50nWLiWV7uWVxPbrMcyKIthVzkttYuuNwyDt5ravokl18VdPs7WRTp89sl9qcDZJZrdsQNn3Zhn1EVdD9t8Zf9AHQv8Awdzf/IlH23xl/wBAHQv/AAdzf/IlC0a8v8rL7geqfn+r1+85qXwLrMniKa4T7NHC+ri/S5Oq3D7EDBtv2Mp5JYgEbs5Gdw5Ap+o/Dq/1K31xri8gklubqSXTYiWEdsHZS7scZMhUFc44XgfebPRfbfGX/QB0L/wdzf8AyJR9t8Zf9AHQv/B3N/8AIlEfdSS9Py/yQS969/63/wAy34m0ufWdBksrVo0kaWFwZCQuElVz0B7Kawdd8HX+p6lrF7a3FtHJObCazEm4jzbaRpNsgA4VjgZBJHJxxg6f23xl/wBAHQv/AAdzf/IlH23xl/0AdC/8Hc3/AMiUbagGjaTqZ8R3mva4tpb3E9tHaR21nM0yJGjM24uyISxLnjaAAB1zWRdeCr//AISnUdfs5oDdSahbXFtHNM5i8tIkjkDJgqrlQ+1wCwyBkAkVr/bfGX/QB0L/AMHc3/yJR9t8Zf8AQB0L/wAHc3/yJRs010/zuHfzMUeENa+wyeH2ew/sV9TN99sEr/aQhn+0eX5Wzbnf8u/f93nbnirE/hLUrxZLu5ltVvrnWba/lRZGaOOGEqFjVioJO1c9ANzH61pfbfGX/QB0L/wdzf8AyJR9t8Zf9AHQv/B3N/8AIlC0t/Xb/Jf1cHrfz/X/AIczZ/CWpXiyXd1LarfXOs21/KiyM0ccMJULGrFQSdq56AbmP1rPh8AXVtq0ySWyahp02om9Dvr95b+Xul83H2ZFMTFW5HIDYGcHJrovtvjL/oA6F/4O5v8A5Eo+2+Mv+gDoX/g7m/8AkShabf1t/kgev9ev+bMjSPBV/o+ujVYJoJJpdTu5bhJZndRbTMzDywwIjkB2Z2hQ2DknAIw77TPE/hvwpozXdhpEtr4cu/tjyRalLvnXEi4CGDCn97n7x6e9dn9t8Zf9AHQv/B3N/wDIlH23xl/0AdC/8Hc3/wAiULS3lb8Aet/O/wCJzuo/Dq/1K31xri8gklubqSXTYiWEdsHZS7scZMhUFc44XgfebM3iPwDd6/Nr1y1ysEt4YEs4oLqaGIhAMvOqYEjk5HzBgFRAO9bn23xl/wBAHQv/AAdzf/IlH23xl/0AdC/8Hc3/AMiULRJdlYHrfzMTXvA2p6lqWo6jY3tvb3lxeR+TIxY7LU24hlTgcMcuwHIyEyfTe8M+H28PTatFEYlsrm7E9rFHnMS+TGhU8f3kJ4zwfwpn23xl/wBAHQv/AAdzf/IlH23xl/0AdC/8Hc3/AMiULTb+tv8AL8weu50NFc99t8Zf9AHQv/B3N/8AIlH23xl/0AdC/wDB3N/8iUAdDRXPfbfGX/QB0L/wdzf/ACJR9t8Zf9AHQv8Awdzf/IlAHQ0Vz323xl/0AdC/8Hc3/wAiUfbfGX/QB0L/AMHc3/yJQB0NFc99t8Zf9AHQv/B3N/8AIlH23xl/0AdC/wDB3N/8iUAdDRXPfbfGX/QB0L/wdzf/ACJR9t8Zf9AHQv8Awdzf/IlAHQ0Vz323xl/0AdC/8Hc3/wAiUfbfGX/QB0L/AMHc3/yJQB0NFc99t8Zf9AHQv/B3N/8AIlH23xl/0AdC/wDB3N/8iUAdDRXPfbfGX/QB0L/wdzf/ACJR9t8Zf9AHQv8Awdzf/IlAHQ0Vz323xl/0AdC/8Hc3/wAiUfbfGX/QB0L/AMHc3/yJQB0NFc99t8Zf9AHQv/B3N/8AIlH23xl/0AdC/wDB3N/8iUAdDRXPfbfGX/QB0L/wdzf/ACJR9t8Zf9AHQv8Awdzf/IlAHQ0Vz323xl/0AdC/8Hc3/wAiUfbfGX/QB0L/AMHc3/yJQBQ+Cn/Hv44/7HHUP5R16ZXl/wADGmbTfGjXUccc58XXxkSNy6q2I8gMQCRnvgZ9B0r1CgQUUUUAFFFFABRRRQB5t+0H/wAkJ8Q/9u3/AKUxV1tcl+0H/wAkJ8Q/9u3/AKUxV1tABRRRQAUUUUAFFFFABRRRQB59efGTQ9P1u7sLvStcS3s7z7FcakLMNaxyZxguGJHUds89K0r74k6Lpq+IRfw3kEmgbPPiZF3TiT7hiAb5gxIAzjk84rxzXtA1qXxP4ljtNI8Xy30+sm50+OK2B0mbDKVeYSDa3Q89Olei+MPCb6r8UvBWoT2E0yESjU5IEYw5iUSQ+YRxjzCcbuvSiPvRj57/AHX/AMxy0lK3S/4f8A7PW/E9r4e8ITeItTtrqO3ghWaSAKpmXOBtxuxuycdce9c/pPxY0bU5bqC40zWtKureze9W21Kz8l54VGS0fzEH8SP51Y+LVjd6l8K9ctNOtZru5lhURwwRl3c71PCjk1j2fw1tNE8N6lqa3Ws6xrM+jSW0b6lcGeSJWjz5SLgY57YJ7d6lt2k+3+THFL3V3/4H/BNDw38WdH8SatZaeNL1rS5NRjMljJqVmIo7oAbj5bBiDxz6VXvPjP4ftrq58jTtbvtPs5DFc6raWBktIWBwcvnt6gHrxmuO8IeDdU8Oa14Ovb+HWNTt7zTXt3W882RtEnZByqgYjQg7eRxjrS6RqHiPw38NbjwBJ4H1m61Xy7i0huoYA1lKsjNh2lzgcMeD6ckZ4uWl7br8df8AhvvuTHW1/L8jvde+J+maLqNjZWulaxrkl9Zi9gOj2q3AMROA33gcdOcY5FPX4o+HpdB0/Vrb7VPDfaimmeWsQElvO2flkViNuMc4z1GM1xK2+pfD3xb4YmuNC1rW4bLw2LCaTSbJrjbL5gOM8DHB756cVTvPCXia68MXviQ6LNHdz+JYdbXRwwMwgQYx/vnOSOvHrxRon5X/APbrflqGtvO3/tt/z0PV7rxfptl4qk0G782GaLTW1OS4cKIUhV9py2c5HXpjHeuZg+MmkXeXsfD/AImuoJA32SeHS2KXxXqIjnk4BPOOAe/Fc7c6XrXxJ8Q+INVh0TUdDtZPDr6VbDVYfIlmmZ9/3cnC9s+9dD4B8Vaq1rpHhq98F6zp09nbrb3V1NAI7SMRpgMj5+fJUDAH8XU45S1Xn/wX+lvvCTXTb/gL9blzwt8UrPxbrR06x8N+I7YxyPFNc3diEhgkUZKOwc7W7YPOSKXxX8ULPwhq62F/4d8RXQkdIormzsQ8M0jjKojFxubtgc5FN+Gmn3lhN4uN9aT2wuPEd1ND50ZTzYyFw65HKnHBHFHxO0+81CHwuLC0nuTB4js5pfJjL+XGpbc7YHCjuTwKe/L52/G35XHs5eV/wJ7D4maXc3U1vqOnarossWntqJTVLdYmaFSQ2AGJyMdCBxg1RvPi9ptomlBPD3iK7n1Sz+3Q21pZpLKkWcBmUPxnrxngjOKr/F7wt/wkS+G2hsrq5ddWit7lrVWJW0k/1ofb0T5VyTwKp+L/AAbdeIvjBpSxT6zpWnxaM6Nf6U5h2MJOIzJtIGR/D7VOr+9/k3/l9zDb+vNL/P8AA17r4vaFFo2k6hYWGr6qNVkkigtrG0DzK8Y+dWQsDke2enpVi++J+n6dpWmXNxoXiD7dqhk+z6Qthm9xGcMxj3cDoevQ59a4r4heDYvDtn4PsfDth4jbTtPuLl5pdBVpLxN6j5g/Ylj3xxkCpdfFrqPhPQGvfC3jy6a2WQWupRJ/xNbSQNjLqD/EBnceMAcU7rX1C23p/meqaFrVv4g0W31OzSeKKYH93cRmOSNgSrKynoQQQfpWjXLfDk+Ij4JtP+Ev8z+0Nz488ATeVuOzzNvG/bjP685rqaqWj0JjsFFFFSMKKKKACiiigArnr3/kpei/9gjUP/R1nXQ1z17/AMlL0X/sEah/6Os6AOhooooGFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAV769g03T7i9vHEdvbxtLI5/hVRkn9KqaBrkHiHR0v7aC4tgXeN4LpAssToxVlYAkA5HqeMVl+N7fUNUsbHRdLTab+6UT3EkDSxQxR/vG3gFchiqpjcM7zzxXL6tpXiKzi8S6dMFv21SOC+t5rLT5UhSZZESRSm9+cKjY3DPzHjBNJdf6/r/gA+h6fRXB3Vr4ltfEl5eXyQ6w66FOsC6fbSWQd96kR7zK+GOOCCCKwvCX2jRvE0+pRaPJDYnSWMyad4cuLHzZxIm1GR2ZpXAZsPgDBbk4bDWv9ev+X4g9Pw/T/M9ZorynTfB8+iSgppIS8ufDV0L6a3g/1t07q2xnH3myWAyScDip9N0PVtQ1zwrf+ILGX7ObWa2bT3QvHaw/Z9v70fd3yE856YVR0JIv6+9r9PxE3Z/15f5/gen0V5V/wiVvpfhXxbNpnhlIrxtScWy2tiqSywB4mCx4AJTKkgDjil1XQ9elvvEF9qEFxcXmo+GLlPKgVpIoHJwltGRwWA5PdmLHpgCXLRPyv+F7f1/w9JXdvO342ueqUV5e1pqunadrJv8ASZtU1Kaxs1WaK3lSFoM7TGI1JcmM7meLeTIG7A7Rf+G9nc2Ws68q2S2mnSi3e2EGkSabA7YcOywyMSG4UEnBOAcYwTdtWib6JnoNFeYeLvCcOqReNL2XQI7y/Ih+wTtZCSU4hT/VNgng5+73zVPxNZ2d5rXi6F9EvdQ1ZkhTSp4bZ5Rbzm3TaVdciBg20lzsBAHzHbgTcpaux63RXlGu6RJPP4gh1rRr3UdenWMaFqEVm8iw/ulCFJ1G23KzB2bJTqDyMVD4nn0/xFqWqJqekXWqtpukyWFrIuiz3KPetnzCjLEVBUog3ZHJPahuy/rt/SfmxLX+v69fkeu0V49rMn/CQ6Np0UGireQLpPlQTXeiXF9uuFJjeJUDIts6suDI+M5HOFqbXNL13UvC5axtLqPUv+EVEOoS3Fs8huiy/LAF4JlBDndk7d2CrbhimrX8v+D/AJfj95HW3n/wP8/61t63RXH+EbLULPxFqh1yF5byS2tjHfRwmOB4gGAiVSTsZW3FgWYneDwCAMDxd4Th1SLxpey6BHeX5EP2CdrISSnEKf6psE8HP3e+aHo7CTuj0+ivLPEelfab7xJHqeh3t9rNwU/4R+9itHkFuPKUR7J1G23KzB2YkoeQeRiut8Y6fcX/AIEeylgN7M7WyzRrHvEmJY9/y45GASeOlLpf0/r5dR/1/X6HTUV5T4g0C30NPFq6Xo/2GwmTTPKSxhFusriY7gjLtG7kcgjGRyKZc6VK0etyeEtEvrDQ2jshcWMdm9o11tmJufLiYKxYw4UkAb+gJIoWrt/Xz8g6HrNFeVy3tv4aTXtQ8N6Nd2OmXlrFa2VgmmzQfaL8iTLJb7AwGzYGbaM7e+KpaTofhw643h+10y50+11PQV0/z30eezFxcIWZmy8a5cKN2T6daX9fg3+i+9A9P69P839zPYaK8cMeteLvDGo6vNZyrqNrLZ6TDGYTIN8N1G1xMFU5KFx6jiPqKva34WXUfCPiaPVNBGoa4l75gu2st/2jd5eHgyCVUIAm0Fiuwgk9S/6/L/MOn9f1voeq0V5/q/gDw7/wmHh37J4S0v7JuuPtXlabH5f+q+Tfhcfe6Z79KxNe0XX9T0XxJapZ3UFhBqUlxFFGjeZqDl124Uc+Uo+b/aYDsp3C1dv66f5ibsrnrdFeYeLvCcOqReNL2XQI7y/Ih+wTtZCSU4hT/VNgng5+73zVD4gW2o32qan9l0LN7brCbC4/see8mkwAxeG5DCO22nPyYySpOCWAoWths9eorzDWbPXbLxlq3ibR9PuZbnzItLjRIj+9heBSJMd1SZlJYdAH9K6D4faLL4btdX0dopRb21/m3mkUjz1aKNi2e53l8n1zRHX+vT9GmD6HX0UUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAcf8FP+Pfxx/wBjjqH8o69MrzP4Kf8AHv44/wCxx1D+UdemUCCiiigAooooAKKKKAPNv2g/+SE+If8At2/9KYquf8JtpX/Prrv/AIT99/8AGap/tB/8kJ8Q/wDbt/6UxV1tAHPf8JtpX/Prrv8A4T99/wDGaP8AhNtK/wCfXXf/AAn77/4zXQ0UAc9/wm2lf8+uu/8AhP33/wAZo/4TbSv+fXXf/Cfvv/jNdDRQBz3/AAm2lf8APrrv/hP33/xmj/hNtK/59dd/8J++/wDjNdDRQBz3/CbaV/z667/4T99/8Zo/4TbSv+fXXf8Awn77/wCM10NFAHPf8JtpX/Prrv8A4T99/wDGaP8AhNtK/wCfXXf/AAn77/4zWjqmvaRoaRtreq2WnLKSIzd3CRByOuNxGaE1/R5Es2j1axdb8lbQrcoRcEdRHz834ZoAzv8AhNtK/wCfXXf/AAn77/4zR/wm2lf8+uu/+E/ff/Ga2INRsrq7uLW1vLea4tSBcQxyqzwkjIDAHK5HIzUVrrWl31/cWNlqVnc3dqcT28M6vJFzj5lByvPrQBmf8JtpX/Prrv8A4T99/wDGaP8AhNtK/wCfXXf/AAn77/4zWpDrOmXOqTabb6jaS39uu6a1SdWljHHLIDkDkdR3FQR+JtBl1U6ZFrenPqAbabRbuMyg+mzOc/hQBS/4TbSv+fXXf/Cfvv8A4zR/wm2lf8+uu/8AhP33/wAZq1feLPDumXxstS1/S7O7GM29xeRxyDPT5Sc81Pqev6PoscUms6tY6ek2fKa6uUiEmPQsRnr2oAzv+E20r/n113/wn77/AOM0f8JtpX/Prrv/AIT99/8AGa0IPEOi3Udm9tq9hMl8zLaNHcowuCv3gmD8xGOcZxTtT13SNF8r+2dVstP844j+1XCRbz6DcRmgDN/4TbSv+fXXf/Cfvv8A4zR/wm2lf8+uu/8AhP33/wAZrdknhhtmuJZUSFELtKzAKqgZJJ6Yx3qmmv6PJpH9qx6tYvp2cfbFuUMOd237+dvXjr14oAzv+E20r/n113/wn77/AOM0f8JtpX/Prrv/AIT99/8AGa1b7VtO0vyP7T1C1s/tEgjh+0TLH5rnoq5IyfYU3Uda0vSGgXVtSs7E3DbIRczrH5rei7iMnkcD1oAzP+E20r/n113/AMJ++/8AjNH/AAm2lf8APrrv/hP33/xmtTUtY0zRoo5dY1G0sI5H2I91OsQdv7oLEZPtVS/8XeG9KvGtNU8QaXZXKgFobi9jjcA8j5WIPNAFb/hNtK/59dd/8J++/wDjNH/CbaV/z667/wCE/ff/ABmugByMjkUtAHPf8JtpX/Prrv8A4T99/wDGaP8AhNtK/wCfXXf/AAn77/4zXQ0UAc9/wm2lf8+uu/8AhP33/wAZo/4TbSv+fXXf/Cfvv/jNdDRQBz3/AAm2lf8APrrv/hP33/xmj/hNtK/59dd/8J++/wDjNdDRQBz3/CbaV/z667/4T99/8ZrCu/F+mt8QtInFtrOxNLvkIOh3oYlpbQjC+Vkj5TkgYHGcZGe+rnr3/kpei/8AYI1D/wBHWdAB/wAJtpX/AD667/4T99/8Zo/4TbSv+fXXf/Cfvv8A4zXQ0UDOe/4TbSv+fXXf/Cfvv/jNH/CbaV/z667/AOE/ff8AxmuhooA57/hNtK/59dd/8J++/wDjNH/CbaV/z667/wCE/ff/ABmuhooA57/hNtK/59dd/wDCfvv/AIzR/wAJtpX/AD667/4T99/8ZroaKAOe/wCE20r/AJ9dd/8ACfvv/jNH/CbaV/z667/4T99/8ZroaKAOe/4TbSv+fXXf/Cfvv/jNH/CbaV/z667/AOE/ff8AxmuhooA57/hNtK/59dd/8J++/wDjNH/CbaV/z667/wCE/ff/ABmuhooA57/hNtK/59dd/wDCfvv/AIzR/wAJtpX/AD667/4T99/8ZroaKAOe/wCE20r/AJ9dd/8ACfvv/jNH/CbaV/z667/4T99/8ZroaKAOe/4TbSv+fXXf/Cfvv/jNH/CbaV/z667/AOE/ff8AxmuhooA57/hNtK/59dd/8J++/wDjNH/CbaV/z667/wCE/ff/ABmuhooA57/hNtK/59dd/wDCfvv/AIzR/wAJtpX/AD667/4T99/8ZroaKAOe/wCE20r/AJ9dd/8ACfvv/jNH/CbaV/z667/4T99/8ZroaKAOe/4TbSv+fXXf/Cfvv/jNH/CbaV/z667/AOE/ff8AxmuhooA57/hNtK/59dd/8J++/wDjNH/CbaV/z667/wCE/ff/ABmugZgilmIVQMkk8AVDZXtrqNnHd6fcw3dtKMxzQSB0cdMhhwaAMX/hNtK/59dd/wDCfvv/AIzR/wAJtpX/AD667/4T99/8ZroaKAOe/wCE20r/AJ9dd/8ACfvv/jNH/CbaV/z667/4T99/8ZroaKAOe/4TbSv+fXXf/Cfvv/jNH/CbaV/z667/AOE/ff8AxmuhooA57/hNtK/59dd/8J++/wDjNVrfxNoNreXV1BYa6s14ytO39g353lVCjgxYHAA4rqqKAOe/4TbSv+fXXf8Awn77/wCM1WsvE2g6ekq2dhrsazTPPIP7Bvzl3OWPMXc9uldVRQByth4m0HTLX7NY2GuxReY8m3+wb9vmdi7HJi7sxNWf+E20r/n113/wn77/AOM10NFAHPf8JtpX/Prrv/hP33/xmj/hNtK/59dd/wDCfvv/AIzXQ0UAc9/wm2lf8+uu/wDhP33/AMZo/wCE20r/AJ9dd/8ACfvv/jNdDRQByt/4m0HU7NrW+sNdlhZlYr/YN+vKsGXkRZ6gGrP/AAm2lf8APrrv/hP33/xmuhooA5W78TaDfPbNdWGuyNazCeE/2Dfja4BAPEXPDHg8c0XPibQbu6tLm4sNdeWzkMkDf2DfjYxUoTgRc/KxHPrXVUUAcppviTw/pFhHZafp+uw28ZYqv9g6g3LEsSSYiSSSTk+tWv8AhNtK/wCfXXf/AAn77/4zXQ0UAc9/wm2lf8+uu/8AhP33/wAZo/4TbSv+fXXf/Cfvv/jNdDRQBz3/AAm2lf8APrrv/hP33/xmj/hNtK/59dd/8J++/wDjNdDRQBz3/CbaV/z667/4T99/8Zo/4TbSv+fXXf8Awn77/wCM10NFAHPf8JtpX/Prrv8A4T99/wDGaP8AhNtK/wCfXXf/AAn77/4zXQ0UAc9/wm2lf8+uu/8AhP33/wAZo/4TbSv+fXXf/Cfvv/jNdDRQBz3/AAm2lf8APrrv/hP33/xmj/hNtK/59dd/8J++/wDjNdDRQBz3/CbaV/z667/4T99/8Zo/4TbSv+fXXf8Awn77/wCM10NFAHPf8JtpX/Prrv8A4T99/wDGaP8AhNtK/wCfXXf/AAn77/4zXQ0UAc9/wm2lf8+uu/8AhP33/wAZo/4TbSv+fXXf/Cfvv/jNdDRQBz3/AAm2lf8APrrv/hP33/xmj/hNtK/59dd/8J++/wDjNdDRQBz3/CbaV/z667/4T99/8Zo/4TbSv+fXXf8Awn77/wCM10NFAHPf8JtpX/Prrv8A4T99/wDGaP8AhNtK/wCfXXf/AAn77/4zXQ0UAc9/wm2lf8+uu/8AhP33/wAZo/4TbSv+fXXf/Cfvv/jNdDRQBz3/AAm2lf8APrrv/hP33/xmj/hNtK/59dd/8J++/wDjNdDRQBz3/CbaV/z667/4T99/8Zo/4TbSv+fXXf8Awn77/wCM10NFAHPf8JtpX/Prrv8A4T99/wDGaP8AhNtK/wCfXXf/AAn77/4zXQ0UAcX8DJ1udN8aTxiRUl8XXzqJI2jYAiM8qwBU+xAI716hXmfwU/49/HH/AGOOofyjr0ygQUUUUAFFFFABRRRQB5t+0H/yQnxD/wBu3/pTFXW1yX7Qf/JCfEP/AG7f+lMVXP8AhYHg3/obdC/8GUP/AMVQB0NFc9/wsDwb/wBDboX/AIMof/iqP+FgeDf+ht0L/wAGUP8A8VQB0NFc9/wsDwb/ANDboX/gyh/+Ko/4WB4N/wCht0L/AMGUP/xVAHQ0Vz3/AAsDwb/0Nuhf+DKH/wCKo/4WB4N/6G3Qv/BlD/8AFUAdDRXPf8LA8G/9DboX/gyh/wDiqP8AhYHg3/obdC/8GUP/AMVQBwfxt/5Dng7/AJAv/Hzcf8h7/jz/ANWP9Z7enviue8O6ZBffBvxCLJrePUPDuqzajBe2UnmWpnjAkzAQBiMr8uOeuc+npuqeIvhtriRrreseFdRWIkxi7uraUIT1xuJxUsPir4eW+lnTbfXvDMVgUMZtUvLdYip4K7AcYPpikrpNL+tv8huzav0/4P8AmQfC3TPsvge21O4dZb/XD/ad5MBjdJKNwH0CkAD2rypLz/hDfHut+Ogpa1t/EF1p2oqoJLQyIjIfwdf1FexW/jjwNaW0VtaeJ/D8EEKBI4otQgVUUDAAAbAAHaqkviD4aT211bT6v4UkgvJPOuYnubYrO/HzOCcM3A5PPApy+K8dNLL8P0VhL4bS/rf9Xc8l0nT9W0zXtS1BMrr2q+DrvVJTEDuEss5ZQO+Qu0D3FM1QfD0/BHTk8PDTm8UyR232f7KVN/8Aaty7skfOOd3XjpjtXsg8XfD9dQW+XxD4bF4sPkLcC9t/MEec7N27O3POOlVINa+F9rqZ1K11LwjDfMSTdRz2yyknr84Of1p6bLb/ACbf6/gF3e73/wCAv8vxOMk/4RL/AIWr4q/4WH/Y/wDyD7LZ/aPl53eUd/l7uc9Pu89PauNk+0/8IX4B8/8Asr7P9uvvsX/CR5+y/Z/+Wfm5524+7/wGvYr7VPhXqd8b3Ur7wfeXZxm4uJrWSQ46fMTnip9T8Q/DXWo4o9Z1fwpqCQ58pbu5tpQmeuAxOOnap/r8b/18x/1+Fjh9XvtN0+++GV3NdeH7W0hu7kzTaRIqWCNs+bY3QDJ7981H8R38PX/idfEmna94W1GeDThHJpetMkkNxDuZg0D5+/nIG3v1PY9nLqPwonsILGa88GyWluWaG3eW1McRb7xVc4Ge+OtLJqXwpmjto5rzwbIloMW6tLakQjOcIM/Lzzx3of63+9WEv0t+NyWC/g1P4IteWdi9hbzaG5itXYsYl8kgLuPJGOh7jBrx7UIZvCPwqh0/LHR/E2n2V3bZ5EF4piaVM9g6jePdWxXuEnjnwPNbvbzeKPD8kLqUaNtQgKspGCCN2CMdqqXHiP4b3emw6fd6z4VnsoNvlW0t1bNHHtGF2qTgYHTHSqv77l3a/C//AAPuBfCl2/4H+X3M81+Kl6PEXjLUNMj0XWdWGkaV5Nq+mWRnW2vZdrh3IPy4VUHGTy1O8WyR/FPRPh+H2rLqcd5G+T/q7hYCM/hIua9PtvGHgGyknks/EXhu3e5fzJ2ivoFMr4xuYhuTjuarQ+IPhpbNA1vq/hSJreR5YTHc2ymJ3+8y4PBPcjk1NtLP+t/8/wAEO9ndf1pb+vmeK+KtXvPiB4JvNR1KIqvhfTYbaYOpBN/JOiSN+CJ/4/XQeIPJ/wCF16z9q/4Qzyfs9l5n/CU4zt2c+Rnjdjr/AMBr0ptf+GbWl1atq3hM295J5tzCbm22TvkHc65wxyAcnnioL/UvhTqt4bvVLzwbe3LAAzXEtrI5AGANzEniqvqn53+//g/gLTlt/XT/AC+87dSpQFCCpHBHTFOrnV8feDFUKvizQQoGABqUPH/j1L/wsDwb/wBDboX/AIMof/iqQI6Giue/4WB4N/6G3Qv/AAZQ/wDxVH/CwPBv/Q26F/4Mof8A4qgDoaK57/hYHg3/AKG3Qv8AwZQ//FUf8LA8G/8AQ26F/wCDKH/4qgDoaK57/hYHg3/obdC/8GUP/wAVR/wsDwb/ANDboX/gyh/+KoA6Guevf+Sl6L/2CNQ/9HWdH/CwPBv/AENuhf8Agyh/+KrCu/HHhNviFpFyvifRjBHpd9G8o1CLarNLaFVJ3YBIViB32n0NAHfUVz3/AAsDwb/0Nuhf+DKH/wCKo/4WB4N/6G3Qv/BlD/8AFUDOhornv+FgeDf+ht0L/wAGUP8A8VR/wsDwb/0Nuhf+DKH/AOKoA6Giue/4WB4N/wCht0L/AMGUP/xVH/CwPBv/AENuhf8Agyh/+KoA6Giue/4WB4N/6G3Qv/BlD/8AFUf8LA8G/wDQ26F/4Mof/iqAOhornv8AhYHg3/obdC/8GUP/AMVR/wALA8G/9DboX/gyh/8AiqAOhornv+FgeDf+ht0L/wAGUP8A8VR/wsDwb/0Nuhf+DKH/AOKoA6Giue/4WB4N/wCht0L/AMGUP/xVH/CwPBv/AENuhf8Agyh/+KoA6Giue/4WB4N/6G3Qv/BlD/8AFUf8LA8G/wDQ26F/4Mof/iqAOhornv8AhYHg3/obdC/8GUP/AMVR/wALA8G/9DboX/gyh/8AiqAOhornv+FgeDf+ht0L/wAGUP8A8VR/wsDwb/0Nuhf+DKH/AOKoA6Giue/4WB4N/wCht0L/AMGUP/xVH/CwPBv/AENuhf8Agyh/+KoA6Giue/4WB4N/6G3Qv/BlD/8AFUf8LA8G/wDQ26F/4Mof/iqAOhornv8AhYHg3/obdC/8GUP/AMVR/wALA8G/9DboX/gyh/8AiqAOhornv+FgeDf+ht0L/wAGUP8A8VR/wsDwb/0Nuhf+DKH/AOKoAg8f3ssPhsadZxTT3mrTLZRQ27Ksjq2TLtLFQCIlkOSQMgc1y8OuX/h3SPE1ja6Zc6RJbSR3+n2sogZ/KmkAdV2u6f6wSd+N4ziuqk8beBZbiGeXxN4eeaDPlSNfwFo8jB2ndkZHBxUVz4s+Ht7N515r/hm4lEZjDy3luzbCQ23JPTKqceoB7Ul18/6/MHr/AF/XQqTeL76HXrv+0bK70OxtdHmu2F8kM3zK6jzMQyMSACfl3DP61U8M+JdTXxdJYaxPqP2WTSjqGdVFmrRgOBuT7OThCGP3+fl4PWtqTxp4ElmM0viXw68pjMRdr+AsUJyVzu6HHTpWbBqXwptbd4La88GwwyAh445bVVYEqSCAcHlVP/AR6U1/X4/5r7gf+X6f5P7zK0jXvES7bi+1e4m+2+H7nVI4JoIFFuwdfL27UB4VhkMW5qfT/Fes69rXh5LS6a20m/t5YmuViTzLqZYSzSpuBARWxt4wx3cbQN29L4x8BTzGWbxH4ckkMTQl3voCTGeqZ3fdOBkdKB4x8Aq1sV8ReGwbRStuRfQfuRjbhPm+UY447UL+vvf6NL5Cd7/15f5P7znV1XW9N8O+JtUuvE15cf2ZftaRfaYbVURFeP5ztiU7sMw64wenei+8Y67Jd67dW7/YrBfD1xfaZE8I8zKHCzvuGQWOSEPAXbkZJA6BvFnw+e3ngfX/AAy0Ny5knjN7blZWOMswzgngcn0FLP4v8AXTyPdeIfDczSwm3kaS9t2LxHqhy3Kn06VLTsvS3zta/wB+v9aUrJ/O/wAr3t92hjReL7/+z9VvdSu5tNeG3tI4LE28csytLwJeDsJkY7V+cou3LY+ZRoeCNa1O81zXdJ1V75zYeQ6f2j9l+0J5isSrfZv3ePlBH8Xzc9qln8T/AA5uhILnW/C8wlgFvIJLu3bfEDkRnJ5XJPy9KTTfE3w50aMppGteF7BGAUra3dvECASQPlI7sx/E+tXdXbJs7JGT4p1LXIV8WX1hr95Zro4i+z20UFu0bZiVju3xMxyWPRhRr+vavDceLLi28RCzGgQR3MFmsELebmEPiUsCxRmBA27Tkt8x4A2pfF3w/nS5SfxB4akW6x9oV723ImwMDdlvm4AHPpWUNR+HMuvXmqal4i8L38s08c1v9ouLd2tWVFXKMWOCdgORjt6VOpS3uQan4i1q4tPE+pwax/ZL+H1Qxad5UTpOfJSX96XXfhyxQbGTpwSateI9X1e7ub0aTql1pS6XojX1ysEML/v2GY42MsbdAjkgYPIq5deIvhtfalBqN9rHhW5vrfHk3M11bPJFg5G1icjBJPFY1snwqE17PquqeDtUubu7luWnuXtWcB2yFyxJOOmf0FDu9Fp/Vv1v5WEtLf1/W1vmSa94m1L+z4UsL/U1u4NHS/uf7PgtB5e5TiSV7khdhKn5YxkYOTyBVfXfGut2vh1NT09zPNdeGzfNa28cebKXaCLjL4BTLEFSxPyjarfNixpcvwwsdMtbS91rwlfmzllktpJZbb9wHlaQKgLHaBkDj07VsDxP8ORDLCNb8LiKaBbeRBd2+14lBCxkZ5UBjhegyfWqdnf+u/8Amvu+4jpa/T/gf5P7/W8nhTXL/WdY1NdQL2ht4rcJpsqp5kYZS3nMy5U7zwArMAE7NkDE8U6lrkK+LL6w1+8s10cRfZ7aKC3aNsxKx3b4mY5LHowreTxp4Ejujcx+JfDqzmMRGVb+AMUBJC53ZwCScdOTUcvi74fzpcpP4g8NSLdY+0K97bkTYGBuy3zcADn0oe9xLRamNrOv6u8fiu/tdb/s0+HCohsRDEyXOIVlBl3qXxIWKDYydOCTXQ+LNVvbLwLNe2LtaX8qwxwsEDmKSV1QfKwwcF+hFUbrxF8Nb7UoNQvdY8K3F7b48m5murZ5IsHI2sTkYJJ4q3P438DXUYS58T+HpkV1cLJqEDAMpBVsFuoIBB7EUulvT/g/f+A/6/r0OV/4TTXJbnSkFysY0y7hste2xofNmefyQOR8oODJxjh05xVh/Eesvpz+IYtXKmPW/wCzv7FEMRjZBceRsJ2+b5hX95ndjp8uOu4fFnw9bzt2v+GT9olWabN5b/vJFxtdueWG1cE8jaPSov8AhIvht/bB1f8Atjwr/aZGPtv2q287GNv387unHXpQtPz/AC0/MH5f1v8A18jL8S61rJuNd1DSdaubSz0ma1tY4Y4YGjmlZ183cXjZjgSKOGGCDTdX13xXeeJ9ctdAg1J20poktoLVbLyJiYw/78zuJMMSVzHtwAcEnOKun2PwltdDjs7vUfBd7dLGVe9l+yb5GOfmOSTnn1q/b3PwwbR9Ns9Z1jwjq0un2kdqlxdy2zsQqgcbicA9cZ70Lz/r+u3n5B1/r+v+GGeNdd1yKbVJNI1SfTl0fSo7maKKKCQNPI52oxdGOAqnhcdQc1T8Z+JvENlqetf2Xe34j05LZl+wR2jW8IkxkXBmHmFydxxHnClDwTXSf8JT8O/s1xb/ANu+GPIunL3EX2y32zMerMM4YnA5PpSv4r+HskNxFJr/AIZaO6cPcI15bkTNgDcwz8xwqjJ9B6UIXf8Ar+v+CY+r+NNQ0Pxrqc11N5mhWwWyFv5agrdND5yENjJ3fcwTjLLitrwHqOr3dhqNp4kuRcalYXphlYIqAAxpIAAoAwN+B1PHJNNk8WfD2YSCbX/DMglmWeQNeW53yLja555YbVweo2j0qaPxv4Ghlmlh8T+Ho5J2DSuuoQAyEAKCx3cnAA57AUR03/rZ/wCfysN67HTUVz3/AAsDwb/0Nuhf+DKH/wCKo/4WB4N/6G3Qv/BlD/8AFUAdDRXPf8LA8G/9DboX/gyh/wDiqP8AhYHg3/obdC/8GUP/AMVQB0NFc9/wsDwb/wBDboX/AIMof/iqP+FgeDf+ht0L/wAGUP8A8VQB0NFc9/wsDwb/ANDboX/gyh/+Ko/4WB4N/wCht0L/AMGUP/xVAHQ0Vz3/AAsDwb/0Nuhf+DKH/wCKo/4WB4N/6G3Qv/BlD/8AFUAdDRXPf8LA8G/9DboX/gyh/wDiqP8AhYHg3/obdC/8GUP/AMVQB0NFc9/wsDwb/wBDboX/AIMof/iqP+FgeDf+ht0L/wAGUP8A8VQB0NFc9/wsDwb/ANDboX/gyh/+Ko/4WB4N/wCht0L/AMGUP/xVAHQ0Vz3/AAsDwb/0Nuhf+DKH/wCKo/4WB4N/6G3Qv/BlD/8AFUAdDRXPf8LA8G/9DboX/gyh/wDiqP8AhYHg3/obdC/8GUP/AMVQB0NFc9/wsDwb/wBDboX/AIMof/iqP+FgeDf+ht0L/wAGUP8A8VQB0NFc9/wsDwb/ANDboX/gyh/+Ko/4WB4N/wCht0L/AMGUP/xVAHQ0Vz3/AAsDwb/0Nuhf+DKH/wCKo/4WB4N/6G3Qv/BlD/8AFUAdDRXPf8LA8G/9DboX/gyh/wDiqP8AhYHg3/obdC/8GUP/AMVQBQ+Cn/Hv44/7HHUP5R16ZXl/wMuIbvTfGlzazRzwTeLr6SOWNgyupEZDAjggjnNeoUCCiiigAooooAKKKKAK2oabY6vYSWOq2dvfWkuPMt7mJZI3wQRlWBBwQD9RWJ/wrjwR/wBCb4f/APBXB/8AE10lFAHN/wDCuPBH/Qm+H/8AwVwf/E0f8K48Ef8AQm+H/wDwVwf/ABNdJRQBzf8AwrjwR/0Jvh//AMFcH/xNH/CuPBH/AEJvh/8A8FcH/wATXSUUAc3/AMK48Ef9Cb4f/wDBXB/8TR/wrjwR/wBCb4f/APBXB/8AE10lFAHN/wDCuPBH/Qm+H/8AwVwf/E0f8K48Ef8AQm+H/wDwVwf/ABNdJRQBzf8AwrjwR/0Jvh//AMFcH/xNH/CuPBH/AEJvh/8A8FcH/wATXSUUAc3/AMK48Ef9Cb4f/wDBXB/8TR/wrjwR/wBCb4f/APBXB/8AE10lFAHN/wDCuPBH/Qm+H/8AwVwf/E0f8K48Ef8AQm+H/wDwVwf/ABNdJRQBzf8AwrjwR/0Jvh//AMFcH/xNH/CuPBH/AEJvh/8A8FcH/wATXSUUAc3/AMK48Ef9Cb4f/wDBXB/8TR/wrjwR/wBCb4f/APBXB/8AE10lFAHN/wDCuPBH/Qm+H/8AwVwf/E0f8K48Ef8AQm+H/wDwVwf/ABNdJRQBzf8AwrjwR/0Jvh//AMFcH/xNH/CuPBH/AEJvh/8A8FcH/wATXSUUAc3/AMK48Ef9Cb4f/wDBXB/8TR/wrjwR/wBCb4f/APBXB/8AE10lFAHN/wDCuPBH/Qm+H/8AwVwf/E0f8K48Ef8AQm+H/wDwVwf/ABNdJRQBzf8AwrjwR/0Jvh//AMFcH/xNH/CuPBH/AEJvh/8A8FcH/wATXSUUAc3/AMK48Ef9Cb4f/wDBXB/8TR/wrjwR/wBCb4f/APBXB/8AE10lFAHN/wDCuPBH/Qm+H/8AwVwf/E0f8K48Ef8AQm+H/wDwVwf/ABNdJRQBzf8AwrjwR/0Jvh//AMFcH/xNH/CuPBH/AEJvh/8A8FcH/wATXSUUAc3/AMK48Ef9Cb4f/wDBXB/8TR/wrjwR/wBCb4f/APBXB/8AE10lFAHN/wDCuPBH/Qm+H/8AwVwf/E0f8K48Ef8AQm+H/wDwVwf/ABNdJRQBzf8AwrjwR/0Jvh//AMFcH/xNH/CuPBH/AEJvh/8A8FcH/wATXSUUAc3/AMK48Ef9Cb4f/wDBXB/8TR/wrjwR/wBCb4f/APBXB/8AE10lFAHN/wDCuPBH/Qm+H/8AwVwf/E0f8K48Ef8AQm+H/wDwVwf/ABNdJRQBzf8AwrjwR/0Jvh//AMFcH/xNH/CuPBH/AEJvh/8A8FcH/wATXSUUAc3/AMK48Ef9Cb4f/wDBXB/8TR/wrjwR/wBCb4f/APBXB/8AE10lFAHN/wDCuPBH/Qm+H/8AwVwf/E0f8K48Ef8AQm+H/wDwVwf/ABNdJRQBzf8AwrjwR/0Jvh//AMFcH/xNH/CuPBH/AEJvh/8A8FcH/wATXSUUAc3/AMK48Ef9Cb4f/wDBXB/8TR/wrjwR/wBCb4f/APBXB/8AE10lFAHN/wDCuPBH/Qm+H/8AwVwf/E0f8K48Ef8AQm+H/wDwVwf/ABNdJRQBzf8AwrjwR/0Jvh//AMFcH/xNH/CuPBH/AEJvh/8A8FcH/wATXSUUAc3/AMK48Ef9Cb4f/wDBXB/8TR/wrjwR/wBCb4f/APBXB/8AE10lFAHN/wDCuPBH/Qm+H/8AwVwf/E0f8K48Ef8AQm+H/wDwVwf/ABNdJRQBzf8AwrjwR/0Jvh//AMFcH/xNH/CuPBH/AEJvh/8A8FcH/wATXSUUAc3/AMK48Ef9Cb4f/wDBXB/8TR/wrjwR/wBCb4f/APBXB/8AE10lFAHN/wDCuPBH/Qm+H/8AwVwf/E0f8K48Ef8AQm+H/wDwVwf/ABNdJRQBzf8AwrjwR/0Jvh//AMFcH/xNH/CuPBH/AEJvh/8A8FcH/wATXSUUAc3/AMK48Ef9Cb4f/wDBXB/8TR/wrjwR/wBCb4f/APBXB/8AE10lFAHN/wDCuPBH/Qm+H/8AwVwf/E0f8K48Ef8AQm+H/wDwVwf/ABNdJRQBzf8AwrjwR/0Jvh//AMFcH/xNH/CuPBH/AEJvh/8A8FcH/wATXSUUAc3/AMK48Ef9Cb4f/wDBXB/8TR/wrjwR/wBCb4f/APBXB/8AE10lFAHN/wDCuPBH/Qm+H/8AwVwf/E0f8K48Ef8AQm+H/wDwVwf/ABNdJRQBzf8AwrjwR/0Jvh//AMFcH/xNH/CuPBH/AEJvh/8A8FcH/wATXSUUAc3/AMK48Ef9Cb4f/wDBXB/8TR/wrjwR/wBCb4f/APBXB/8AE10lFAHN/wDCuPBH/Qm+H/8AwVwf/E0f8K48Ef8AQm+H/wDwVwf/ABNdJRQBzf8AwrjwR/0Jvh//AMFcH/xNH/CuPBH/AEJvh/8A8FcH/wATXSUUAc3/AMK48Ef9Cb4f/wDBXB/8TR/wrjwR/wBCb4f/APBXB/8AE10lFAHN/wDCuPBH/Qm+H/8AwVwf/E0f8K48Ef8AQm+H/wDwVwf/ABNdJRQBzf8AwrjwR/0Jvh//AMFcH/xNH/CuPBH/AEJvh/8A8FcH/wATXSUUAc3/AMK48Ef9Cb4f/wDBXB/8TR/wrjwR/wBCb4f/APBXB/8AE10lFAHN/wDCuPBH/Qm+H/8AwVwf/E0f8K48Ef8AQm+H/wDwVwf/ABNdJRQBzf8AwrjwR/0Jvh//AMFcH/xNH/CuPBH/AEJvh/8A8FcH/wATXSUUAc3/AMK48Ef9Cb4f/wDBXB/8TR/wrjwR/wBCb4f/APBXB/8AE10lFAHN/wDCuPBH/Qm+H/8AwVwf/E0f8K48Ef8AQm+H/wDwVwf/ABNdJRQBzf8AwrjwR/0Jvh//AMFcH/xNH/CuPBH/AEJvh/8A8FcH/wATXSUUAc3/AMK48Ef9Cb4f/wDBXB/8TR/wrjwR/wBCb4f/APBXB/8AE10lFAHN/wDCuPBH/Qm+H/8AwVwf/E0f8K48Ef8AQm+H/wDwVwf/ABNdJRQBzf8AwrjwR/0Jvh//AMFcH/xNH/CuPBH/AEJvh/8A8FcH/wATXSUUAc3/AMK48Ef9Cb4f/wDBXB/8TR/wrjwR/wBCb4f/APBXB/8AE10lFAHN/wDCuPBH/Qm+H/8AwVwf/E0f8K48Ef8AQm+H/wDwVwf/ABNdJRQBzf8AwrjwR/0Jvh//AMFcH/xNH/CuPBH/AEJvh/8A8FcH/wATXSUUAUdK0XStBtWtdD0yz023dzI0VnbrCjMQAWIUAZwAM+wq9RRQAUUUUAf/2Q==")

        image_buffer = io.BytesIO(image_bytes)
        img = openpyxl.drawing.image.Image(image_buffer)
        img.height = 654
        img.width = 1024
        number = ws.cell(row=1, column=1)
        img.anchor = number.coordinate
        ws.add_image(img)

        for store in self.store_by_gender:
            wb.create_sheet(title=store)
            gender_df = self.store_by_gender[store]
            category_df = self.store_by_category[store]
            men_cat_df = self.store_by_men_cat[store]
            wmn_cat_df = self.store_by_wmn_cat[store]
            app_coll_df = self.store_by_app_coll[store]
            ftw_coll_df = self.store_by_ftw_coll[store]
            pr_name_q = self.store_by_product_type[store]
            models_q = self.store_by_models[store]
            ws = wb[store]
            ws.alignment = Alignment(wrapText=True)

            pr_name = sorted(pr_name_q, key=lambda x: x.values[0][1], reverse=True)
            models = sorted(models_q, key=lambda x: x.values[0][1], reverse=True)

            header = ["BY GENDERS"]

            def styled_cells(header):
                for c in header:
                    c = Cell(ws, column="A", row=1, value=c)
                    c.font = Font(bold=True)
                    c.fill = PatternFill(patternType='solid',
                                         fgColor='e6e6e6')
                    yield c

            ws.append(styled_cells(header))
            headers = ['GENDER', "NS", 'NS MIX %', 'BCHMK NS MIX %', 'NS QTY', 'NS QTY MIX %', 'STOCK QTY',
                       'STOCK QTY MIX %', 'SKU', 'GRADE A MIX %', "GRADE B MIX %", "GRADE C MIX %", "GRADE C SKU"]

            def styled_cells(headers):
                for c in headers:
                    c = Cell(ws, column="A", row=1, value=c)
                    c.font = Font(bold=True)
                    c.fill = PatternFill(patternType='solid',
                                         fgColor='e6e6e6')
                    yield c

            ws.append(styled_cells(headers))
            for i in gender_df:
                for v in i.values.tolist():
                    ws.append(v)

            # Пару пробелов для читаемости
            ws.append([""])
            ws.append([""])
            ws.append([""])
            ws.append([""])

            header = ["BY CATEGORY ALL GENDERS"]

            def styled_cells(header):
                for c in header:
                    c = Cell(ws, column="A", row=1, value=c)
                    c.font = Font(bold=True)
                    c.fill = PatternFill(patternType='solid',
                                         fgColor='e6e6e6')
                    yield c

            ws.append(styled_cells(header))
            headers = ['CATEGORY', "NS", 'NS MIX %', 'BCHMK NS MIX %', 'NS QTY', 'NS QTY MIX %', 'STOCK QTY',
                       'STOCK QTY MIX %', 'SKU', 'GRADE A MIX %', "GRADE B MIX %", "GRADE C MIX %", "GRADE C SKU"]

            def styled_cells(headers):
                for c in headers:
                    c = Cell(ws, column="A", row=1, value=c)
                    c.font = Font(bold=True)
                    c.fill = PatternFill(patternType='solid',
                                         fgColor='e6e6e6')
                    yield c

            ws.append(styled_cells(headers))
            for i in category_df:
                for v in i.values.tolist():
                    ws.append(v)

            # Пару пробелов для читаемости
            ws.append([""])
            ws.append([""])

            header = ["BY CATEGORY MEN"]

            def styled_cells(header):
                for c in header:
                    c = Cell(ws, column="A", row=1, value=c)
                    c.font = Font(bold=True)
                    c.fill = PatternFill(patternType='solid',
                                         fgColor='e6e6e6')
                    yield c

            ws.append(styled_cells(header))
            headers = ['CATEGORY', "NS", 'NS MIX %', 'BCHMK NS MIX %', 'NS QTY', 'NS QTY MIX %', 'STOCK QTY',
                       'STOCK QTY MIX %', 'SKU', 'GRADE A MIX %', "GRADE B MIX %", "GRADE C MIX %", "GRADE C SKU"]

            def styled_cells(headers):
                for c in headers:
                    c = Cell(ws, column="A", row=1, value=c)
                    c.font = Font(bold=True)
                    c.fill = PatternFill(patternType='solid',
                                         fgColor='e6e6e6')
                    yield c

            ws.append(styled_cells(headers))
            for i in men_cat_df:
                for v in i.values.tolist():
                    ws.append(v)

            ws.append([""])
            ws.append([""])

            header = ["BY CATEGORY WOMEN"]

            def styled_cells(header):
                for c in header:
                    c = Cell(ws, column="A", row=1, value=c)
                    c.font = Font(bold=True)
                    c.fill = PatternFill(patternType='solid',
                                         fgColor='e6e6e6')
                    yield c

            ws.append(styled_cells(header))
            headers = ['CATEGORY', "NS", 'NS MIX %', 'BCHMK NS MIX %', 'NS QTY', 'NS QTY MIX %', 'STOCK QTY',
                       'STOCK QTY MIX %', 'SKU', 'GRADE A MIX %', "GRADE B MIX %", "GRADE C MIX %", "GRADE C SKU"]

            def styled_cells(headers):
                for c in headers:
                    c = Cell(ws, column="A", row=1, value=c)
                    c.font = Font(bold=True)
                    c.fill = PatternFill(patternType='solid',
                                         fgColor='e6e6e6')
                    yield c

            ws.append(styled_cells(headers))
            for i in wmn_cat_df:
                for v in i.values.tolist():
                    ws.append(v)

            # Пару пробелов для читаемости
            ws.append([""])
            ws.append([""])

            # Пару пробелов для читаемости
            ws.append([""])
            ws.append([""])

            header = ["APP BY COLLECTIONS"]

            def styled_cells(header):
                for c in header:
                    c = Cell(ws, column="A", row=1, value=c)
                    c.font = Font(bold=True)
                    c.fill = PatternFill(patternType='solid',
                                         fgColor='e6e6e6')
                    yield c

            ws.append(styled_cells(header))
            headers = ['COLLECTIONS', "NS", 'NS MIX %', 'BCHMK NS MIX %', 'NS QTY', 'NS QTY MIX %', 'STOCK QTY',
                       'STOCK QTY MIX %', 'SKU', 'GRADE A MIX %', "GRADE B MIX %", "GRADE C MIX %", "GRADE C SKU"]

            def styled_cells(headers):
                for c in headers:
                    c = Cell(ws, column="A", row=1, value=c)
                    c.font = Font(bold=True)
                    c.fill = PatternFill(patternType='solid',
                                         fgColor='e6e6e6')
                    yield c

            ws.append(styled_cells(headers))
            for i in app_coll_df:
                if not i.isnull().any().values[0]:
                    for v in i.values.tolist():
                        ws.append(v)
            ws.append([""])
            ws.append([""])

            header = ["FTW BY COLLECTIONS"]

            def styled_cells(header):
                for c in header:
                    c = Cell(ws, column="A", row=1, value=c)
                    c.font = Font(bold=True)
                    c.fill = PatternFill(patternType='solid',
                                         fgColor='e6e6e6')
                    yield c

            ws.append(styled_cells(header))
            headers = ['COLLECTIONS', "NS", 'NS MIX %', 'BCHMK NS MIX %', 'NS QTY', 'NS QTY MIX %', 'STOCK QTY',
                       'STOCK QTY MIX %', 'SKU', 'GRADE A MIX %', "GRADE B MIX %", "GRADE C MIX %", "GRADE C SKU"]

            def styled_cells(headers):
                for c in headers:
                    c = Cell(ws, column="A", row=1, value=c)
                    c.font = Font(bold=True)
                    c.fill = PatternFill(patternType='solid',
                                         fgColor='e6e6e6')
                    yield c

            ws.append(styled_cells(headers))
            for i in ftw_coll_df:
                if not i.isnull().any().values[0]:
                    for v in i.values.tolist():
                        ws.append(v)

            ws.append([""])
            ws.append([""])

            # Пару пробелов для читаемости
            ws.append([""])
            ws.append([""])

            header = ["BY PRODUCT TYPES"]

            def styled_cells(header):
                for c in header:
                    c = Cell(ws, column="A", row=1, value=c)
                    c.font = Font(bold=True)
                    c.fill = PatternFill(patternType='solid',
                                         fgColor='e6e6e6')
                    yield c

            ws.append(styled_cells(header))
            headers = ['COLLECTIONS', "NS", 'NS MIX %', 'BCHMK NS MIX %', 'NS QTY', 'NS QTY MIX %', 'STOCK QTY',
                       'STOCK QTY MIX %', 'SKU']

            def styled_cells(headers):
                for c in headers:
                    c = Cell(ws, column="A", row=1, value=c)
                    c.font = Font(bold=True)
                    c.fill = PatternFill(patternType='solid',
                                         fgColor='e6e6e6')
                    yield c

            ws.append(styled_cells(headers))
            for i in pr_name:
                if i.values[0][1] > 0 and i.values[0][0] != "TTL":
                    if not i.isnull().any().values[0]:
                        for v in i.values.tolist():
                            ws.append(v)

            ws.append([""])
            ws.append([""])

            header = ["BY MODELS NAME"]

            def styled_cells(header):
                for c in header:
                    c = Cell(ws, column="A", row=1, value=c)
                    c.font = Font(bold=True)
                    c.fill = PatternFill(patternType='solid',
                                         fgColor='e6e6e6')
                    yield c

            ws.append(styled_cells(header))
            headers = ['COLLECTIONS', "NS", 'NS MIX %', 'BCHMK NS MIX %', 'NS QTY', 'NS QTY MIX %', 'STOCK QTY',
                       'STOCK QTY MIX %', 'SKU']

            def styled_cells(headers):
                for c in headers:
                    c = Cell(ws, column="A", row=1, value=c)
                    c.font = Font(bold=True)
                    c.fill = PatternFill(patternType='solid',
                                         fgColor='e6e6e6')
                    yield c

            ws.append(styled_cells(headers))
            for i in models:
                if i.values[0][1] > 0 and i.values[0][0] != "TTL":
                    if not i.isnull().any().values[0]:
                        for v in i.values.tolist():
                            ws.append(v)

            row_numb = 1
            rows_ttl = []
            for cell in ws["A"]:
                if cell.value == "TTL":
                    rows_ttl.append(row_numb)
                row_numb += 1

            for i in rows_ttl:
                for row in ws.iter_rows(min_row=i, max_col=None, max_row=i):
                    for cell in row:
                        if cell.value != "":
                            cell.font = Font(bold=True)
                            cell.fill = PatternFill(patternType='solid',
                                                    fgColor='cfcfcf')

            for row in ws:
                for cell in row:
                    cell.alignment = Alignment(wrapText=True, horizontal='center', vertical='center')

            num = ["B", "E", "G", "I", "M"]
            pers = ["C", "D", "F", "H", "J", "K", "L"]

            for i in num:
                for cell in ws[i]:
                    cell.number_format = "### ### ##0"

            for i in pers:
                for cell in ws[i]:
                    cell.number_format = "0%"

            ws.column_dimensions['A'].width = 40
            ws.column_dimensions['B'].width = 20
            ws.column_dimensions['D'].width = 12
            ws.column_dimensions['H'].width = 12
        sheet = wb["Все магазины"]
        col = ["D", "H", "K"]
        for column in col:
            which_cols = openpyxl.utils.cell.column_index_from_string(column)
            sheet.delete_cols(which_cols, 1)
        wb.save("Sales Analyses Report.xlsx")


class CreateStoreDF:
    def __init__(self):
        self.store_name = None
        self.path = None
        self.df_names = ['Магазин', 'Артикул', 'Наименование', 'Количество', 'Категория', 'Сезон', 'SKU', 'RRP',
                         'RRP Amount', 'Grade', 'Пол', 'Коллекция', 'Сумма со скидкой', 'Кол-во продаж',
                         'Актуальный заказ', 'Тип продукта']
        self.is_df_correct = True

        self.store_by_gender = {}
        self.store_by_category = {}
        self.store_by_men_cat = {}
        self.store_by_wmn_cat = {}
        self.store_by_app_coll = {}
        self.store_by_ftw_coll = {}
        self.store_by_product_type = {}
        self.store_by_models = {}

    def read_file(self, path):
        """
        Creation DF to each store for all category

        :param path: string (File path)
        :return:  dict (Dict format {Store: Store DF...}
        """
        self.path = path
        df = pd.read_excel(self.path)  # Читаем загрузочный файл
        names = df.columns.to_list()  # Получаем заголовки таблицы и далее сравниваем их с необходимыми заголовками
        for header in self.df_names:
            if header not in names:
                self.is_df_correct = False
        if self.is_df_correct:
            self.process_df(df)  # Запускаем обработку файла
            return (self.store_by_gender, self.store_by_category, self.store_by_men_cat,
                    self.store_by_wmn_cat, self.store_by_app_coll, self.store_by_ftw_coll,
                    self.store_by_product_type, self.store_by_models)

    def process_df(self, df):
        numpy.seterr(divide='ignore', invalid='ignore')
        self.get_gender_df(df)
        self.get_category_df(df)
        self.get_men_cat(df)
        self.get_wmn_cat(df)
        self.get_app_collect(df)
        self.get_ftw_collect(df)
        self.get_pr_type(df)
        self.get_by_model(df)

    def get_by_model(self, df):
        numpy.seterr(divide='ignore', invalid='ignore')
        self.store_name = df['Магазин'].unique()
        self.category_name = df['Модель ANTA'].unique()

        cat_df = []
        for category in self.category_name:  # Тотал по всем магазинам
            category_df = df.loc[df['Модель ANTA'] == category]
            ns = category_df['Сумма со скидкой'].sum()
            ns_mix = category_df['Сумма со скидкой'].sum() / df['Сумма со скидкой'].sum()
            ns_qty = category_df['Кол-во продаж'].sum()
            ns_qty_mix = category_df['Кол-во продаж'].sum() / df['Кол-во продаж'].sum()
            stock_qty = category_df['Количество'].sum()
            store_qty_mix = category_df['Количество'].sum() / df['Количество'].sum()
            sku = category_df['SKU'].sum()


            df_ttl_category_ttl = pd.DataFrame({
                "Category": [category],
                "NS": [ns],
                "NS MIX": [ns_mix],
                "NS RD MIX": [ns_mix],
                "NS QTY": [ns_qty],
                "NS QTY MIX": [ns_qty_mix],
                "STOCK QTY": [stock_qty],
                "STOCK QTY MIX": [store_qty_mix],
                "SKU": [sku]
            })
            cat_df.append(df_ttl_category_ttl)

        self.store_by_models["Все магазины"] = cat_df

        for store in self.store_name:
            cat_store_df = []
            store_df = df.loc[df['Магазин'] == store]

            ns = store_df['Сумма со скидкой'].sum()
            ns_mix = 1
            ns_qty = store_df['Кол-во продаж'].sum()
            ns_qty_mix = 1
            stock_qty = store_df['Количество'].sum()
            store_qty_mix = 1
            sku = store_df['SKU'].sum()

            df_cat_ttl = pd.DataFrame({
                "Category": ["TTL"],
                "NS": [ns],
                "NS MIX": [ns_mix],
                "NS RD MIX": [ns_mix],
                "NS QTY": [ns_qty],
                "NS QTY MIX": [ns_qty_mix],
                "STOCK QTY": [stock_qty],
                "STOCK QTY MIX": [store_qty_mix],
                "SKU": [sku]
            })

            for category in self.category_name:
                category_df = store_df.loc[store_df['Модель ANTA'] == category]
                category1_df = df.loc[df['Модель ANTA'] == category]
                ns_rd_mix = category1_df['Сумма со скидкой'].sum() / df['Сумма со скидкой'].sum()
                ns = category_df['Сумма со скидкой'].sum()
                ns_mix = category_df['Сумма со скидкой'].sum() / store_df['Сумма со скидкой'].sum()
                ns_qty = category_df['Кол-во продаж'].sum()
                ns_qty_mix = category_df['Кол-во продаж'].sum() / store_df['Кол-во продаж'].sum()
                stock_qty = category_df['Количество'].sum()
                store_qty_mix = category_df['Количество'].sum() / store_df['Количество'].sum()
                sku = category_df['SKU'].sum()
                df_gender_bystore = pd.DataFrame({
                    "Category": [category],
                    "NS": [ns],
                    "NS MIX": [ns_mix],
                    "NS RD MIX": [ns_rd_mix],
                    "NS QTY": [ns_qty],
                    "NS QTY MIX": [ns_qty_mix],
                    "STOCK QTY": [stock_qty],
                    "STOCK QTY MIX": [store_qty_mix],
                    "SKU": [sku]
                })
                cat_store_df.append(df_gender_bystore)
            cat_store_df.append(df_cat_ttl)
            self.store_by_models[store] = cat_store_df

    def get_pr_type(self, df):
        numpy.seterr(divide='ignore', invalid='ignore')
        self.store_name = df['Магазин'].unique()
        self.category_name = df['Тип продукта'].unique()

        cat_df = []
        for category in self.category_name:  # Тотал по всем магазинам
            category_df = df.loc[df['Тип продукта'] == category]
            ns = category_df['Сумма со скидкой'].sum()
            ns_mix = category_df['Сумма со скидкой'].sum() / df['Сумма со скидкой'].sum()
            ns_qty = category_df['Кол-во продаж'].sum()
            ns_qty_mix = category_df['Кол-во продаж'].sum() / df['Кол-во продаж'].sum()
            stock_qty = category_df['Количество'].sum()
            store_qty_mix = category_df['Количество'].sum() / df['Количество'].sum()
            sku = category_df['SKU'].sum()
            df_ttl_category_ttl = pd.DataFrame({
                "Category": [category],
                "NS": [ns],
                "NS MIX": [ns_mix],
                "NS RD MIX": [ns_mix],
                "NS QTY": [ns_qty],
                "NS QTY MIX": [ns_qty_mix],
                "STOCK QTY": [stock_qty],
                "STOCK QTY MIX": [store_qty_mix],
                "SKU": [sku]
            })
            cat_df.append(df_ttl_category_ttl)

        self.store_by_product_type["Все магазины"] = cat_df

        for store in self.store_name:
            cat_store_df = []
            store_df = df.loc[df['Магазин'] == store]

            ns = store_df['Сумма со скидкой'].sum()
            ns_mix = 1
            ns_qty = store_df['Кол-во продаж'].sum()
            ns_qty_mix = 1
            stock_qty = store_df['Количество'].sum()
            store_qty_mix = 1
            sku = store_df['SKU'].sum()
            df_cat_ttl = pd.DataFrame({
                "Category": ["TTL"],
                "NS": [ns],
                "NS MIX": [ns_mix],
                "NS RD MIX": [ns_mix],
                "NS QTY": [ns_qty],
                "NS QTY MIX": [ns_qty_mix],
                "STOCK QTY": [stock_qty],
                "STOCK QTY MIX": [store_qty_mix],
                "SKU": [sku]
            })

            for category in self.category_name:
                category_df = store_df.loc[store_df['Тип продукта'] == category]
                category1_df = df.loc[df['Тип продукта'] == category]
                ns_rd_mix = category1_df['Сумма со скидкой'].sum() / df['Сумма со скидкой'].sum()
                ns = category_df['Сумма со скидкой'].sum()
                ns_mix = category_df['Сумма со скидкой'].sum() / store_df['Сумма со скидкой'].sum()
                ns_qty = category_df['Кол-во продаж'].sum()
                ns_qty_mix = category_df['Кол-во продаж'].sum() / store_df['Кол-во продаж'].sum()
                stock_qty = category_df['Количество'].sum()
                store_qty_mix = category_df['Количество'].sum() / store_df['Количество'].sum()
                sku = category_df['SKU'].sum()
                df_gender_bystore = pd.DataFrame({
                    "Category": [category],
                    "NS": [ns],
                    "NS MIX": [ns_mix],
                    "NS RD MIX": [ns_rd_mix],
                    "NS QTY": [ns_qty],
                    "NS QTY MIX": [ns_qty_mix],
                    "STOCK QTY": [stock_qty],
                    "STOCK QTY MIX": [store_qty_mix],
                    "SKU": [sku]
                })
                cat_store_df.append(df_gender_bystore)
            cat_store_df.append(df_cat_ttl)
            self.store_by_product_type[store] = cat_store_df

    def get_ftw_collect(self, df_1):
        numpy.seterr(divide='ignore', invalid='ignore')
        df = df_1.loc[df_1['Категория'] == "FTW"]
        self.store_name = df['Магазин'].unique()
        self.collections_name = df['Коллекция'].unique()

        cat_df = []
        for category in self.collections_name:  # Тотал по всем магазинам
            category_df = df.loc[(df['Коллекция'] == category) & (df['Категория'] == "FTW")]
            ns = category_df['Сумма со скидкой'].sum()
            ns_mix = category_df['Сумма со скидкой'].sum() / df.loc[df['Категория'] == "FTW"]['Сумма со скидкой'].sum()
            ns_qty = category_df['Кол-во продаж'].sum()
            ns_qty_mix = category_df['Кол-во продаж'].sum() / df.loc[df['Категория'] == "FTW"]['Кол-во продаж'].sum()
            stock_qty = category_df['Количество'].sum()
            store_qty_mix = category_df['Количество'].sum() / df.loc[df['Категория'] == "FTW"]['Количество'].sum()
            sku = category_df['SKU'].sum()
            sku_a_mix = category_df.loc[(category_df['Grade'] == "A") & (category_df['Актуальный заказ'] == "Актуально")]['SKU'].sum() / sku
            sku_b_mix = category_df.loc[(category_df['Grade'] == "B") & (category_df['Актуальный заказ'] == "Актуально")]['SKU'].sum() / sku
            sku_c_mix = category_df.loc[(category_df['Grade'] == "C") & (category_df['Актуальный заказ'] == "Актуально")]['SKU'].sum() / sku
            sku_c = category_df.loc[(category_df['Grade'] == "C") & (category_df['Актуальный заказ'] == "Актуально")]['SKU'].sum()

            df_ttl_category_ttl = pd.DataFrame({
                "Category": [category],
                "NS": [ns],
                "NS MIX": [ns_mix],
                "NS RD MIX": [ns_mix],
                "NS QTY": [ns_qty],
                "NS QTY MIX": [ns_qty_mix],
                "STOCK QTY": [stock_qty],
                "STOCK QTY MIX": [store_qty_mix],
                "SKU": [sku],
                "SKU A MIX": [sku_a_mix],
                "SKU B MIX": [sku_b_mix],
                "SKU C MIX": [sku_c_mix],
                "SKU C": [sku_c]
            })
            cat_df.append(df_ttl_category_ttl)

        self.store_by_ftw_coll["Все магазины"] = cat_df

        for store in self.store_name:
            cat_store_df = []
            store_df = df.loc[(df['Магазин'] == store) & (df['Категория'] == "FTW")]

            ns = store_df['Сумма со скидкой'].sum()
            ns_mix = 1
            ns_qty = store_df['Кол-во продаж'].sum()
            ns_qty_mix = 1
            stock_qty = store_df['Количество'].sum()
            store_qty_mix = 1
            sku = store_df['SKU'].sum()
            sku_a_mix = store_df.loc[(store_df['Grade'] == "A") & (store_df['Актуальный заказ'] == "Актуально")]['SKU'].sum() / sku
            sku_b_mix = store_df.loc[(store_df['Grade'] == "B") & (store_df['Актуальный заказ'] == "Актуально")]['SKU'].sum() / sku
            sku_c_mix = store_df.loc[(store_df['Grade'] == "C") & (store_df['Актуальный заказ'] == "Актуально")]['SKU'].sum() / sku
            sku_c = store_df.loc[(store_df['Grade'] == "C") & (store_df['Актуальный заказ'] == "Актуально")]['SKU'].sum()

            df_cat_ttl = pd.DataFrame({
                "Category": ["TTL"],
                "NS": [ns],
                "NS MIX": [ns_mix],
                "NS RD MIX": [ns_mix],
                "NS QTY": [ns_qty],
                "NS QTY MIX": [ns_qty_mix],
                "STOCK QTY": [stock_qty],
                "STOCK QTY MIX": [store_qty_mix],
                "SKU": [sku],
                "SKU A MIX": [sku_a_mix],
                "SKU B MIX": [sku_b_mix],
                "SKU C MIX": [sku_c_mix],
                "SKU C": [sku_c]
            })
            self.collections_name = df.loc[(df['Магазин'] == store) & (df['Категория'] == "FTW")]['Коллекция'].unique()
            for category in self.collections_name:
                category_df = store_df.loc[(store_df['Коллекция'] == category) & (df['Категория'] == "FTW")]
                category1_df = df.loc[(df['Коллекция'] == category) & (df['Категория'] == "FTW")]
                ns_rd_mix = category1_df['Сумма со скидкой'].sum() / df.loc[df['Категория'] == "FTW"][
                    'Сумма со скидкой'].sum()
                ns = category_df['Сумма со скидкой'].sum()
                ns_mix = category_df['Сумма со скидкой'].sum() / store_df['Сумма со скидкой'].sum()
                ns_qty = category_df['Кол-во продаж'].sum()
                ns_qty_mix = category_df['Кол-во продаж'].sum() / store_df['Кол-во продаж'].sum()
                stock_qty = category_df['Количество'].sum()
                store_qty_mix = category_df['Количество'].sum() / store_df['Количество'].sum()
                sku = category_df['SKU'].sum()
                sku_a_mix = category_df.loc[(category_df['Grade'] == "A") & (category_df['Актуальный заказ'] == "Актуально")]['SKU'].sum() / sku
                sku_b_mix = category_df.loc[(category_df['Grade'] == "B") & (category_df['Актуальный заказ'] == "Актуально")]['SKU'].sum() / sku
                sku_c_mix = category_df.loc[(category_df['Grade'] == "C") & (category_df['Актуальный заказ'] == "Актуально")]['SKU'].sum() / sku
                sku_c = category_df.loc[(category_df['Grade'] == "C") & (category_df['Актуальный заказ'] == "Актуально")]['SKU'].sum()

                df_gender_bystore = pd.DataFrame({
                    "Category": [category],
                    "NS": [ns],
                    "NS MIX": [ns_mix],
                    "NS RD MIX": [ns_rd_mix],
                    "NS QTY": [ns_qty],
                    "NS QTY MIX": [ns_qty_mix],
                    "STOCK QTY": [stock_qty],
                    "STOCK QTY MIX": [store_qty_mix],
                    "SKU": [sku],
                    "SKU A MIX": [sku_a_mix],
                    "SKU B MIX": [sku_b_mix],
                    "SKU C MIX": [sku_c_mix],
                    "SKU C": [sku_c]
                })
                cat_store_df.append(df_gender_bystore)
            cat_store_df.append(df_cat_ttl)
            self.store_by_ftw_coll[store] = cat_store_df

    def get_app_collect(self, df_1):
        numpy.seterr(divide='ignore', invalid='ignore')
        df = df_1.loc[df_1['Категория'] == "APP"]
        self.store_name = df['Магазин'].unique()
        self.collections_name = df['Коллекция'].unique()

        cat_df = []
        for category in self.collections_name:  # Тотал по всем магазинам
            category_df = df.loc[(df['Коллекция'] == category) & (df['Категория'] == "APP")]
            ns = category_df['Сумма со скидкой'].sum()
            ns_mix = category_df['Сумма со скидкой'].sum() / df.loc[df['Категория'] == "APP"]['Сумма со скидкой'].sum()
            ns_qty = category_df['Кол-во продаж'].sum()
            ns_qty_mix = category_df['Кол-во продаж'].sum() / df.loc[df['Категория'] == "APP"]['Кол-во продаж'].sum()
            stock_qty = category_df['Количество'].sum()
            store_qty_mix = category_df['Количество'].sum() / df.loc[df['Категория'] == "APP"]['Количество'].sum()
            sku = category_df['SKU'].sum()
            sku_a_mix = category_df.loc[(category_df['Grade'] == "A") & (category_df['Актуальный заказ'] == "Актуально")]['SKU'].sum() / sku
            sku_b_mix = category_df.loc[(category_df['Grade'] == "B") & (category_df['Актуальный заказ'] == "Актуально")]['SKU'].sum() / sku
            sku_c_mix = category_df.loc[(category_df['Grade'] == "C") & (category_df['Актуальный заказ'] == "Актуально")]['SKU'].sum() / sku
            sku_c = category_df.loc[(category_df['Grade'] == "C") & (category_df['Актуальный заказ'] == "Актуально")]['SKU'].sum()

            df_ttl_category_ttl = pd.DataFrame({
                "Category": [category],
                "NS": [ns],
                "NS MIX": [ns_mix],
                "NS RD MIX": [ns_mix],
                "NS QTY": [ns_qty],
                "NS QTY MIX": [ns_qty_mix],
                "STOCK QTY": [stock_qty],
                "STOCK QTY MIX": [store_qty_mix],
                "SKU": [sku],
                "SKU A MIX": [sku_a_mix],
                "SKU B MIX": [sku_b_mix],
                "SKU C MIX": [sku_c_mix],
                "SKU C": [sku_c]
            })
            cat_df.append(df_ttl_category_ttl)

        self.store_by_app_coll["Все магазины"] = cat_df

        for store in self.store_name:
            cat_store_df = []
            store_df = df.loc[(df['Магазин'] == store) & (df['Категория'] == "APP")]

            ns = store_df['Сумма со скидкой'].sum()
            ns_mix = 1
            ns_qty = store_df['Кол-во продаж'].sum()
            ns_qty_mix = 1
            stock_qty = store_df['Количество'].sum()
            store_qty_mix = 1
            sku = store_df['SKU'].sum()
            sku_a_mix = store_df.loc[(store_df['Grade'] == "A") & (store_df['Актуальный заказ'] == "Актуально")]['SKU'].sum() / sku
            sku_b_mix = store_df.loc[(store_df['Grade'] == "B") & (store_df['Актуальный заказ'] == "Актуально")]['SKU'].sum() / sku
            sku_c_mix = store_df.loc[(store_df['Grade'] == "C") & (store_df['Актуальный заказ'] == "Актуально")]['SKU'].sum() / sku
            sku_c = store_df.loc[(store_df['Grade'] == "C") & (store_df['Актуальный заказ'] == "Актуально")]['SKU'].sum()

            df_cat_ttl = pd.DataFrame({
                "Category": ["TTL"],
                "NS": [ns],
                "NS MIX": [ns_mix],
                "NS RD MIX": [ns_mix],
                "NS QTY": [ns_qty],
                "NS QTY MIX": [ns_qty_mix],
                "STOCK QTY": [stock_qty],
                "STOCK QTY MIX": [store_qty_mix],
                "SKU": [sku],
                "SKU A MIX": [sku_a_mix],
                "SKU B MIX": [sku_b_mix],
                "SKU C MIX": [sku_c_mix],
                "SKU C": [sku_c]
            })
            self.collections_name = df.loc[(df['Магазин'] == store) & (df['Категория'] == "APP")]['Коллекция'].unique()
            for category in self.collections_name:
                category_df = store_df.loc[(store_df['Коллекция'] == category) & (df['Категория'] == "APP")]
                category1_df = df.loc[(df['Коллекция'] == category) & (df['Категория'] == "APP")]
                ns_rd_mix = category1_df['Сумма со скидкой'].sum() / df.loc[df['Категория'] == "APP"][
                    'Сумма со скидкой'].sum()
                ns = category_df['Сумма со скидкой'].sum()
                ns_mix = category_df['Сумма со скидкой'].sum() / store_df['Сумма со скидкой'].sum()
                ns_qty = category_df['Кол-во продаж'].sum()
                ns_qty_mix = category_df['Кол-во продаж'].sum() / store_df['Кол-во продаж'].sum()
                stock_qty = category_df['Количество'].sum()
                store_qty_mix = category_df['Количество'].sum() / store_df['Количество'].sum()
                sku = category_df['SKU'].sum()
                sku_a_mix = category_df.loc[(category_df['Grade'] == "A") & (category_df['Актуальный заказ'] == "Актуально")]['SKU'].sum() / sku
                sku_b_mix = category_df.loc[(category_df['Grade'] == "B") & (category_df['Актуальный заказ'] == "Актуально")]['SKU'].sum() / sku
                sku_c_mix = category_df.loc[(category_df['Grade'] == "C") & (category_df['Актуальный заказ'] == "Актуально")]['SKU'].sum() / sku
                sku_c = category_df.loc[(category_df['Grade'] == "C") & (category_df['Актуальный заказ'] == "Актуально")]['SKU'].sum()

                df_gender_bystore = pd.DataFrame({
                    "Category": [category],
                    "NS": [ns],
                    "NS MIX": [ns_mix],
                    "NS RD MIX": [ns_rd_mix],
                    "NS QTY": [ns_qty],
                    "NS QTY MIX": [ns_qty_mix],
                    "STOCK QTY": [stock_qty],
                    "STOCK QTY MIX": [store_qty_mix],
                    "SKU": [sku],
                    "SKU A MIX": [sku_a_mix],
                    "SKU B MIX": [sku_b_mix],
                    "SKU C MIX": [sku_c_mix],
                    "SKU C": [sku_c]
                })
                cat_store_df.append(df_gender_bystore)
            cat_store_df.append(df_cat_ttl)
            self.store_by_app_coll[store] = cat_store_df

    def get_wmn_cat(self, df):
        numpy.seterr(divide='ignore', invalid='ignore')
        self.store_name = df['Магазин'].unique()
        self.category_name = df['Категория'].unique()

        cat_df = []
        for category in self.category_name:  # Тотал по всем магазинам
            category_df = df.loc[(df['Категория'] == category) & (df['Пол'] == "WOMEN")]
            ns = category_df['Сумма со скидкой'].sum()
            ns_mix = category_df['Сумма со скидкой'].sum() / df.loc[df['Пол'] == "WOMEN"]['Сумма со скидкой'].sum()
            ns_qty = category_df['Кол-во продаж'].sum()
            ns_qty_mix = category_df['Кол-во продаж'].sum() / df.loc[df['Пол'] == "WOMEN"]['Кол-во продаж'].sum()
            stock_qty = category_df['Количество'].sum()
            store_qty_mix = category_df['Количество'].sum() / df.loc[df['Пол'] == "WOMEN"]['Количество'].sum()
            sku = category_df['SKU'].sum()
            sku_a_mix = category_df.loc[(category_df['Grade'] == "A") & (category_df['Актуальный заказ'] == "Актуально")]['SKU'].sum() / sku
            sku_b_mix = category_df.loc[(category_df['Grade'] == "B") & (category_df['Актуальный заказ'] == "Актуально")]['SKU'].sum() / sku
            sku_c_mix = category_df.loc[(category_df['Grade'] == "C") & (category_df['Актуальный заказ'] == "Актуально")]['SKU'].sum() / sku
            sku_c = category_df.loc[(category_df['Grade'] == "C") & (category_df['Актуальный заказ'] == "Актуально")]['SKU'].sum()

            df_ttl_category_ttl = pd.DataFrame({
                "Category": [category],
                "NS": [ns],
                "NS MIX": [ns_mix],
                "NS RD MIX": [ns_mix],
                "NS QTY": [ns_qty],
                "NS QTY MIX": [ns_qty_mix],
                "STOCK QTY": [stock_qty],
                "STOCK QTY MIX": [store_qty_mix],
                "SKU": [sku],
                "SKU A MIX": [sku_a_mix],
                "SKU B MIX": [sku_b_mix],
                "SKU C MIX": [sku_c_mix],
                "SKU C": [sku_c]
            })
            cat_df.append(df_ttl_category_ttl)

        self.store_by_wmn_cat["Все магазины"] = cat_df

        for store in self.store_name:
            cat_store_df = []
            store_df = df.loc[(df['Магазин'] == store) & (df['Пол'] == "WOMEN")]

            ns = store_df['Сумма со скидкой'].sum()
            ns_mix = 1
            ns_qty = store_df['Кол-во продаж'].sum()
            ns_qty_mix = 1
            stock_qty = store_df['Количество'].sum()
            store_qty_mix = 1
            sku = store_df['SKU'].sum()
            sku_a_mix = store_df.loc[(store_df['Grade'] == "A") & (store_df['Актуальный заказ'] == "Актуально")]['SKU'].sum() / sku
            sku_b_mix = store_df.loc[(store_df['Grade'] == "B") & (store_df['Актуальный заказ'] == "Актуально")]['SKU'].sum() / sku
            sku_c_mix = store_df.loc[(store_df['Grade'] == "C") & (store_df['Актуальный заказ'] == "Актуально")]['SKU'].sum() / sku
            sku_c = store_df.loc[(store_df['Grade'] == "C") & (store_df['Актуальный заказ'] == "Актуально")]['SKU'].sum()

            df_cat_ttl = pd.DataFrame({
                "Category": ["TTL"],
                "NS": [ns],
                "NS MIX": [ns_mix],
                "NS RD MIX": [ns_mix],
                "NS QTY": [ns_qty],
                "NS QTY MIX": [ns_qty_mix],
                "STOCK QTY": [stock_qty],
                "STOCK QTY MIX": [store_qty_mix],
                "SKU": [sku],
                "SKU A MIX": [sku_a_mix],
                "SKU B MIX": [sku_b_mix],
                "SKU C MIX": [sku_c_mix],
                "SKU C": [sku_c]
            })

            for category in self.category_name:
                numpy.seterr(divide='ignore')
                category_df = store_df.loc[(store_df['Категория'] == category) & (store_df['Пол'] == "WOMEN")]
                category1_df = df.loc[(df['Категория'] == category) & (df['Пол'] == "WOMEN")]
                ns_rd_mix = category1_df['Сумма со скидкой'].sum() / df.loc[df['Пол'] == "WOMEN"]['Сумма со скидкой'].sum()
                ns = category_df['Сумма со скидкой'].sum()
                ns_mix = category_df['Сумма со скидкой'].sum() / store_df['Сумма со скидкой'].sum()
                ns_qty = category_df['Кол-во продаж'].sum()
                ns_qty_mix = category_df['Кол-во продаж'].sum() / store_df['Кол-во продаж'].sum()
                stock_qty = category_df['Количество'].sum()
                store_qty_mix = category_df['Количество'].sum() / store_df['Количество'].sum()
                sku = category_df['SKU'].sum()
                sku_a_mix = category_df.loc[(category_df['Grade'] == "A") & (category_df['Актуальный заказ'] == "Актуально")]['SKU'].sum() / sku
                sku_b_mix = category_df.loc[(category_df['Grade'] == "B") & (category_df['Актуальный заказ'] == "Актуально")]['SKU'].sum() / sku
                sku_c_mix = category_df.loc[(category_df['Grade'] == "C") & (category_df['Актуальный заказ'] == "Актуально")]['SKU'].sum() / sku
                sku_c = category_df.loc[(category_df['Grade'] == "C") & (category_df['Актуальный заказ'] == "Актуально")]['SKU'].sum()

                df_gender_bystore = pd.DataFrame({
                    "Category": [category],
                    "NS": [ns],
                    "NS MIX": [ns_mix],
                    "NS RD MIX": [ns_rd_mix],
                    "NS QTY": [ns_qty],
                    "NS QTY MIX": [ns_qty_mix],
                    "STOCK QTY": [stock_qty],
                    "STOCK QTY MIX": [store_qty_mix],
                    "SKU": [sku],
                    "SKU A MIX": [sku_a_mix],
                    "SKU B MIX": [sku_b_mix],
                    "SKU C MIX": [sku_c_mix],
                    "SKU C": [sku_c]
                })
                cat_store_df.append(df_gender_bystore)
            cat_store_df.append(df_cat_ttl)
            self.store_by_wmn_cat[store] = cat_store_df

    def get_men_cat(self, df):
        self.store_name = df['Магазин'].unique()
        self.category_name = df['Категория'].unique()

        cat_df = []
        for category in self.category_name:  # Тотал по всем магазинам
            category_df = df.loc[(df['Категория'] == category) & (df['Пол'] == "MEN")]
            ns = category_df['Сумма со скидкой'].sum()
            ns_mix = category_df['Сумма со скидкой'].sum() / df.loc[df['Пол'] == "MEN"]['Сумма со скидкой'].sum()
            ns_qty = category_df['Кол-во продаж'].sum()
            ns_qty_mix = category_df['Кол-во продаж'].sum() / df.loc[df['Пол'] == "MEN"]['Кол-во продаж'].sum()
            stock_qty = category_df['Количество'].sum()
            store_qty_mix = category_df['Количество'].sum() / df.loc[df['Пол'] == "MEN"]['Количество'].sum()
            sku = category_df['SKU'].sum()
            sku_a_mix = category_df.loc[(category_df['Grade'] == "A") & (category_df['Актуальный заказ'] == "Актуально")]['SKU'].sum() / sku
            sku_b_mix = category_df.loc[(category_df['Grade'] == "B") & (category_df['Актуальный заказ'] == "Актуально")]['SKU'].sum() / sku
            sku_c_mix = category_df.loc[(category_df['Grade'] == "C") & (category_df['Актуальный заказ'] == "Актуально")]['SKU'].sum() / sku
            sku_c = category_df.loc[(category_df['Grade'] == "C") & (category_df['Актуальный заказ'] == "Актуально")]['SKU'].sum()

            df_ttl_category_ttl = pd.DataFrame({
                "Category": [category],
                "NS": [ns],
                "NS MIX": [ns_mix],
                "NS RD MIX": [ns_mix],
                "NS QTY": [ns_qty],
                "NS QTY MIX": [ns_qty_mix],
                "STOCK QTY": [stock_qty],
                "STOCK QTY MIX": [store_qty_mix],
                "SKU": [sku],
                "SKU A MIX": [sku_a_mix],
                "SKU B MIX": [sku_b_mix],
                "SKU C MIX": [sku_c_mix],
                "SKU C": [sku_c]
            })
            cat_df.append(df_ttl_category_ttl)

        self.store_by_men_cat["Все магазины"] = cat_df

        for store in self.store_name:
            cat_store_df = []
            store_df = df.loc[(df['Магазин'] == store) & (df['Пол'] == "MEN")]
            ns = store_df['Сумма со скидкой'].sum()
            ns_mix = 1
            ns_qty = store_df['Кол-во продаж'].sum()
            ns_qty_mix = 1
            stock_qty = store_df['Количество'].sum()
            store_qty_mix = 1
            sku = store_df['SKU'].sum()
            sku_a_mix = store_df.loc[(store_df['Grade'] == "A") & (store_df['Актуальный заказ'] == "Актуально")]['SKU'].sum() / sku
            sku_b_mix = store_df.loc[(store_df['Grade'] == "B") & (store_df['Актуальный заказ'] == "Актуально")]['SKU'].sum() / sku
            sku_c_mix = store_df.loc[(store_df['Grade'] == "C") & (store_df['Актуальный заказ'] == "Актуально")]['SKU'].sum() / sku
            sku_c = store_df.loc[(store_df['Grade'] == "C") & (store_df['Актуальный заказ'] == "Актуально")]['SKU'].sum()

            df_cat_ttl = pd.DataFrame({
                "Category": ["TTL"],
                "NS": [ns],
                "NS MIX": [ns_mix],
                "NS RD MIX": [ns_mix],
                "NS QTY": [ns_qty],
                "NS QTY MIX": [ns_qty_mix],
                "STOCK QTY": [stock_qty],
                "STOCK QTY MIX": [store_qty_mix],
                "SKU": [sku],
                "SKU A MIX": [sku_a_mix],
                "SKU B MIX": [sku_b_mix],
                "SKU C MIX": [sku_c_mix],
                "SKU C": [sku_c]
            })

            for category in self.category_name:
                category_df = store_df.loc[(store_df['Категория'] == category) & (store_df['Пол'] == "MEN")]
                category1_df = df.loc[(df['Категория'] == category) & (df['Пол'] == "MEN")]
                ns_rd_mix = category1_df['Сумма со скидкой'].sum() / df.loc[df['Пол'] == "MEN"]['Сумма со скидкой'].sum()
                ns = category_df['Сумма со скидкой'].sum()
                ns_mix = category_df['Сумма со скидкой'].sum() / store_df['Сумма со скидкой'].sum()
                ns_qty = category_df['Кол-во продаж'].sum()
                ns_qty_mix = category_df['Кол-во продаж'].sum() / store_df['Кол-во продаж'].sum()
                stock_qty = category_df['Количество'].sum()
                store_qty_mix = category_df['Количество'].sum() / store_df['Количество'].sum()
                sku = category_df['SKU'].sum()
                sku_a_mix = category_df.loc[(category_df['Grade'] == "A") & (category_df['Актуальный заказ'] == "Актуально")]['SKU'].sum() / sku
                sku_b_mix = category_df.loc[(category_df['Grade'] == "B") & (category_df['Актуальный заказ'] == "Актуально")]['SKU'].sum() / sku
                sku_c_mix = category_df.loc[(category_df['Grade'] == "C") & (category_df['Актуальный заказ'] == "Актуально")]['SKU'].sum() / sku
                sku_c = category_df.loc[(category_df['Grade'] == "C") & (category_df['Актуальный заказ'] == "Актуально")]['SKU'].sum()

                df_gender_bystore = pd.DataFrame({
                    "Category": [category],
                    "NS": [ns],
                    "NS MIX": [ns_mix],
                    "NS RD MIX": [ns_rd_mix],
                    "NS QTY": [ns_qty],
                    "NS QTY MIX": [ns_qty_mix],
                    "STOCK QTY": [stock_qty],
                    "STOCK QTY MIX": [store_qty_mix],
                    "SKU": [sku],
                    "SKU A MIX": [sku_a_mix],
                    "SKU B MIX": [sku_b_mix],
                    "SKU C MIX": [sku_c_mix],
                    "SKU C": [sku_c]
                })
                cat_store_df.append(df_gender_bystore)
            cat_store_df.append(df_cat_ttl)
            self.store_by_men_cat[store] = cat_store_df

    def get_category_df(self, df):
        self.store_name = df['Магазин'].unique()
        self.category_name = df['Категория'].unique()

        cat_df = []
        for category in self.category_name:  # Тотал по всем магазинам
            category_df = df.loc[df['Категория'] == category]
            ns = category_df['Сумма со скидкой'].sum()
            ns_mix = category_df['Сумма со скидкой'].sum() / df['Сумма со скидкой'].sum()
            ns_qty = category_df['Кол-во продаж'].sum()
            ns_qty_mix = category_df['Кол-во продаж'].sum() / df['Кол-во продаж'].sum()
            stock_qty = category_df['Количество'].sum()
            store_qty_mix = category_df['Количество'].sum() / df['Количество'].sum()
            sku = category_df['SKU'].sum()
            sku_a_mix = category_df.loc[(category_df['Grade'] == "A") & (category_df['Актуальный заказ'] == "Актуально")]['SKU'].sum() / sku
            sku_b_mix = category_df.loc[(category_df['Grade'] == "B") & (category_df['Актуальный заказ'] == "Актуально")]['SKU'].sum() / sku
            sku_c_mix = category_df.loc[(category_df['Grade'] == "C") & (category_df['Актуальный заказ'] == "Актуально")]['SKU'].sum() / sku
            sku_c = category_df.loc[(category_df['Grade'] == "C") & (category_df['Актуальный заказ'] == "Актуально")]['SKU'].sum()

            df_ttl_category_ttl = pd.DataFrame({
                "Category": [category],
                "NS": [ns],
                "NS MIX": [ns_mix],
                "NS RD MIX": [ns_mix],
                "NS QTY": [ns_qty],
                "NS QTY MIX": [ns_qty_mix],
                "STOCK QTY": [stock_qty],
                "STOCK QTY MIX": [store_qty_mix],
                "SKU": [sku],
                "SKU A MIX": [sku_a_mix],
                "SKU B MIX": [sku_b_mix],
                "SKU C MIX": [sku_c_mix],
                "SKU C": [sku_c]
            })
            cat_df.append(df_ttl_category_ttl)

        self.store_by_category["Все магазины"] = cat_df

        for store in self.store_name:
            cat_store_df = []
            store_df = df.loc[df['Магазин'] == store]

            ns = store_df['Сумма со скидкой'].sum()
            ns_mix = 1
            ns_qty = store_df['Кол-во продаж'].sum()
            ns_qty_mix = 1
            stock_qty = store_df['Количество'].sum()
            store_qty_mix = 1
            sku = store_df['SKU'].sum()
            sku_a_mix = store_df.loc[(store_df['Grade'] == "A") & (store_df['Актуальный заказ'] == "Актуально")]['SKU'].sum() / sku
            sku_b_mix = store_df.loc[(store_df['Grade'] == "B") & (store_df['Актуальный заказ'] == "Актуально")]['SKU'].sum() / sku
            sku_c_mix = store_df.loc[(store_df['Grade'] == "C") & (store_df['Актуальный заказ'] == "Актуально")]['SKU'].sum() / sku
            sku_c = store_df.loc[(store_df['Grade'] == "C") & (store_df['Актуальный заказ'] == "Актуально")]['SKU'].sum()

            df_cat_ttl = pd.DataFrame({
                "Category": ["TTL"],
                "NS": [ns],
                "NS MIX": [ns_mix],
                "NS RD MIX": [ns_mix],
                "NS QTY": [ns_qty],
                "NS QTY MIX": [ns_qty_mix],
                "STOCK QTY": [stock_qty],
                "STOCK QTY MIX": [store_qty_mix],
                "SKU": [sku],
                "SKU A MIX": [sku_a_mix],
                "SKU B MIX": [sku_b_mix],
                "SKU C MIX": [sku_c_mix],
                "SKU C": [sku_c]
            })

            for category in self.category_name:
                category_df = store_df.loc[store_df['Категория'] == category]
                category1_df = df.loc[df['Категория'] == category]
                ns_rd_mix = category1_df['Сумма со скидкой'].sum() / df['Сумма со скидкой'].sum()
                ns = category_df['Сумма со скидкой'].sum()
                ns_mix = category_df['Сумма со скидкой'].sum() / store_df['Сумма со скидкой'].sum()
                ns_qty = category_df['Кол-во продаж'].sum()
                ns_qty_mix = category_df['Кол-во продаж'].sum() / store_df['Кол-во продаж'].sum()
                stock_qty = category_df['Количество'].sum()
                store_qty_mix = category_df['Количество'].sum() / store_df['Количество'].sum()
                sku = category_df['SKU'].sum()
                sku_a_mix = category_df.loc[(category_df['Grade'] == "A") & (category_df['Актуальный заказ'] == "Актуально")]['SKU'].sum() / sku
                sku_b_mix = category_df.loc[(category_df['Grade'] == "B") & (category_df['Актуальный заказ'] == "Актуально")]['SKU'].sum() / sku
                sku_c_mix = category_df.loc[(category_df['Grade'] == "C") & (category_df['Актуальный заказ'] == "Актуально")]['SKU'].sum() / sku
                sku_c = category_df.loc[(category_df['Grade'] == "C") & (category_df['Актуальный заказ'] == "Актуально")]['SKU'].sum()

                df_gender_bystore = pd.DataFrame({
                    "Category": [category],
                    "NS": [ns],
                    "NS MIX": [ns_mix],
                    "NS RD MIX": [ns_rd_mix],
                    "NS QTY": [ns_qty],
                    "NS QTY MIX": [ns_qty_mix],
                    "STOCK QTY": [stock_qty],
                    "STOCK QTY MIX": [store_qty_mix],
                    "SKU": [sku],
                    "SKU A MIX": [sku_a_mix],
                    "SKU B MIX": [sku_b_mix],
                    "SKU C MIX": [sku_c_mix],
                    "SKU C": [sku_c]
                })
                cat_store_df.append(df_gender_bystore)
            cat_store_df.append(df_cat_ttl)
            self.store_by_category[store] = cat_store_df
        
    def get_gender_df(self, df):
        self.store_name = df['Магазин'].unique()
        self.gender_name = df['Пол'].unique()

        gend_df = []
        for gender in self.gender_name:     # Тотал по всем магазинам
            gender_df = df.loc[df['Пол'] == gender]
            ns = gender_df['Сумма со скидкой'].sum()
            ns_mix = gender_df['Сумма со скидкой'].sum() / df['Сумма со скидкой'].sum()
            ns_qty = gender_df['Кол-во продаж'].sum()
            ns_qty_mix = gender_df['Кол-во продаж'].sum() / df['Кол-во продаж'].sum()
            stock_qty = gender_df['Количество'].sum()
            store_qty_mix = gender_df['Количество'].sum() / df['Количество'].sum()
            sku = gender_df['SKU'].sum()
            sku_a_mix = gender_df.loc[(gender_df['Grade'] == "A") & (gender_df['Актуальный заказ'] == "Актуально")]['SKU'].sum() / sku
            sku_b_mix = gender_df.loc[(gender_df['Grade'] == "B") & (gender_df['Актуальный заказ'] == "Актуально")]['SKU'].sum() / sku
            sku_c_mix = gender_df.loc[(gender_df['Grade'] == "C") & (gender_df['Актуальный заказ'] == "Актуально")]['SKU'].sum() / sku
            sku_c = gender_df.loc[(gender_df['Grade'] == "C") & (gender_df['Актуальный заказ'] == "Актуально")]['SKU'].sum()

            df_ttl_gender_ttl = pd.DataFrame({
                "Gender": [gender],
                "NS": [ns],
                "NS MIX": [ns_mix],
                "NS RD MIX": [ns_mix],
                "NS QTY": [ns_qty],
                "NS QTY MIX": [ns_qty_mix],
                "STOCK QTY": [stock_qty],
                "STOCK QTY MIX": [store_qty_mix],
                "SKU": [sku],
                "SKU A MIX": [sku_a_mix],
                "SKU B MIX": [sku_b_mix],
                "SKU C MIX": [sku_c_mix],
                "SKU C": [sku_c]
            })
            gend_df.append(df_ttl_gender_ttl)

        self.store_by_gender["Все магазины"] = gend_df

        for store in self.store_name:
            gend_store_df = []
            store_df = df.loc[df['Магазин'] == store]

            ns = store_df['Сумма со скидкой'].sum()
            ns_mix = 1
            ns_qty = store_df['Кол-во продаж'].sum()
            ns_qty_mix = 1
            stock_qty = store_df['Количество'].sum()
            store_qty_mix = 1
            sku = store_df['SKU'].sum()
            sku_a_mix = store_df.loc[(store_df['Grade'] == "A") & (store_df['Актуальный заказ'] == "Актуально")]['SKU'].sum() / sku
            sku_b_mix = store_df.loc[(store_df['Grade'] == "B") & (store_df['Актуальный заказ'] == "Актуально")]['SKU'].sum() / sku
            sku_c_mix = store_df.loc[(store_df['Grade'] == "C") & (store_df['Актуальный заказ'] == "Актуально")]['SKU'].sum() / sku
            sku_c = store_df.loc[(store_df['Grade'] == "C") & (store_df['Актуальный заказ'] == "Актуально")]['SKU'].sum()

            df_gender_ttl = pd.DataFrame({
                "Gender": ["TTL"],
                "NS": [ns],
                "NS MIX": [ns_mix],
                "NS RD MIX": [ns_mix],
                "NS QTY": [ns_qty],
                "NS QTY MIX": [ns_qty_mix],
                "STOCK QTY": [stock_qty],
                "STOCK QTY MIX": [store_qty_mix],
                "SKU": [sku],
                "SKU A MIX": [sku_a_mix],
                "SKU B MIX": [sku_b_mix],
                "SKU C MIX": [sku_c_mix],
                "SKU C": [sku_c]
            })

            for gender in self.gender_name:
                gender_df = store_df.loc[store_df['Пол'] == gender]
                gender1_df = df.loc[df['Пол'] == gender]
                ns_rd_mix = gender1_df['Сумма со скидкой'].sum() / df['Сумма со скидкой'].sum()
                ns = gender_df['Сумма со скидкой'].sum()
                ns_mix = gender_df['Сумма со скидкой'].sum()/store_df['Сумма со скидкой'].sum()
                ns_qty = gender_df['Кол-во продаж'].sum()
                ns_qty_mix = gender_df['Кол-во продаж'].sum()/store_df['Кол-во продаж'].sum()
                stock_qty = gender_df['Количество'].sum()
                store_qty_mix = gender_df['Количество'].sum()/store_df['Количество'].sum()
                sku = gender_df['SKU'].sum()
                sku_a_mix = gender_df.loc[(gender_df['Grade'] == "A") & (gender_df['Актуальный заказ'] == "Актуально")]['SKU'].sum()/sku
                sku_b_mix = gender_df.loc[(gender_df['Grade'] == "B") & (gender_df['Актуальный заказ'] == "Актуально")]['SKU'].sum()/sku
                sku_c_mix = gender_df.loc[(gender_df['Grade'] == "C") & (gender_df['Актуальный заказ'] == "Актуально")]['SKU'].sum()/sku
                sku_c = gender_df.loc[(gender_df['Grade'] == "C") & (gender_df['Актуальный заказ'] == "Актуально")]['SKU'].sum()

                df_gender_bystore = pd.DataFrame({
                    "Gender": [gender],
                    "NS": [ns],
                    "NS MIX": [ns_mix],
                    "NS RD MIX": [ns_rd_mix],
                    "NS QTY": [ns_qty],
                    "NS QTY MIX": [ns_qty_mix],
                    "STOCK QTY": [stock_qty],
                    "STOCK QTY MIX": [store_qty_mix],
                    "SKU": [sku],
                    "SKU A MIX": [sku_a_mix],
                    "SKU B MIX": [sku_b_mix],
                    "SKU C MIX": [sku_c_mix],
                    "SKU C": [sku_c]
                })
                gend_store_df.append(df_gender_bystore)
            gend_store_df.append(df_gender_ttl)
            self.store_by_gender[store] = gend_store_df


if __name__ == "__main__":
    start = Processing()
    start.process("TestFile.xlsx")
